// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/profiling/Continuous.proto

package org.apache.skywalking.apm.network.ebpf.profiling.v3;

/**
 * Protobuf type {@code skywalking.v3.ContinuousProfilingPolicyQuery}
 */
public final class ContinuousProfilingPolicyQuery extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.ContinuousProfilingPolicyQuery)
    ContinuousProfilingPolicyQueryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ContinuousProfilingPolicyQuery.newBuilder() to construct.
  private ContinuousProfilingPolicyQuery(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ContinuousProfilingPolicyQuery() {
    policies_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ContinuousProfilingPolicyQuery();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ContinuousProfilingPolicyQuery(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              policies_ = new java.util.ArrayList<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery>();
              mutable_bitField0_ |= 0x00000001;
            }
            policies_.add(
                input.readMessage(org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        policies_ = java.util.Collections.unmodifiableList(policies_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.skywalking.apm.network.ebpf.profiling.v3.Continuous.internal_static_skywalking_v3_ContinuousProfilingPolicyQuery_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.skywalking.apm.network.ebpf.profiling.v3.Continuous.internal_static_skywalking_v3_ContinuousProfilingPolicyQuery_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.class, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.Builder.class);
  }

  public static final int POLICIES_FIELD_NUMBER = 1;
  private java.util.List<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery> policies_;
  /**
   * <pre>
   * current agent contains service and policies
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
   */
  @java.lang.Override
  public java.util.List<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery> getPoliciesList() {
    return policies_;
  }
  /**
   * <pre>
   * current agent contains service and policies
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder> 
      getPoliciesOrBuilderList() {
    return policies_;
  }
  /**
   * <pre>
   * current agent contains service and policies
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
   */
  @java.lang.Override
  public int getPoliciesCount() {
    return policies_.size();
  }
  /**
   * <pre>
   * current agent contains service and policies
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
   */
  @java.lang.Override
  public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery getPolicies(int index) {
    return policies_.get(index);
  }
  /**
   * <pre>
   * current agent contains service and policies
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
   */
  @java.lang.Override
  public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder getPoliciesOrBuilder(
      int index) {
    return policies_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < policies_.size(); i++) {
      output.writeMessage(1, policies_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < policies_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, policies_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery)) {
      return super.equals(obj);
    }
    org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery other = (org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery) obj;

    if (!getPoliciesList()
        .equals(other.getPoliciesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getPoliciesCount() > 0) {
      hash = (37 * hash) + POLICIES_FIELD_NUMBER;
      hash = (53 * hash) + getPoliciesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code skywalking.v3.ContinuousProfilingPolicyQuery}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.ContinuousProfilingPolicyQuery)
      org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQueryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.skywalking.apm.network.ebpf.profiling.v3.Continuous.internal_static_skywalking_v3_ContinuousProfilingPolicyQuery_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.skywalking.apm.network.ebpf.profiling.v3.Continuous.internal_static_skywalking_v3_ContinuousProfilingPolicyQuery_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.class, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPoliciesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (policiesBuilder_ == null) {
        policies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        policiesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.skywalking.apm.network.ebpf.profiling.v3.Continuous.internal_static_skywalking_v3_ContinuousProfilingPolicyQuery_descriptor;
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery getDefaultInstanceForType() {
      return org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery build() {
      org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery buildPartial() {
      org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery result = new org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery(this);
      int from_bitField0_ = bitField0_;
      if (policiesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          policies_ = java.util.Collections.unmodifiableList(policies_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.policies_ = policies_;
      } else {
        result.policies_ = policiesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery) {
        return mergeFrom((org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery other) {
      if (other == org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery.getDefaultInstance()) return this;
      if (policiesBuilder_ == null) {
        if (!other.policies_.isEmpty()) {
          if (policies_.isEmpty()) {
            policies_ = other.policies_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePoliciesIsMutable();
            policies_.addAll(other.policies_);
          }
          onChanged();
        }
      } else {
        if (!other.policies_.isEmpty()) {
          if (policiesBuilder_.isEmpty()) {
            policiesBuilder_.dispose();
            policiesBuilder_ = null;
            policies_ = other.policies_;
            bitField0_ = (bitField0_ & ~0x00000001);
            policiesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPoliciesFieldBuilder() : null;
          } else {
            policiesBuilder_.addAllMessages(other.policies_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery> policies_ =
      java.util.Collections.emptyList();
    private void ensurePoliciesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        policies_ = new java.util.ArrayList<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery>(policies_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder> policiesBuilder_;

    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public java.util.List<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery> getPoliciesList() {
      if (policiesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(policies_);
      } else {
        return policiesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public int getPoliciesCount() {
      if (policiesBuilder_ == null) {
        return policies_.size();
      } else {
        return policiesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery getPolicies(int index) {
      if (policiesBuilder_ == null) {
        return policies_.get(index);
      } else {
        return policiesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder setPolicies(
        int index, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery value) {
      if (policiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePoliciesIsMutable();
        policies_.set(index, value);
        onChanged();
      } else {
        policiesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder setPolicies(
        int index, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder builderForValue) {
      if (policiesBuilder_ == null) {
        ensurePoliciesIsMutable();
        policies_.set(index, builderForValue.build());
        onChanged();
      } else {
        policiesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder addPolicies(org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery value) {
      if (policiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePoliciesIsMutable();
        policies_.add(value);
        onChanged();
      } else {
        policiesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder addPolicies(
        int index, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery value) {
      if (policiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePoliciesIsMutable();
        policies_.add(index, value);
        onChanged();
      } else {
        policiesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder addPolicies(
        org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder builderForValue) {
      if (policiesBuilder_ == null) {
        ensurePoliciesIsMutable();
        policies_.add(builderForValue.build());
        onChanged();
      } else {
        policiesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder addPolicies(
        int index, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder builderForValue) {
      if (policiesBuilder_ == null) {
        ensurePoliciesIsMutable();
        policies_.add(index, builderForValue.build());
        onChanged();
      } else {
        policiesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder addAllPolicies(
        java.lang.Iterable<? extends org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery> values) {
      if (policiesBuilder_ == null) {
        ensurePoliciesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, policies_);
        onChanged();
      } else {
        policiesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder clearPolicies() {
      if (policiesBuilder_ == null) {
        policies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        policiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public Builder removePolicies(int index) {
      if (policiesBuilder_ == null) {
        ensurePoliciesIsMutable();
        policies_.remove(index);
        onChanged();
      } else {
        policiesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder getPoliciesBuilder(
        int index) {
      return getPoliciesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder getPoliciesOrBuilder(
        int index) {
      if (policiesBuilder_ == null) {
        return policies_.get(index);  } else {
        return policiesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public java.util.List<? extends org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder> 
         getPoliciesOrBuilderList() {
      if (policiesBuilder_ != null) {
        return policiesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(policies_);
      }
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder addPoliciesBuilder() {
      return getPoliciesFieldBuilder().addBuilder(
          org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.getDefaultInstance());
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder addPoliciesBuilder(
        int index) {
      return getPoliciesFieldBuilder().addBuilder(
          index, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.getDefaultInstance());
    }
    /**
     * <pre>
     * current agent contains service and policies
     * </pre>
     *
     * <code>repeated .skywalking.v3.ContinuousProfilingServicePolicyQuery policies = 1;</code>
     */
    public java.util.List<org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder> 
         getPoliciesBuilderList() {
      return getPoliciesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder> 
        getPoliciesFieldBuilder() {
      if (policiesBuilder_ == null) {
        policiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQuery.Builder, org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingServicePolicyQueryOrBuilder>(
                policies_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        policies_ = null;
      }
      return policiesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.ContinuousProfilingPolicyQuery)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.ContinuousProfilingPolicyQuery)
  private static final org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery();
  }

  public static org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ContinuousProfilingPolicyQuery>
      PARSER = new com.google.protobuf.AbstractParser<ContinuousProfilingPolicyQuery>() {
    @java.lang.Override
    public ContinuousProfilingPolicyQuery parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ContinuousProfilingPolicyQuery(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ContinuousProfilingPolicyQuery> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ContinuousProfilingPolicyQuery> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.skywalking.apm.network.ebpf.profiling.v3.ContinuousProfilingPolicyQuery getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

