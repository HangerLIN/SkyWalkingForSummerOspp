// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.generator;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.common.base.Preconditions;

@JsonDeserialize(builder = SequenceGenerator.Builder.class)
public final class SequenceGenerator implements Generator<Long> {
    private final boolean limitedDomain;
    private final long min;
    private final long max;
    private final long step;
    private final Integer fluctuation;
    private final Integer domainSize;
    private final Random random = ThreadLocalRandom.current();
    private final Set<Long> domain = new HashSet<>();
    private volatile Long last;

    public SequenceGenerator(Builder builder) {
        min = builder.min;
        max = builder.max;
        step = builder.step;
        fluctuation = builder.fluctuation;
        domainSize = builder.domainSize;
        limitedDomain = builder.domainSize != null && builder.domainSize > 0;
        reset();
    }

    @Override
    public Long next() {
        if (!limitedDomain) {
            return next0();
        }
        return domain.stream().skip(random.nextInt(domain.size())).findFirst().orElseThrow(() -> new RuntimeException("Should never happen"));
    }

    private synchronized long next0() {
        long next = last == null ? min : last + step;
        if (fluctuation != null) {
            int j = random.nextInt(fluctuation);
            next += random.nextBoolean() ? j : -j;
        }
        if (next > max) {
            return max;
        }
        if (next < min) {
            return min;
        }
        return last = next;
    }

    @Override
    public void reset() {
        last = null;
        if (limitedDomain) {
            domain.clear();
            while (domain.size() < domainSize) {
                domain.add(next0());
            }
        }
    }

    @Override
    public String toString() {
        return String.valueOf(next());
    }


    public static class Builder {
        private long min = Long.MIN_VALUE;
        private long max = Long.MAX_VALUE;
        private long step = 1;
        private Integer domainSize;
        private Integer fluctuation;

        public SequenceGenerator build() {
            if (domainSize != null) {
                Preconditions.checkArgument(domainSize > 0, "domainSize must be > 0");
                Preconditions.checkArgument(domainSize + min <= max, "domain size must be <= max - min");
            }
            return new SequenceGenerator(this);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Builder() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getMin() {
            return this.min;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getMax() {
            return this.max;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getStep() {
            return this.step;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Integer getDomainSize() {
            return this.domainSize;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Integer getFluctuation() {
            return this.fluctuation;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SequenceGenerator.Builder setMin(final long min) {
            this.min = min;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SequenceGenerator.Builder setMax(final long max) {
            this.max = max;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SequenceGenerator.Builder setStep(final long step) {
            this.step = step;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SequenceGenerator.Builder setDomainSize(final Integer domainSize) {
            this.domainSize = domainSize;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SequenceGenerator.Builder setFluctuation(final Integer fluctuation) {
            this.fluctuation = fluctuation;
            return this;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof SequenceGenerator.Builder)) return false;
            final SequenceGenerator.Builder other = (SequenceGenerator.Builder) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getMin() != other.getMin()) return false;
            if (this.getMax() != other.getMax()) return false;
            if (this.getStep() != other.getStep()) return false;
            final java.lang.Object this$domainSize = this.getDomainSize();
            final java.lang.Object other$domainSize = other.getDomainSize();
            if (this$domainSize == null ? other$domainSize != null : !this$domainSize.equals(other$domainSize)) return false;
            final java.lang.Object this$fluctuation = this.getFluctuation();
            final java.lang.Object other$fluctuation = other.getFluctuation();
            if (this$fluctuation == null ? other$fluctuation != null : !this$fluctuation.equals(other$fluctuation)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof SequenceGenerator.Builder;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final long $min = this.getMin();
            result = result * PRIME + (int) ($min >>> 32 ^ $min);
            final long $max = this.getMax();
            result = result * PRIME + (int) ($max >>> 32 ^ $max);
            final long $step = this.getStep();
            result = result * PRIME + (int) ($step >>> 32 ^ $step);
            final java.lang.Object $domainSize = this.getDomainSize();
            result = result * PRIME + ($domainSize == null ? 43 : $domainSize.hashCode());
            final java.lang.Object $fluctuation = this.getFluctuation();
            result = result * PRIME + ($fluctuation == null ? 43 : $fluctuation.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "SequenceGenerator.Builder(min=" + this.getMin() + ", max=" + this.getMax() + ", step=" + this.getStep() + ", domainSize=" + this.getDomainSize() + ", fluctuation=" + this.getFluctuation() + ")";
        }
    }
}
