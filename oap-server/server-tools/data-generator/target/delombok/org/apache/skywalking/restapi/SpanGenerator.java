// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.restapi;

import java.util.List;
import java.util.stream.Collectors;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
import org.apache.skywalking.apm.network.language.agent.v3.SpanLayer;
import org.apache.skywalking.apm.network.language.agent.v3.SpanObject;
import org.apache.skywalking.generator.Generator;

@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)
public final class SpanGenerator implements Generator<SpanObject> {
    private Generator<Long> spanId;
    private Generator<Long> parentSpanId;
    private Generator<Long> startTime;
    private Generator<Long> endTime;
    private Generator<String> operationName;
    private Generator<String> peer;
    private Generator<Long> spanLayer;
    private Generator<Long> componentId;
    private Generator<Boolean> error;
    private Generator<List<TagGenerator>> tags;

    @Override
    public SpanObject next() {
        return SpanObject.newBuilder().setSpanId(getSpanId().next().intValue()).setParentSpanId(getParentSpanId().next().intValue()).setStartTime(getStartTime().next()).setEndTime(getEndTime().next()).setOperationName(getOperationName().next()).setPeer(getPeer().next()).setSpanLayer(SpanLayer.forNumber(getSpanLayer().next().intValue())).setComponentId(getComponentId().next().intValue()).setIsError(getError().next()).addAllTags(getTags().next().stream().map(TagGenerator::next).map(it -> KeyStringValuePair.newBuilder().setKey(it.getKey()).setValue(it.getValue()).build()).collect(Collectors.toList())).build();
    }

    @Override
    public void reset() {
        spanId.reset();
        parentSpanId.reset();
        startTime.reset();
        endTime.reset();
        operationName.reset();
        peer.reset();
        spanLayer.reset();
        componentId.reset();
        error.reset();
        tags.reset();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getSpanId() {
        return this.spanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getParentSpanId() {
        return this.parentSpanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getStartTime() {
        return this.startTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getEndTime() {
        return this.endTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getOperationName() {
        return this.operationName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getPeer() {
        return this.peer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getSpanLayer() {
        return this.spanLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getComponentId() {
        return this.componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Boolean> getError() {
        return this.error;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<List<TagGenerator>> getTags() {
        return this.tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSpanId(final Generator<Long> spanId) {
        this.spanId = spanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setParentSpanId(final Generator<Long> parentSpanId) {
        this.parentSpanId = parentSpanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStartTime(final Generator<Long> startTime) {
        this.startTime = startTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndTime(final Generator<Long> endTime) {
        this.endTime = endTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setOperationName(final Generator<String> operationName) {
        this.operationName = operationName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPeer(final Generator<String> peer) {
        this.peer = peer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSpanLayer(final Generator<Long> spanLayer) {
        this.spanLayer = spanLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setComponentId(final Generator<Long> componentId) {
        this.componentId = componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setError(final Generator<Boolean> error) {
        this.error = error;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTags(final Generator<List<TagGenerator>> tags) {
        this.tags = tags;
    }
}
