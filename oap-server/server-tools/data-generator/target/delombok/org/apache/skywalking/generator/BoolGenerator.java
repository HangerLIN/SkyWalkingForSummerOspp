// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.generator;

import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

@JsonDeserialize(builder = BoolGenerator.Builder.class)
public final class BoolGenerator implements Generator<Boolean> {
    private final Random random = ThreadLocalRandom.current();
    private final double possibility;

    public BoolGenerator(Builder builder) {
        possibility = builder.possibility;
    }

    @Override
    public Boolean next() {
        return random.nextDouble() < possibility;
    }

    @Override
    public String toString() {
        return String.valueOf(next());
    }


    public static class Builder {
        private double possibility = 0.5;

        public BoolGenerator build() {
            return new BoolGenerator(this);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Builder() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public double getPossibility() {
            return this.possibility;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setPossibility(final double possibility) {
            this.possibility = possibility;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof BoolGenerator.Builder)) return false;
            final BoolGenerator.Builder other = (BoolGenerator.Builder) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (java.lang.Double.compare(this.getPossibility(), other.getPossibility()) != 0) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof BoolGenerator.Builder;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final long $possibility = java.lang.Double.doubleToLongBits(this.getPossibility());
            result = result * PRIME + (int) ($possibility >>> 32 ^ $possibility);
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "BoolGenerator.Builder(possibility=" + this.getPossibility() + ")";
        }
    }
}
