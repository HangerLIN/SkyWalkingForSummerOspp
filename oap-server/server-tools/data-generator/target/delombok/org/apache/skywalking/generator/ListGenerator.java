// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.generator;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

@JsonDeserialize(builder = ListGenerator.Builder.class)
public final class ListGenerator<T> implements Generator<List<T>> {
    private final T item;
    private final int size;

    public ListGenerator(Builder<T> builder) {
        item = builder.item;
        size = builder.size;
    }

    @Override
    public List<T> next() {
        return IntStream.range(0, size).mapToObj($ -> item).collect(Collectors.toList());
    }

    @Override
    public void reset() {
        ((Generator<?>) item).reset();
    }


    public static class Builder<T> {
        private int size;
        private T item;

        public ListGenerator<T> build() {
            return new ListGenerator<>(this);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Builder() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getSize() {
            return this.size;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public T getItem() {
            return this.item;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setSize(final int size) {
            this.size = size;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setItem(final T item) {
            this.item = item;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof ListGenerator.Builder)) return false;
            final ListGenerator.Builder<?> other = (ListGenerator.Builder<?>) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getSize() != other.getSize()) return false;
            final java.lang.Object this$item = this.getItem();
            final java.lang.Object other$item = other.getItem();
            if (this$item == null ? other$item != null : !this$item.equals(other$item)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof ListGenerator.Builder;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getSize();
            final java.lang.Object $item = this.getItem();
            result = result * PRIME + ($item == null ? 43 : $item.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ListGenerator.Builder(size=" + this.getSize() + ", item=" + this.getItem() + ")";
        }
    }
}
