// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.generator;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.common.base.Strings;
import org.apache.commons.lang3.RandomStringUtils;

@JsonDeserialize(builder = StringGenerator.Builder.class)
public final class StringGenerator implements Generator<String> {
    private final int length;
    private final String prefix;
    private final boolean letters;
    private final boolean numbers;
    private final boolean limitedDomain;
    private final Random random = ThreadLocalRandom.current();
    private final Set<String> domain = new HashSet<>();

    public StringGenerator(Builder builder) {
        length = builder.length;
        prefix = builder.prefix;
        letters = builder.letters;
        numbers = builder.numbers;
        limitedDomain = builder.domainSize > 0;
        if (limitedDomain) {
            while (domain.size() < builder.domainSize) {
                final String r = RandomStringUtils.random(length, letters, numbers);
                if (!Strings.isNullOrEmpty(builder.prefix)) {
                    domain.add(builder.prefix + r);
                } else {
                    domain.add(r);
                }
            }
        }
    }

    @Override
    public String next() {
        if (!limitedDomain) {
            return Strings.nullToEmpty(prefix) + RandomStringUtils.random(length, letters, numbers);
        }
        return domain.stream().skip(random.nextInt(domain.size())).findFirst().orElseThrow(() -> new RuntimeException("Should never happen"));
    }

    @Override
    public String toString() {
        return String.valueOf(next());
    }


    public static class Builder {
        private int length;
        private String prefix;
        private boolean letters;
        private boolean numbers;
        private int domainSize;

        public StringGenerator build() {
            return new StringGenerator(this);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Builder() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getLength() {
            return this.length;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getPrefix() {
            return this.prefix;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isLetters() {
            return this.letters;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isNumbers() {
            return this.numbers;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getDomainSize() {
            return this.domainSize;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setLength(final int length) {
            this.length = length;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setPrefix(final String prefix) {
            this.prefix = prefix;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setLetters(final boolean letters) {
            this.letters = letters;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setNumbers(final boolean numbers) {
            this.numbers = numbers;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setDomainSize(final int domainSize) {
            this.domainSize = domainSize;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof StringGenerator.Builder)) return false;
            final StringGenerator.Builder other = (StringGenerator.Builder) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getLength() != other.getLength()) return false;
            if (this.isLetters() != other.isLetters()) return false;
            if (this.isNumbers() != other.isNumbers()) return false;
            if (this.getDomainSize() != other.getDomainSize()) return false;
            final java.lang.Object this$prefix = this.getPrefix();
            final java.lang.Object other$prefix = other.getPrefix();
            if (this$prefix == null ? other$prefix != null : !this$prefix.equals(other$prefix)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof StringGenerator.Builder;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getLength();
            result = result * PRIME + (this.isLetters() ? 79 : 97);
            result = result * PRIME + (this.isNumbers() ? 79 : 97);
            result = result * PRIME + this.getDomainSize();
            final java.lang.Object $prefix = this.getPrefix();
            result = result * PRIME + ($prefix == null ? 43 : $prefix.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "StringGenerator.Builder(length=" + this.getLength() + ", prefix=" + this.getPrefix() + ", letters=" + this.isLetters() + ", numbers=" + this.isNumbers() + ", domainSize=" + this.getDomainSize() + ")";
        }
    }
}
