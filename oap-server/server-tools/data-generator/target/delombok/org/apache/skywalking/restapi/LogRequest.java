// Generated by delombok at Thu Apr 18 20:41:10 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.skywalking.restapi;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
import org.apache.skywalking.apm.network.logging.v3.LogTags;
import org.apache.skywalking.generator.Generator;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
import org.apache.skywalking.oap.server.core.query.type.ContentType;
import org.apache.skywalking.oap.server.core.source.Log;

@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)
public final class LogRequest implements Generator<Log> {
    @JsonIgnore
    private final ObjectMapper om = new ObjectMapper();
    private Generator<Long> timestamp;
    private Generator<String> serviceName;
    private Generator<String> serviceInstanceName;
    private Generator<String> endpointName;
    private Generator<String> traceId;
    private Generator<String> traceSegmentId;
    private Generator<Long> spanId;
    private Generator<Long> contentType;
    private Generator<String> content;
    private Generator<List<TagGenerator>> tags;
    private Generator<Boolean> error;

    @Override
    public Log next() {
        try {
            final Log log = new Log();
            log.setTimestamp(getTimestamp().next());
            log.setServiceId(IDManager.ServiceID.buildId(getServiceName().next(), true));
            log.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(log.getServiceId(), getServiceInstanceName().next()));
            log.setEndpointId(IDManager.EndpointID.buildId(log.getServiceId(), getEndpointName().next()));
            log.setTraceId(getTraceId().next());
            log.setTraceSegmentId(getTraceSegmentId().next());
            log.setSpanId(getSpanId().next().intValue());
            log.setContentType(ContentType.instanceOf(getContentType().next().intValue()));
            log.setContent(getContent().next());
            log.setError(getError().next());
            log.setTimeBucket(TimeBucket.getRecordTimeBucket(log.getTimestamp()));
            log.setTags(getTags().next().stream().map(TagGenerator::next).collect(Collectors.<Tag>toList()));
            log.setTagsRawData(LogTags.newBuilder().addAllData(log.getTags().stream().map(it -> KeyStringValuePair.newBuilder().setKey(it.getKey()).setValue(it.getValue()).build()).collect(Collectors.toList())).build().toByteArray());
            log.setUniqueId(UUID.randomUUID().toString());
            return log;
        } catch (final java.lang.Throwable $ex) {
            throw lombok.Lombok.sneakyThrow($ex);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public LogRequest() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ObjectMapper getOm() {
        return this.om;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getTimestamp() {
        return this.timestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getServiceInstanceName() {
        return this.serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getEndpointName() {
        return this.endpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getTraceId() {
        return this.traceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getTraceSegmentId() {
        return this.traceSegmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getSpanId() {
        return this.spanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Long> getContentType() {
        return this.contentType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<String> getContent() {
        return this.content;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<List<TagGenerator>> getTags() {
        return this.tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Generator<Boolean> getError() {
        return this.error;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimestamp(final Generator<Long> timestamp) {
        this.timestamp = timestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final Generator<String> serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceName(final Generator<String> serviceInstanceName) {
        this.serviceInstanceName = serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndpointName(final Generator<String> endpointName) {
        this.endpointName = endpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceId(final Generator<String> traceId) {
        this.traceId = traceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceSegmentId(final Generator<String> traceSegmentId) {
        this.traceSegmentId = traceSegmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSpanId(final Generator<Long> spanId) {
        this.spanId = spanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setContentType(final Generator<Long> contentType) {
        this.contentType = contentType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setContent(final Generator<String> content) {
        this.content = content;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTags(final Generator<List<TagGenerator>> tags) {
        this.tags = tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setError(final Generator<Boolean> error) {
        this.error = error;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof LogRequest)) return false;
        final LogRequest other = (LogRequest) o;
        final java.lang.Object this$om = this.getOm();
        final java.lang.Object other$om = other.getOm();
        if (this$om == null ? other$om != null : !this$om.equals(other$om)) return false;
        final java.lang.Object this$timestamp = this.getTimestamp();
        final java.lang.Object other$timestamp = other.getTimestamp();
        if (this$timestamp == null ? other$timestamp != null : !this$timestamp.equals(other$timestamp)) return false;
        final java.lang.Object this$serviceName = this.getServiceName();
        final java.lang.Object other$serviceName = other.getServiceName();
        if (this$serviceName == null ? other$serviceName != null : !this$serviceName.equals(other$serviceName)) return false;
        final java.lang.Object this$serviceInstanceName = this.getServiceInstanceName();
        final java.lang.Object other$serviceInstanceName = other.getServiceInstanceName();
        if (this$serviceInstanceName == null ? other$serviceInstanceName != null : !this$serviceInstanceName.equals(other$serviceInstanceName)) return false;
        final java.lang.Object this$endpointName = this.getEndpointName();
        final java.lang.Object other$endpointName = other.getEndpointName();
        if (this$endpointName == null ? other$endpointName != null : !this$endpointName.equals(other$endpointName)) return false;
        final java.lang.Object this$traceId = this.getTraceId();
        final java.lang.Object other$traceId = other.getTraceId();
        if (this$traceId == null ? other$traceId != null : !this$traceId.equals(other$traceId)) return false;
        final java.lang.Object this$traceSegmentId = this.getTraceSegmentId();
        final java.lang.Object other$traceSegmentId = other.getTraceSegmentId();
        if (this$traceSegmentId == null ? other$traceSegmentId != null : !this$traceSegmentId.equals(other$traceSegmentId)) return false;
        final java.lang.Object this$spanId = this.getSpanId();
        final java.lang.Object other$spanId = other.getSpanId();
        if (this$spanId == null ? other$spanId != null : !this$spanId.equals(other$spanId)) return false;
        final java.lang.Object this$contentType = this.getContentType();
        final java.lang.Object other$contentType = other.getContentType();
        if (this$contentType == null ? other$contentType != null : !this$contentType.equals(other$contentType)) return false;
        final java.lang.Object this$content = this.getContent();
        final java.lang.Object other$content = other.getContent();
        if (this$content == null ? other$content != null : !this$content.equals(other$content)) return false;
        final java.lang.Object this$tags = this.getTags();
        final java.lang.Object other$tags = other.getTags();
        if (this$tags == null ? other$tags != null : !this$tags.equals(other$tags)) return false;
        final java.lang.Object this$error = this.getError();
        final java.lang.Object other$error = other.getError();
        if (this$error == null ? other$error != null : !this$error.equals(other$error)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $om = this.getOm();
        result = result * PRIME + ($om == null ? 43 : $om.hashCode());
        final java.lang.Object $timestamp = this.getTimestamp();
        result = result * PRIME + ($timestamp == null ? 43 : $timestamp.hashCode());
        final java.lang.Object $serviceName = this.getServiceName();
        result = result * PRIME + ($serviceName == null ? 43 : $serviceName.hashCode());
        final java.lang.Object $serviceInstanceName = this.getServiceInstanceName();
        result = result * PRIME + ($serviceInstanceName == null ? 43 : $serviceInstanceName.hashCode());
        final java.lang.Object $endpointName = this.getEndpointName();
        result = result * PRIME + ($endpointName == null ? 43 : $endpointName.hashCode());
        final java.lang.Object $traceId = this.getTraceId();
        result = result * PRIME + ($traceId == null ? 43 : $traceId.hashCode());
        final java.lang.Object $traceSegmentId = this.getTraceSegmentId();
        result = result * PRIME + ($traceSegmentId == null ? 43 : $traceSegmentId.hashCode());
        final java.lang.Object $spanId = this.getSpanId();
        result = result * PRIME + ($spanId == null ? 43 : $spanId.hashCode());
        final java.lang.Object $contentType = this.getContentType();
        result = result * PRIME + ($contentType == null ? 43 : $contentType.hashCode());
        final java.lang.Object $content = this.getContent();
        result = result * PRIME + ($content == null ? 43 : $content.hashCode());
        final java.lang.Object $tags = this.getTags();
        result = result * PRIME + ($tags == null ? 43 : $tags.hashCode());
        final java.lang.Object $error = this.getError();
        result = result * PRIME + ($error == null ? 43 : $error.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "LogRequest(om=" + this.getOm() + ", timestamp=" + this.getTimestamp() + ", serviceName=" + this.getServiceName() + ", serviceInstanceName=" + this.getServiceInstanceName() + ", endpointName=" + this.getEndpointName() + ", traceId=" + this.getTraceId() + ", traceSegmentId=" + this.getTraceSegmentId() + ", spanId=" + this.getSpanId() + ", contentType=" + this.getContentType() + ", content=" + this.getContent() + ", tags=" + this.getTags() + ", error=" + this.getError() + ")";
    }
}
