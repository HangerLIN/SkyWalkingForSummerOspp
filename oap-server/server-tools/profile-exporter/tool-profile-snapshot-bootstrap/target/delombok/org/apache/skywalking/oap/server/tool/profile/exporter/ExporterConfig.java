// Generated by delombok at Thu Apr 18 20:41:09 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.tool.profile.exporter;

import java.io.File;

public class ExporterConfig {
    // profile task id
    private String taskId;
    // profiled trace id
    private String traceId;
    // export to file path
    private String analyzeResultDist;

    /**
     * parse config from command line
     */
    public static ExporterConfig parse(String[] args) {
        if (args == null || args.length != 3) {
            throw new IllegalArgumentException("missing config, please recheck");
        }
        // build config
        ExporterConfig config = new ExporterConfig();
        config.setTaskId(args[0]);
        config.setTraceId(args[1]);
        config.setAnalyzeResultDist(args[2]);
        return config;
    }

    /**
     * initialize config, such as check dist path
     */
    public void init() {
        File dist = new File(analyzeResultDist);
        if (!dist.exists()) {
            dist.mkdirs();
            return;
        }
        if (dist.isFile()) {
            throw new IllegalArgumentException(analyzeResultDist + " must be a directory");
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ExporterConfig() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTaskId() {
        return this.taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTraceId() {
        return this.traceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getAnalyzeResultDist() {
        return this.analyzeResultDist;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaskId(final String taskId) {
        this.taskId = taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceId(final String traceId) {
        this.traceId = traceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAnalyzeResultDist(final String analyzeResultDist) {
        this.analyzeResultDist = analyzeResultDist;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ExporterConfig)) return false;
        final ExporterConfig other = (ExporterConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$taskId = this.getTaskId();
        final java.lang.Object other$taskId = other.getTaskId();
        if (this$taskId == null ? other$taskId != null : !this$taskId.equals(other$taskId)) return false;
        final java.lang.Object this$traceId = this.getTraceId();
        final java.lang.Object other$traceId = other.getTraceId();
        if (this$traceId == null ? other$traceId != null : !this$traceId.equals(other$traceId)) return false;
        final java.lang.Object this$analyzeResultDist = this.getAnalyzeResultDist();
        final java.lang.Object other$analyzeResultDist = other.getAnalyzeResultDist();
        if (this$analyzeResultDist == null ? other$analyzeResultDist != null : !this$analyzeResultDist.equals(other$analyzeResultDist)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ExporterConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $taskId = this.getTaskId();
        result = result * PRIME + ($taskId == null ? 43 : $taskId.hashCode());
        final java.lang.Object $traceId = this.getTraceId();
        result = result * PRIME + ($traceId == null ? 43 : $traceId.hashCode());
        final java.lang.Object $analyzeResultDist = this.getAnalyzeResultDist();
        result = result * PRIME + ($analyzeResultDist == null ? 43 : $analyzeResultDist.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ExporterConfig(taskId=" + this.getTaskId() + ", traceId=" + this.getTraceId() + ", analyzeResultDist=" + this.getAnalyzeResultDist() + ")";
    }
}
