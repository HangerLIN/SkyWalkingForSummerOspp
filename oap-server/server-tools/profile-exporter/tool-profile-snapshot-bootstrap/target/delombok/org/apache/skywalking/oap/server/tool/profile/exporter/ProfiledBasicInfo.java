// Generated by delombok at Thu Apr 18 20:41:09 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.tool.profile.exporter;

import org.apache.commons.io.FileUtils;
import org.apache.skywalking.oap.server.core.CoreModule;
import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
import org.apache.skywalking.oap.server.core.profiling.trace.ProfileTaskQueryService;
import org.apache.skywalking.oap.server.core.query.TraceQueryService;
import org.apache.skywalking.oap.server.core.query.type.Span;
import org.apache.skywalking.oap.server.core.query.type.Trace;
import org.apache.skywalking.oap.server.core.storage.StorageModule;
import org.apache.skywalking.oap.server.core.storage.profiling.trace.IProfileThreadSnapshotQueryDAO;
import org.apache.skywalking.oap.server.library.module.ModuleManager;
import org.apache.skywalking.oap.server.library.util.CollectionUtils;
import org.yaml.snakeyaml.Yaml;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class ProfiledBasicInfo {
    public static final int SEQUENCE_RANGE_BATCH_SIZE = 500;
    private ExporterConfig config;
    // profiled segment
    private List<ProfiledSegment> segments;
    // spans
    private List<Span> profiledSegmentSpans;

    /**
     * reading data from storage and build data
     */
    public static ProfiledBasicInfo build(ExporterConfig config, ModuleManager manager) throws IOException {
        ProfiledBasicInfo data = new ProfiledBasicInfo();
        data.setConfig(config);
        ProfileTaskQueryService taskQueryService = manager.find(CoreModule.NAME).provider().getService(ProfileTaskQueryService.class);
        TraceQueryService traceQueryService = manager.find(CoreModule.NAME).provider().getService(TraceQueryService.class);
        IProfileThreadSnapshotQueryDAO threadSnapshotQueryDAO = manager.find(StorageModule.NAME).provider().getService(IProfileThreadSnapshotQueryDAO.class);
        // query and found profiled segment
        List<SegmentRecord> taskTraces = taskQueryService.getTaskSegments(config.getTaskId());
        List<SegmentRecord> segments = taskTraces.stream().filter(t -> Objects.equals(t.getTraceId(), config.getTraceId())).collect(Collectors.toList());
        if (CollectionUtils.isEmpty(segments)) {
            throw new IllegalArgumentException("Cannot fount profiled segment in current task: " + config.getTaskId() + ", segment id: " + config.getTraceId() + ", current task total profiled trace count is " + taskTraces.size());
        }
        // setting segment basic info
        data.setSegments(new ArrayList<>());
        data.setProfiledSegmentSpans(new ArrayList<>());
        for (SegmentRecord segment : segments) {
            final ProfiledSegment profiledSegment = new ProfiledSegment();
            String segmentId = segment.getSegmentId();
            long startTime = segment.getStartTime();
            long endTime = startTime + segment.getLatency();
            profiledSegment.setSegmentId(segmentId);
            profiledSegment.setSegmentStartTime(startTime);
            profiledSegment.setSegmentEndTime(endTime);
            profiledSegment.setDuration(segment.getLatency());
            // query spans
            Trace trace = traceQueryService.queryTrace(config.getTraceId());
            List<Span> profiledSegmentSpans = trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(), segmentId)).collect(Collectors.toList());
            if (CollectionUtils.isEmpty(profiledSegmentSpans)) {
                throw new IllegalArgumentException("Current segment cannot found any span");
            }
            data.getProfiledSegmentSpans().addAll(profiledSegmentSpans);
            // query snapshots sequences
            int minSequence = threadSnapshotQueryDAO.queryMinSequence(segmentId, startTime, endTime);
            int maxSequence = threadSnapshotQueryDAO.queryMaxSequence(segmentId, startTime, endTime);
            profiledSegment.setMinSequence(minSequence);
            profiledSegment.setMaxSequence(maxSequence);
            data.getSegments().add(profiledSegment);
        }
        return data;
    }

    /**
     * serialize data to file
     */
    public File writeFile() throws IOException {
        String serialData = new Yaml().dump(this);
        File file = new File(config.getAnalyzeResultDist() + File.separator + "basic.yml");
        FileUtils.write(file, serialData, "UTF-8");
        return file;
    }

    /**
     * deserialize data from file
     */
    public static ProfiledBasicInfo parseFormFile(File file) throws IOException {
        try (FileInputStream fileInputStream = new FileInputStream(file)) {
            return new Yaml().loadAs(fileInputStream, ProfiledBasicInfo.class);
        }
    }

    /**
     * build current profiles segment snapshot search sequence ranges
     */
    public List<SequenceRange> buildSequenceRanges() {
        ArrayList<SequenceRange> ranges = new ArrayList<>();
        for (ProfiledSegment segment : this.segments) {
            int minSequence = segment.minSequence;
            do {
                int batchMax = Math.min(minSequence + SEQUENCE_RANGE_BATCH_SIZE, segment.maxSequence);
                ranges.add(new SequenceRange(segment.getSegmentId(), minSequence, batchMax));
                minSequence = batchMax;
            } while (minSequence < segment.maxSequence);
        }
        return ranges;
    }


    public static class SequenceRange {
        private String segmentId;
        private int min;
        private int max;

        public SequenceRange(String segmentId, int min, int max) {
            this.segmentId = segmentId;
            this.min = min;
            this.max = max;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getSegmentId() {
            return this.segmentId;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getMin() {
            return this.min;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getMax() {
            return this.max;
        }
    }


    public static class ProfiledSegment {
        private String segmentId;
        private long segmentStartTime;
        private long segmentEndTime;
        private int duration;
        // snapshot sequence
        private int minSequence;
        private int maxSequence;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ProfiledSegment() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getSegmentId() {
            return this.segmentId;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getSegmentStartTime() {
            return this.segmentStartTime;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getSegmentEndTime() {
            return this.segmentEndTime;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getDuration() {
            return this.duration;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getMinSequence() {
            return this.minSequence;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getMaxSequence() {
            return this.maxSequence;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setSegmentId(final String segmentId) {
            this.segmentId = segmentId;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setSegmentStartTime(final long segmentStartTime) {
            this.segmentStartTime = segmentStartTime;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setSegmentEndTime(final long segmentEndTime) {
            this.segmentEndTime = segmentEndTime;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setDuration(final int duration) {
            this.duration = duration;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setMinSequence(final int minSequence) {
            this.minSequence = minSequence;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setMaxSequence(final int maxSequence) {
            this.maxSequence = maxSequence;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof ProfiledBasicInfo.ProfiledSegment)) return false;
            final ProfiledBasicInfo.ProfiledSegment other = (ProfiledBasicInfo.ProfiledSegment) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getSegmentStartTime() != other.getSegmentStartTime()) return false;
            if (this.getSegmentEndTime() != other.getSegmentEndTime()) return false;
            if (this.getDuration() != other.getDuration()) return false;
            if (this.getMinSequence() != other.getMinSequence()) return false;
            if (this.getMaxSequence() != other.getMaxSequence()) return false;
            final java.lang.Object this$segmentId = this.getSegmentId();
            final java.lang.Object other$segmentId = other.getSegmentId();
            if (this$segmentId == null ? other$segmentId != null : !this$segmentId.equals(other$segmentId)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof ProfiledBasicInfo.ProfiledSegment;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final long $segmentStartTime = this.getSegmentStartTime();
            result = result * PRIME + (int) ($segmentStartTime >>> 32 ^ $segmentStartTime);
            final long $segmentEndTime = this.getSegmentEndTime();
            result = result * PRIME + (int) ($segmentEndTime >>> 32 ^ $segmentEndTime);
            result = result * PRIME + this.getDuration();
            result = result * PRIME + this.getMinSequence();
            result = result * PRIME + this.getMaxSequence();
            final java.lang.Object $segmentId = this.getSegmentId();
            result = result * PRIME + ($segmentId == null ? 43 : $segmentId.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ProfiledBasicInfo.ProfiledSegment(segmentId=" + this.getSegmentId() + ", segmentStartTime=" + this.getSegmentStartTime() + ", segmentEndTime=" + this.getSegmentEndTime() + ", duration=" + this.getDuration() + ", minSequence=" + this.getMinSequence() + ", maxSequence=" + this.getMaxSequence() + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ProfiledBasicInfo() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ExporterConfig getConfig() {
        return this.config;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ProfiledSegment> getSegments() {
        return this.segments;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Span> getProfiledSegmentSpans() {
        return this.profiledSegmentSpans;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setConfig(final ExporterConfig config) {
        this.config = config;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSegments(final List<ProfiledSegment> segments) {
        this.segments = segments;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProfiledSegmentSpans(final List<Span> profiledSegmentSpans) {
        this.profiledSegmentSpans = profiledSegmentSpans;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ProfiledBasicInfo)) return false;
        final ProfiledBasicInfo other = (ProfiledBasicInfo) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$config = this.getConfig();
        final java.lang.Object other$config = other.getConfig();
        if (this$config == null ? other$config != null : !this$config.equals(other$config)) return false;
        final java.lang.Object this$segments = this.getSegments();
        final java.lang.Object other$segments = other.getSegments();
        if (this$segments == null ? other$segments != null : !this$segments.equals(other$segments)) return false;
        final java.lang.Object this$profiledSegmentSpans = this.getProfiledSegmentSpans();
        final java.lang.Object other$profiledSegmentSpans = other.getProfiledSegmentSpans();
        if (this$profiledSegmentSpans == null ? other$profiledSegmentSpans != null : !this$profiledSegmentSpans.equals(other$profiledSegmentSpans)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ProfiledBasicInfo;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $config = this.getConfig();
        result = result * PRIME + ($config == null ? 43 : $config.hashCode());
        final java.lang.Object $segments = this.getSegments();
        result = result * PRIME + ($segments == null ? 43 : $segments.hashCode());
        final java.lang.Object $profiledSegmentSpans = this.getProfiledSegmentSpans();
        result = result * PRIME + ($profiledSegmentSpans == null ? 43 : $profiledSegmentSpans.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ProfiledBasicInfo(config=" + this.getConfig() + ", segments=" + this.getSegments() + ", profiledSegmentSpans=" + this.getProfiledSegmentSpans() + ")";
    }
}
