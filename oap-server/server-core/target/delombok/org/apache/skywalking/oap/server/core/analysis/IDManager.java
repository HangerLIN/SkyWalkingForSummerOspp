// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.analysis;

import com.google.common.base.Charsets;
import com.google.common.hash.Hashing;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import org.apache.skywalking.oap.server.core.Const;
import org.apache.skywalking.oap.server.core.UnexpectedException;
import org.apache.skywalking.oap.server.library.util.BooleanUtils;
import org.apache.skywalking.oap.server.library.util.StringUtil;

/**
 * IDManager includes all ID encode/decode functions for service, service instance and endpoint.
 */
public class IDManager {

    /**
     * Service ID related functions.
     */
    public static class ServiceID {
        /**
         * @param name     service name
         * @param isNormal `true` represents this service is detected by an agent. `false` represents this service is
         *                 conjectured by telemetry data collected from agents on/in the `normal` service.
         */
        public static String buildId(String name, boolean isNormal) {
            if (StringUtil.isBlank(name)) {
                name = Const.BLANK_ENTITY_NAME;
            }
            return encode(name) + Const.SERVICE_ID_CONNECTOR + BooleanUtils.booleanToValue(isNormal);
        }

        /**
         * @return service ID object decoded from {@link #buildId(String, boolean)} result
         */
        public static ServiceIDDefinition analysisId(String id) {
            final String[] strings = id.split(Const.SERVICE_ID_PARSER_SPLIT);
            if (strings.length != 2) {
                throw new UnexpectedException("Can\'t split service id into 2 parts, " + id);
            }
            return new ServiceID.ServiceIDDefinition(decode(strings[0]), BooleanUtils.valueToBoolean(Integer.parseInt(strings[1])));
        }

        /**
         * @return encoded service relation id
         */
        public static String buildRelationId(ServiceRelationDefine define) {
            return define.sourceId + Const.RELATION_ID_CONNECTOR + define.destId;
        }

        /**
         * @return service relation ID object decoded from {@link #buildRelationId(ServiceRelationDefine)} result
         */
        public static ServiceRelationDefine analysisRelationId(String entityId) {
            String[] parts = entityId.split(Const.RELATION_ID_PARSER_SPLIT);
            if (parts.length != 2) {
                throw new RuntimeException("Illegal Service Relation entity id");
            }
            return new ServiceRelationDefine(parts[0], parts[1]);
        }


        public static class ServiceIDDefinition {
            private final String name;
            /**
             * TRUE means an agent installed or directly detected service. FALSE means a conjectural service
             */
            private final boolean isReal;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ServiceIDDefinition(final String name, final boolean isReal) {
                this.name = name;
                this.isReal = isReal;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getName() {
                return this.name;
            }

            /**
             * TRUE means an agent installed or directly detected service. FALSE means a conjectural service
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean isReal() {
                return this.isReal;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean equals(final java.lang.Object o) {
                if (o == this) return true;
                if (!(o instanceof IDManager.ServiceID.ServiceIDDefinition)) return false;
                final IDManager.ServiceID.ServiceIDDefinition other = (IDManager.ServiceID.ServiceIDDefinition) o;
                if (!other.canEqual((java.lang.Object) this)) return false;
                if (this.isReal() != other.isReal()) return false;
                final java.lang.Object this$name = this.getName();
                final java.lang.Object other$name = other.getName();
                if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
                return true;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            protected boolean canEqual(final java.lang.Object other) {
                return other instanceof IDManager.ServiceID.ServiceIDDefinition;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public int hashCode() {
                final int PRIME = 59;
                int result = 1;
                result = result * PRIME + (this.isReal() ? 79 : 97);
                final java.lang.Object $name = this.getName();
                result = result * PRIME + ($name == null ? 43 : $name.hashCode());
                return result;
            }
        }


        public static class ServiceRelationDefine {
            private final String sourceId;
            private final String destId;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ServiceRelationDefine(final String sourceId, final String destId) {
                this.sourceId = sourceId;
                this.destId = destId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getSourceId() {
                return this.sourceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getDestId() {
                return this.destId;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean equals(final java.lang.Object o) {
                if (o == this) return true;
                if (!(o instanceof IDManager.ServiceID.ServiceRelationDefine)) return false;
                final IDManager.ServiceID.ServiceRelationDefine other = (IDManager.ServiceID.ServiceRelationDefine) o;
                if (!other.canEqual((java.lang.Object) this)) return false;
                final java.lang.Object this$sourceId = this.getSourceId();
                final java.lang.Object other$sourceId = other.getSourceId();
                if (this$sourceId == null ? other$sourceId != null : !this$sourceId.equals(other$sourceId)) return false;
                final java.lang.Object this$destId = this.getDestId();
                final java.lang.Object other$destId = other.getDestId();
                if (this$destId == null ? other$destId != null : !this$destId.equals(other$destId)) return false;
                return true;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            protected boolean canEqual(final java.lang.Object other) {
                return other instanceof IDManager.ServiceID.ServiceRelationDefine;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public int hashCode() {
                final int PRIME = 59;
                int result = 1;
                final java.lang.Object $sourceId = this.getSourceId();
                result = result * PRIME + ($sourceId == null ? 43 : $sourceId.hashCode());
                final java.lang.Object $destId = this.getDestId();
                result = result * PRIME + ($destId == null ? 43 : $destId.hashCode());
                return result;
            }
        }
    }


    /**
     * Service Instance ID related functions.
     */
    public static class ServiceInstanceID {
        /**
         * @param serviceId built by {@link ServiceID#buildId(String, boolean)}
         * @return service instance id
         */
        public static String buildId(String serviceId, String instanceName) {
            if (StringUtil.isBlank(instanceName)) {
                instanceName = Const.BLANK_ENTITY_NAME;
            }
            return serviceId + Const.ID_CONNECTOR + encode(instanceName);
        }

        /**
         * @return service instance id object decoded from {@link #buildId(String, String)} result
         */
        public static ServiceInstanceID.InstanceIDDefinition analysisId(String id) {
            final String[] strings = id.split(Const.ID_PARSER_SPLIT);
            if (strings.length != 2) {
                throw new UnexpectedException("Can\'t split instance id into 2 parts, " + id);
            }
            return new ServiceInstanceID.InstanceIDDefinition(strings[0], decode(strings[1]));
        }

        /**
         * @return encoded service instance relation id
         */
        public static String buildRelationId(ServiceInstanceRelationDefine define) {
            return define.sourceId + Const.RELATION_ID_CONNECTOR + define.destId;
        }

        /**
         * @return service instance relation ID object decoded from {@link #buildRelationId(ServiceInstanceRelationDefine)}
         * result
         */
        public static ServiceInstanceID.ServiceInstanceRelationDefine analysisRelationId(String entityId) {
            String[] parts = entityId.split(Const.RELATION_ID_PARSER_SPLIT);
            if (parts.length != 2) {
                throw new RuntimeException("Illegal Service Instance Relation entity id");
            }
            return new ServiceInstanceID.ServiceInstanceRelationDefine(parts[0], parts[1]);
        }


        public static class InstanceIDDefinition {
            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            private final String serviceId;
            private final String name;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public InstanceIDDefinition(final String serviceId, final String name) {
                this.serviceId = serviceId;
                this.name = name;
            }

            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getServiceId() {
                return this.serviceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getName() {
                return this.name;
            }
        }


        public static class ServiceInstanceRelationDefine {
            /**
             * Built by {@link ServiceInstanceID#buildId(String, String)}
             */
            private final String sourceId;
            /**
             * Built by {@link ServiceInstanceID#buildId(String, String)}
             */
            private final String destId;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ServiceInstanceRelationDefine(final String sourceId, final String destId) {
                this.sourceId = sourceId;
                this.destId = destId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getSourceId() {
                return this.sourceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getDestId() {
                return this.destId;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean equals(final java.lang.Object o) {
                if (o == this) return true;
                if (!(o instanceof IDManager.ServiceInstanceID.ServiceInstanceRelationDefine)) return false;
                final IDManager.ServiceInstanceID.ServiceInstanceRelationDefine other = (IDManager.ServiceInstanceID.ServiceInstanceRelationDefine) o;
                if (!other.canEqual((java.lang.Object) this)) return false;
                final java.lang.Object this$sourceId = this.getSourceId();
                final java.lang.Object other$sourceId = other.getSourceId();
                if (this$sourceId == null ? other$sourceId != null : !this$sourceId.equals(other$sourceId)) return false;
                final java.lang.Object this$destId = this.getDestId();
                final java.lang.Object other$destId = other.getDestId();
                if (this$destId == null ? other$destId != null : !this$destId.equals(other$destId)) return false;
                return true;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            protected boolean canEqual(final java.lang.Object other) {
                return other instanceof IDManager.ServiceInstanceID.ServiceInstanceRelationDefine;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public int hashCode() {
                final int PRIME = 59;
                int result = 1;
                final java.lang.Object $sourceId = this.getSourceId();
                result = result * PRIME + ($sourceId == null ? 43 : $sourceId.hashCode());
                final java.lang.Object $destId = this.getDestId();
                result = result * PRIME + ($destId == null ? 43 : $destId.hashCode());
                return result;
            }
        }
    }


    /**
     * Endpoint ID related functions.
     */
    public static class EndpointID {
        /**
         * @param serviceId built by {@link ServiceID#buildId(String, boolean)}
         * @return endpoint id
         */
        public static String buildId(String serviceId, String endpointName) {
            if (StringUtil.isBlank(endpointName)) {
                endpointName = Const.BLANK_ENTITY_NAME;
            }
            return serviceId + Const.ID_CONNECTOR + encode(endpointName);
        }

        /**
         * @return Endpoint id object decoded from {@link #buildId(String, String)} result.
         */
        public static EndpointIDDefinition analysisId(String id) {
            final String[] strings = id.split(Const.ID_PARSER_SPLIT);
            if (strings.length != 2) {
                throw new UnexpectedException("Can\'t split endpoint id into 2 parts, " + id);
            }
            return new EndpointIDDefinition(strings[0], decode(strings[1]));
        }

        /**
         * @return the endpoint relationship string id.
         */
        public static String buildRelationId(EndpointRelationDefine define) {
            return define.sourceServiceId + Const.RELATION_ID_CONNECTOR + encode(define.source) + Const.RELATION_ID_CONNECTOR + define.destServiceId + Const.RELATION_ID_CONNECTOR + encode(define.dest);
        }

        /**
         * @return endpoint relation ID object decoded from {@link #buildRelationId(EndpointRelationDefine)} result
         */
        public static EndpointRelationDefine analysisRelationId(String entityId) {
            String[] parts = entityId.split(Const.RELATION_ID_PARSER_SPLIT);
            if (parts.length != 4) {
                throw new UnexpectedException("Illegal endpoint Relation entity id, " + entityId);
            }
            return new EndpointRelationDefine(parts[0], decode(parts[1]), parts[2], decode(parts[3]));
        }


        public static class EndpointIDDefinition {
            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            private final String serviceId;
            private final String endpointName;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public EndpointIDDefinition(final String serviceId, final String endpointName) {
                this.serviceId = serviceId;
                this.endpointName = endpointName;
            }

            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getServiceId() {
                return this.serviceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getEndpointName() {
                return this.endpointName;
            }
        }


        public static class EndpointRelationDefine {
            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            private final String sourceServiceId;
            private final String source;
            /**
             * Built by {@link ServiceID#buildId(String, boolean)}
             */
            private final String destServiceId;
            private final String dest;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public EndpointRelationDefine(final String sourceServiceId, final String source, final String destServiceId, final String dest) {
                this.sourceServiceId = sourceServiceId;
                this.source = source;
                this.destServiceId = destServiceId;
                this.dest = dest;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getSourceServiceId() {
                return this.sourceServiceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getSource() {
                return this.source;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getDestServiceId() {
                return this.destServiceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getDest() {
                return this.dest;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean equals(final java.lang.Object o) {
                if (o == this) return true;
                if (!(o instanceof IDManager.EndpointID.EndpointRelationDefine)) return false;
                final IDManager.EndpointID.EndpointRelationDefine other = (IDManager.EndpointID.EndpointRelationDefine) o;
                if (!other.canEqual((java.lang.Object) this)) return false;
                final java.lang.Object this$sourceServiceId = this.getSourceServiceId();
                final java.lang.Object other$sourceServiceId = other.getSourceServiceId();
                if (this$sourceServiceId == null ? other$sourceServiceId != null : !this$sourceServiceId.equals(other$sourceServiceId)) return false;
                final java.lang.Object this$source = this.getSource();
                final java.lang.Object other$source = other.getSource();
                if (this$source == null ? other$source != null : !this$source.equals(other$source)) return false;
                final java.lang.Object this$destServiceId = this.getDestServiceId();
                final java.lang.Object other$destServiceId = other.getDestServiceId();
                if (this$destServiceId == null ? other$destServiceId != null : !this$destServiceId.equals(other$destServiceId)) return false;
                final java.lang.Object this$dest = this.getDest();
                final java.lang.Object other$dest = other.getDest();
                if (this$dest == null ? other$dest != null : !this$dest.equals(other$dest)) return false;
                return true;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            protected boolean canEqual(final java.lang.Object other) {
                return other instanceof IDManager.EndpointID.EndpointRelationDefine;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public int hashCode() {
                final int PRIME = 59;
                int result = 1;
                final java.lang.Object $sourceServiceId = this.getSourceServiceId();
                result = result * PRIME + ($sourceServiceId == null ? 43 : $sourceServiceId.hashCode());
                final java.lang.Object $source = this.getSource();
                result = result * PRIME + ($source == null ? 43 : $source.hashCode());
                final java.lang.Object $destServiceId = this.getDestServiceId();
                result = result * PRIME + ($destServiceId == null ? 43 : $destServiceId.hashCode());
                final java.lang.Object $dest = this.getDest();
                result = result * PRIME + ($dest == null ? 43 : $dest.hashCode());
                return result;
            }
        }
    }


    /**
     * Process ID related functions.
     */
    public static class ProcessID {
        /**
         * @param instanceId built by {@link ServiceInstanceID#buildId(String, String)}
         * @param name       process name
         * @return process id
         */
        public static String buildId(String instanceId, String name) {
            if (StringUtil.isBlank(name)) {
                name = Const.BLANK_ENTITY_NAME;
            }
            return Hashing.sha256().newHasher().putString(String.format("%s_%s", name, instanceId), Charsets.UTF_8).hash().toString();
        }

        /**
         * @return encoded process relation id
         */
        public static String buildRelationId(ProcessRelationDefine define) {
            return define.sourceId + Const.RELATION_ID_CONNECTOR + define.destId;
        }

        /**
         * @return process relation ID object decoded from {@link #buildRelationId(ProcessRelationDefine)} result
         */
        public static ProcessRelationDefine analysisRelationId(String entityId) {
            String[] parts = entityId.split(Const.RELATION_ID_PARSER_SPLIT);
            if (parts.length != 2) {
                throw new RuntimeException("Illegal Process Relation entity id");
            }
            return new ProcessRelationDefine(parts[0], parts[1]);
        }


        public static class ProcessRelationDefine {
            private final String sourceId;
            private final String destId;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ProcessRelationDefine(final String sourceId, final String destId) {
                this.sourceId = sourceId;
                this.destId = destId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getSourceId() {
                return this.sourceId;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public String getDestId() {
                return this.destId;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public boolean equals(final java.lang.Object o) {
                if (o == this) return true;
                if (!(o instanceof IDManager.ProcessID.ProcessRelationDefine)) return false;
                final IDManager.ProcessID.ProcessRelationDefine other = (IDManager.ProcessID.ProcessRelationDefine) o;
                if (!other.canEqual((java.lang.Object) this)) return false;
                final java.lang.Object this$sourceId = this.getSourceId();
                final java.lang.Object other$sourceId = other.getSourceId();
                if (this$sourceId == null ? other$sourceId != null : !this$sourceId.equals(other$sourceId)) return false;
                final java.lang.Object this$destId = this.getDestId();
                final java.lang.Object other$destId = other.getDestId();
                if (this$destId == null ? other$destId != null : !this$destId.equals(other$destId)) return false;
                return true;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            protected boolean canEqual(final java.lang.Object other) {
                return other instanceof IDManager.ProcessID.ProcessRelationDefine;
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public int hashCode() {
                final int PRIME = 59;
                int result = 1;
                final java.lang.Object $sourceId = this.getSourceId();
                result = result * PRIME + ($sourceId == null ? 43 : $sourceId.hashCode());
                final java.lang.Object $destId = this.getDestId();
                result = result * PRIME + ($destId == null ? 43 : $destId.hashCode());
                return result;
            }
        }
    }


    /**
     * Network Address Alias ID related functions.
     */
    public static class NetworkAddressAliasDefine {
        /**
         * @return encoded network address id
         */
        public static String buildId(String name) {
            return encode(name);
        }

        /**
         * @return network address id object decoded from {@link #buildId(String)} result
         */
        public static String analysisId(String id) {
            return decode(id);
        }
    }

    /**
     * @param text normal literal string
     * @return Base64 encoded UTF-8 string
     */
    private static String encode(String text) {
        return new String(Base64.getEncoder().encode(text.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    }

    /**
     * @param base64text Base64 encoded UTF-8 string
     * @return normal literal string
     */
    private static String decode(String base64text) {
        return new String(Base64.getDecoder().decode(base64text), StandardCharsets.UTF_8);
    }
}
