// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.storage.model;

import org.apache.skywalking.oap.server.core.analysis.record.Record;
import java.util.List;

/**
 * BanyanDBExtension represents extra metadata for models, but specific for BanyanDB usages.
 *
 * @since 9.3.0
 */
public class BanyanDBModelExtension {
    /**
     * timestampColumn is to identify which column in {@link Record} is providing the timestamp(millisecond) for BanyanDB.
     * BanyanDB stream requires a timestamp in milliseconds
     *
     * @since 9.3.0
     */
    private String timestampColumn;
    /**
     * storeIDTag indicates whether a metric stores its ID as a tag.
     * The installer will create a virtual string ID tag with a tree index rule.
     */
    private boolean storeIDTag;
    private TopN topN;


    public static class TopN {
        /**
         * lru_size defines how many time_buckets are held in the memory.
         * For example, "2" means data points belonging to the latest "2" time_buckets will be persisted.
         * The default value is 2 in the BanyanDB if not set.
         *
         * @since 9.4.0
         */
        private int lruSize;
        /**
         * counters_number defines the max number of entries to be tracked during the pre-aggregation.
         * The default value is 1000 in the BanyanDB if not set.
         *
         * @since 9.4.0
         */
        private int countersNumber;
        private List<String> groupByTagNames;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getLruSize() {
            return this.lruSize;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setLruSize(final int lruSize) {
            this.lruSize = lruSize;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getCountersNumber() {
            return this.countersNumber;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setCountersNumber(final int countersNumber) {
            this.countersNumber = countersNumber;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setGroupByTagNames(final List<String> groupByTagNames) {
            this.groupByTagNames = groupByTagNames;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public List<String> getGroupByTagNames() {
            return this.groupByTagNames;
        }
    }

    /**
     * timestampColumn is to identify which column in {@link Record} is providing the timestamp(millisecond) for BanyanDB.
     * BanyanDB stream requires a timestamp in milliseconds
     *
     * @since 9.3.0
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTimestampColumn() {
        return this.timestampColumn;
    }

    /**
     * timestampColumn is to identify which column in {@link Record} is providing the timestamp(millisecond) for BanyanDB.
     * BanyanDB stream requires a timestamp in milliseconds
     *
     * @since 9.3.0
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimestampColumn(final String timestampColumn) {
        this.timestampColumn = timestampColumn;
    }

    /**
     * storeIDTag indicates whether a metric stores its ID as a tag.
     * The installer will create a virtual string ID tag with a tree index rule.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStoreIDTag() {
        return this.storeIDTag;
    }

    /**
     * storeIDTag indicates whether a metric stores its ID as a tag.
     * The installer will create a virtual string ID tag with a tree index rule.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStoreIDTag(final boolean storeIDTag) {
        this.storeIDTag = storeIDTag;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TopN getTopN() {
        return this.topN;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopN(final TopN topN) {
        this.topN = topN;
    }
}
