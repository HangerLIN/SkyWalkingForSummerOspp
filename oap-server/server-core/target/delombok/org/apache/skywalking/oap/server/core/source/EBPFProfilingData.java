// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import org.apache.skywalking.oap.server.core.Const;
import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingTargetType;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.EBPF_PROFILING_DATA;

@ScopeDeclaration(id = EBPF_PROFILING_DATA, name = "EBPFProfilingData")
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class EBPFProfilingData extends Source {
    private volatile String entityId;

    @Override
    public int scope() {
        return EBPF_PROFILING_DATA;
    }

    @Override
    public String getEntityId() {
        if (entityId == null) {
            return scheduleId + Const.ID_CONNECTOR + stackIdList;
        }
        return entityId;
    }

    private String scheduleId;
    private String taskId;
    private long uploadTime;
    private String stackIdList;
    private EBPFProfilingTargetType targetType;
    private byte[] dataBinary;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingData() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getScheduleId() {
        return this.scheduleId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTaskId() {
        return this.taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getUploadTime() {
        return this.uploadTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getStackIdList() {
        return this.stackIdList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingTargetType getTargetType() {
        return this.targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public byte[] getDataBinary() {
        return this.dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEntityId(final String entityId) {
        this.entityId = entityId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setScheduleId(final String scheduleId) {
        this.scheduleId = scheduleId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaskId(final String taskId) {
        this.taskId = taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUploadTime(final long uploadTime) {
        this.uploadTime = uploadTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStackIdList(final String stackIdList) {
        this.stackIdList = stackIdList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTargetType(final EBPFProfilingTargetType targetType) {
        this.targetType = targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDataBinary(final byte[] dataBinary) {
        this.dataBinary = dataBinary;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingData)) return false;
        final EBPFProfilingData other = (EBPFProfilingData) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getUploadTime() != other.getUploadTime()) return false;
        final java.lang.Object this$entityId = this.getEntityId();
        final java.lang.Object other$entityId = other.getEntityId();
        if (this$entityId == null ? other$entityId != null : !this$entityId.equals(other$entityId)) return false;
        final java.lang.Object this$scheduleId = this.getScheduleId();
        final java.lang.Object other$scheduleId = other.getScheduleId();
        if (this$scheduleId == null ? other$scheduleId != null : !this$scheduleId.equals(other$scheduleId)) return false;
        final java.lang.Object this$taskId = this.getTaskId();
        final java.lang.Object other$taskId = other.getTaskId();
        if (this$taskId == null ? other$taskId != null : !this$taskId.equals(other$taskId)) return false;
        final java.lang.Object this$stackIdList = this.getStackIdList();
        final java.lang.Object other$stackIdList = other.getStackIdList();
        if (this$stackIdList == null ? other$stackIdList != null : !this$stackIdList.equals(other$stackIdList)) return false;
        final java.lang.Object this$targetType = this.getTargetType();
        final java.lang.Object other$targetType = other.getTargetType();
        if (this$targetType == null ? other$targetType != null : !this$targetType.equals(other$targetType)) return false;
        if (!java.util.Arrays.equals(this.getDataBinary(), other.getDataBinary())) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingData;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $uploadTime = this.getUploadTime();
        result = result * PRIME + (int) ($uploadTime >>> 32 ^ $uploadTime);
        final java.lang.Object $entityId = this.getEntityId();
        result = result * PRIME + ($entityId == null ? 43 : $entityId.hashCode());
        final java.lang.Object $scheduleId = this.getScheduleId();
        result = result * PRIME + ($scheduleId == null ? 43 : $scheduleId.hashCode());
        final java.lang.Object $taskId = this.getTaskId();
        result = result * PRIME + ($taskId == null ? 43 : $taskId.hashCode());
        final java.lang.Object $stackIdList = this.getStackIdList();
        result = result * PRIME + ($stackIdList == null ? 43 : $stackIdList.hashCode());
        final java.lang.Object $targetType = this.getTargetType();
        result = result * PRIME + ($targetType == null ? 43 : $targetType.hashCode());
        result = result * PRIME + java.util.Arrays.hashCode(this.getDataBinary());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingData(entityId=" + this.getEntityId() + ", scheduleId=" + this.getScheduleId() + ", taskId=" + this.getTaskId() + ", uploadTime=" + this.getUploadTime() + ", stackIdList=" + this.getStackIdList() + ", targetType=" + this.getTargetType() + ", dataBinary=" + java.util.Arrays.toString(this.getDataBinary()) + ")";
    }
}
