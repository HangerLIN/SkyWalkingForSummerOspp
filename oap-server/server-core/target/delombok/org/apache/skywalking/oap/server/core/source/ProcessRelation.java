// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import org.apache.commons.lang3.StringUtils;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.PROCESS_RELATION;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.PROCESS_RELATION_CATALOG_NAME;

@ScopeDeclaration(id = PROCESS_RELATION, name = "ProcessRelation", catalog = PROCESS_RELATION_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class ProcessRelation extends Source {
    private String entityId;

    @Override
    public int scope() {
        return PROCESS_RELATION;
    }

    @Override
    public String getEntityId() {
        if (StringUtils.isEmpty(entityId)) {
            entityId = IDManager.ProcessID.buildRelationId(new IDManager.ProcessID.ProcessRelationDefine(sourceProcessId, destProcessId));
        }
        return entityId;
    }

    private String instanceId;
    private String sourceProcessId;
    private String destProcessId;
    private DetectPoint detectPoint;
    private int componentId;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getInstanceId() {
        return this.instanceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setInstanceId(final String instanceId) {
        this.instanceId = instanceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceProcessId() {
        return this.sourceProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSourceProcessId(final String sourceProcessId) {
        this.sourceProcessId = sourceProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestProcessId() {
        return this.destProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestProcessId(final String destProcessId) {
        this.destProcessId = destProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DetectPoint getDetectPoint() {
        return this.detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDetectPoint(final DetectPoint detectPoint) {
        this.detectPoint = detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setComponentId(final int componentId) {
        this.componentId = componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getComponentId() {
        return this.componentId;
    }
}
