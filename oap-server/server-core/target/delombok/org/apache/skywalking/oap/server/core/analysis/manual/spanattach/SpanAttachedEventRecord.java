// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.analysis.manual.spanattach;

import org.apache.skywalking.oap.server.core.analysis.Stream;
import org.apache.skywalking.oap.server.core.analysis.record.Record;
import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
import org.apache.skywalking.oap.server.core.storage.StorageID;
import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
import org.apache.skywalking.oap.server.core.storage.annotation.Column;
import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SPAN_ATTACHED_EVENT;

@ScopeDeclaration(id = SPAN_ATTACHED_EVENT, name = "SpanAttachedEvent")
@Stream(name = SpanAttachedEventRecord.INDEX_NAME, scopeId = SPAN_ATTACHED_EVENT, builder = SpanAttachedEventRecord.Builder.class, processor = RecordStreamProcessor.class)
@BanyanDB.TimestampColumn(SpanAttachedEventRecord.TIMESTAMP)
public class SpanAttachedEventRecord extends Record {
    public static final String INDEX_NAME = "span_attached_event_record";
    public static final String START_TIME_SECOND = "start_time_second";
    public static final String START_TIME_NANOS = "start_time_nanos";
    public static final String EVENT = "event";
    public static final String END_TIME_SECOND = "end_time_second";
    public static final String END_TIME_NANOS = "end_time_nanos";
    public static final String TRACE_REF_TYPE = "trace_ref_type";
    public static final String RELATED_TRACE_ID = "related_trace_id";
    public static final String TRACE_SEGMENT_ID = "trace_segment_id";
    public static final String TRACE_SPAN_ID = "trace_span_id";
    public static final String DATA_BINARY = "data_binary";
    public static final String TIMESTAMP = "timestamp";
    @Column(name = START_TIME_SECOND)
    private long startTimeSecond;
    @Column(name = START_TIME_NANOS)
    private int startTimeNanos;
    @Column(name = EVENT)
    @BanyanDB.SeriesID(index = 0)
    private String event;
    @Column(name = END_TIME_SECOND)
    private long endTimeSecond;
    @Column(name = END_TIME_NANOS)
    private int endTimeNanos;
    @Column(name = TRACE_REF_TYPE)
    private int traceRefType;
    @Column(name = RELATED_TRACE_ID)
    @BanyanDB.GlobalIndex
    private String relatedTraceId;
    @Column(name = TRACE_SEGMENT_ID)
    private String traceSegmentId;
    @Column(name = TRACE_SPAN_ID)
    private String traceSpanId;
    @Column(name = DATA_BINARY, storageOnly = true)
    private byte[] dataBinary;
    @Column(name = TIMESTAMP)
    private long timestamp;

    @Override
    public StorageID id() {
        return new StorageID().append(TRACE_SEGMENT_ID, traceSegmentId).append(START_TIME_SECOND, startTimeSecond).append(START_TIME_NANOS, startTimeNanos).append(EVENT, event);
    }


    public static class Builder implements StorageBuilder<SpanAttachedEventRecord> {
        @Override
        public SpanAttachedEventRecord storage2Entity(Convert2Entity converter) {
            final SpanAttachedEventRecord record = new SpanAttachedEventRecord();
            record.setStartTimeSecond(((Number) converter.get(START_TIME_SECOND)).longValue());
            record.setStartTimeNanos(((Number) converter.get(START_TIME_NANOS)).intValue());
            record.setEvent((String) converter.get(EVENT));
            record.setEndTimeSecond(((Number) converter.get(END_TIME_SECOND)).longValue());
            record.setEndTimeNanos(((Number) converter.get(END_TIME_NANOS)).intValue());
            record.setTraceRefType(((Number) converter.get(TRACE_REF_TYPE)).intValue());
            record.setRelatedTraceId((String) converter.get(RELATED_TRACE_ID));
            record.setTraceSegmentId((String) converter.get(TRACE_SEGMENT_ID));
            record.setTraceSpanId((String) converter.get(TRACE_SPAN_ID));
            record.setDataBinary(converter.getBytes(DATA_BINARY));
            record.setTimestamp(((Number) converter.get(TIMESTAMP)).longValue());
            return record;
        }

        @Override
        public void entity2Storage(SpanAttachedEventRecord entity, Convert2Storage converter) {
            converter.accept(START_TIME_SECOND, entity.getStartTimeSecond());
            converter.accept(START_TIME_NANOS, entity.getStartTimeNanos());
            converter.accept(EVENT, entity.getEvent());
            converter.accept(END_TIME_SECOND, entity.getEndTimeSecond());
            converter.accept(END_TIME_NANOS, entity.getEndTimeNanos());
            converter.accept(TRACE_REF_TYPE, entity.getTraceRefType());
            converter.accept(RELATED_TRACE_ID, entity.getRelatedTraceId());
            converter.accept(TRACE_SEGMENT_ID, entity.getTraceSegmentId());
            converter.accept(TRACE_SPAN_ID, entity.getTraceSpanId());
            converter.accept(DATA_BINARY, entity.getDataBinary());
            converter.accept(TIMESTAMP, entity.getTimestamp());
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStartTimeSecond(final long startTimeSecond) {
        this.startTimeSecond = startTimeSecond;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStartTimeNanos(final int startTimeNanos) {
        this.startTimeNanos = startTimeNanos;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEvent(final String event) {
        this.event = event;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndTimeSecond(final long endTimeSecond) {
        this.endTimeSecond = endTimeSecond;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndTimeNanos(final int endTimeNanos) {
        this.endTimeNanos = endTimeNanos;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceRefType(final int traceRefType) {
        this.traceRefType = traceRefType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRelatedTraceId(final String relatedTraceId) {
        this.relatedTraceId = relatedTraceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceSegmentId(final String traceSegmentId) {
        this.traceSegmentId = traceSegmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTraceSpanId(final String traceSpanId) {
        this.traceSpanId = traceSpanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDataBinary(final byte[] dataBinary) {
        this.dataBinary = dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getStartTimeSecond() {
        return this.startTimeSecond;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getStartTimeNanos() {
        return this.startTimeNanos;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEvent() {
        return this.event;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getEndTimeSecond() {
        return this.endTimeSecond;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getEndTimeNanos() {
        return this.endTimeNanos;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTraceRefType() {
        return this.traceRefType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRelatedTraceId() {
        return this.relatedTraceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTraceSegmentId() {
        return this.traceSegmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTraceSpanId() {
        return this.traceSpanId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public byte[] getDataBinary() {
        return this.dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimestamp(final long timestamp) {
        this.timestamp = timestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTimestamp() {
        return this.timestamp;
    }
}
