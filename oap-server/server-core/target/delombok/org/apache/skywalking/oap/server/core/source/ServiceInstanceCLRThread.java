// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CLR_THREAD;

/**
 */
@ScopeDeclaration(id = SERVICE_INSTANCE_CLR_THREAD, name = "ServiceInstanceCLRThread", catalog = SERVICE_INSTANCE_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class ServiceInstanceCLRThread extends Source {
    @Override
    public int scope() {
        return DefaultScopeDefine.SERVICE_INSTANCE_CLR_THREAD;
    }

    @Override
    public String getEntityId() {
        return String.valueOf(id);
    }

    private String id;
    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
    private String name;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
    private String serviceName;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
    private String serviceId;
    private long availableCompletionPortThreads;
    private long availableWorkerThreads;
    private long maxCompletionPortThreads;
    private long maxWorkerThreads;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getId() {
        return this.id;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setId(final String id) {
        this.id = id;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setName(final String name) {
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceId(final String serviceId) {
        this.serviceId = serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getAvailableCompletionPortThreads() {
        return this.availableCompletionPortThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAvailableCompletionPortThreads(final long availableCompletionPortThreads) {
        this.availableCompletionPortThreads = availableCompletionPortThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getAvailableWorkerThreads() {
        return this.availableWorkerThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAvailableWorkerThreads(final long availableWorkerThreads) {
        this.availableWorkerThreads = availableWorkerThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getMaxCompletionPortThreads() {
        return this.maxCompletionPortThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxCompletionPortThreads(final long maxCompletionPortThreads) {
        this.maxCompletionPortThreads = maxCompletionPortThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getMaxWorkerThreads() {
        return this.maxWorkerThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxWorkerThreads(final long maxWorkerThreads) {
        this.maxWorkerThreads = maxWorkerThreads;
    }
}
