// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import java.util.List;
import java.util.Map;
import org.apache.skywalking.oap.server.core.analysis.Layer;
import org.apache.skywalking.oap.server.library.util.StringUtil;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;

@ScopeDeclaration(id = ENDPOINT, name = "Endpoint", catalog = ENDPOINT_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class Endpoint extends Source {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Endpoint.class);
    private String entityId;

    @Override
    public int scope() {
        return DefaultScopeDefine.ENDPOINT;
    }

    @Override
    public String getEntityId() {
        if (StringUtil.isEmpty(entityId)) {
            entityId = IDManager.EndpointID.buildId(serviceId, name);
        }
        return entityId;
    }

    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
    private String name;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_id", groupByCondInTopN = true)
    private String serviceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
    private String serviceName;
    private String serviceInstanceName;
    private int latency;
    private boolean status;
    private int httpResponseStatusCode;
    private String rpcStatusCode;
    private RequestType type;
    private List<String> tags;
    private Map<String, String> originalTags;
    private SideCar sideCar = new SideCar();
    private Layer serviceLayer;

    @Override
    public void prepare() {
        serviceId = IDManager.ServiceID.buildId(serviceName, serviceLayer.isNormal());
    }

    public String getTag(String key) {
        return originalTags.get(key);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setName(final String name) {
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceInstanceName() {
        return this.serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceName(final String serviceInstanceName) {
        this.serviceInstanceName = serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getLatency() {
        return this.latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLatency(final int latency) {
        this.latency = latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStatus(final boolean status) {
        this.status = status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getHttpResponseStatusCode() {
        return this.httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHttpResponseStatusCode(final int httpResponseStatusCode) {
        this.httpResponseStatusCode = httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRpcStatusCode() {
        return this.rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRpcStatusCode(final String rpcStatusCode) {
        this.rpcStatusCode = rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public RequestType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final RequestType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getTags() {
        return this.tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTags(final List<String> tags) {
        this.tags = tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setOriginalTags(final Map<String, String> originalTags) {
        this.originalTags = originalTags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SideCar getSideCar() {
        return this.sideCar;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSideCar(final SideCar sideCar) {
        this.sideCar = sideCar;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getServiceLayer() {
        return this.serviceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceLayer(final Layer serviceLayer) {
        this.serviceLayer = serviceLayer;
    }
}
