// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import java.util.ArrayList;
import java.util.List;

/**
 * Continuous profiling task configuration
 */
public class EBPFProfilingTaskContinuousProfiling {
    private String processId;
    private String processName;
    private List<ContinuousProfilingTriggeredCause> causes;

    public EBPFProfilingTaskContinuousProfiling() {
        this.causes = new ArrayList<>();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessId() {
        return this.processId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessName() {
        return this.processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ContinuousProfilingTriggeredCause> getCauses() {
        return this.causes;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessId(final String processId) {
        this.processId = processId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessName(final String processName) {
        this.processName = processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCauses(final List<ContinuousProfilingTriggeredCause> causes) {
        this.causes = causes;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingTaskContinuousProfiling)) return false;
        final EBPFProfilingTaskContinuousProfiling other = (EBPFProfilingTaskContinuousProfiling) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$processId = this.getProcessId();
        final java.lang.Object other$processId = other.getProcessId();
        if (this$processId == null ? other$processId != null : !this$processId.equals(other$processId)) return false;
        final java.lang.Object this$processName = this.getProcessName();
        final java.lang.Object other$processName = other.getProcessName();
        if (this$processName == null ? other$processName != null : !this$processName.equals(other$processName)) return false;
        final java.lang.Object this$causes = this.getCauses();
        final java.lang.Object other$causes = other.getCauses();
        if (this$causes == null ? other$causes != null : !this$causes.equals(other$causes)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingTaskContinuousProfiling;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $processId = this.getProcessId();
        result = result * PRIME + ($processId == null ? 43 : $processId.hashCode());
        final java.lang.Object $processName = this.getProcessName();
        result = result * PRIME + ($processName == null ? 43 : $processName.hashCode());
        final java.lang.Object $causes = this.getCauses();
        result = result * PRIME + ($causes == null ? 43 : $causes.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingTaskContinuousProfiling(processId=" + this.getProcessId() + ", processName=" + this.getProcessName() + ", causes=" + this.getCauses() + ")";
    }
}
