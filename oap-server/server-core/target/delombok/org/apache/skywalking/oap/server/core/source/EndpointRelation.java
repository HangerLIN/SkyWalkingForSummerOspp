// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import org.apache.skywalking.oap.server.core.analysis.IDManager;
import org.apache.skywalking.oap.server.core.analysis.Layer;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_RELATION;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_RELATION_CATALOG_NAME;

@ScopeDeclaration(id = ENDPOINT_RELATION, name = "EndpointRelation", catalog = ENDPOINT_RELATION_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class EndpointRelation extends Source {
    @Override
    public int scope() {
        return DefaultScopeDefine.ENDPOINT_RELATION;
    }

    @Override
    public String getEntityId() {
        return IDManager.EndpointID.buildRelationId(new IDManager.EndpointID.EndpointRelationDefine(serviceId, endpoint, childServiceId, childEndpoint));
    }

    @ScopeDefaultColumn.DefinedByField(columnName = "source_endpoint_name", requireDynamicActive = true)
    private String endpoint;
    private String serviceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "source_service_name", requireDynamicActive = true)
    private String serviceName;
    private String serviceInstanceName;
    @ScopeDefaultColumn.DefinedByField(columnName = "child_endpoint_name", requireDynamicActive = true)
    private String childEndpoint;
    private String childServiceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "child_service_name", requireDynamicActive = true)
    private String childServiceName;
    private String childServiceInstanceName;
    private int componentId;
    private int rpcLatency;
    private boolean status;
    private int httpResponseStatusCode;
    private String rpcStatusCode;
    private RequestType type;
    private DetectPoint detectPoint;
    private Layer serviceLayer;
    private Layer childServiceLayer;

    @Override
    public void prepare() {
        serviceId = IDManager.ServiceID.buildId(serviceName, serviceLayer.isNormal());
        childServiceId = IDManager.ServiceID.buildId(childServiceName, childServiceLayer.isNormal());
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndpoint(final String endpoint) {
        this.endpoint = endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceInstanceName() {
        return this.serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceName(final String serviceInstanceName) {
        this.serviceInstanceName = serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getChildEndpoint() {
        return this.childEndpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setChildEndpoint(final String childEndpoint) {
        this.childEndpoint = childEndpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getChildServiceId() {
        return this.childServiceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setChildServiceName(final String childServiceName) {
        this.childServiceName = childServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getChildServiceName() {
        return this.childServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getChildServiceInstanceName() {
        return this.childServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setChildServiceInstanceName(final String childServiceInstanceName) {
        this.childServiceInstanceName = childServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getComponentId() {
        return this.componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setComponentId(final int componentId) {
        this.componentId = componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRpcLatency() {
        return this.rpcLatency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRpcLatency(final int rpcLatency) {
        this.rpcLatency = rpcLatency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStatus(final boolean status) {
        this.status = status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getHttpResponseStatusCode() {
        return this.httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHttpResponseStatusCode(final int httpResponseStatusCode) {
        this.httpResponseStatusCode = httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRpcStatusCode() {
        return this.rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRpcStatusCode(final String rpcStatusCode) {
        this.rpcStatusCode = rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public RequestType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final RequestType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DetectPoint getDetectPoint() {
        return this.detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDetectPoint(final DetectPoint detectPoint) {
        this.detectPoint = detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getServiceLayer() {
        return this.serviceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceLayer(final Layer serviceLayer) {
        this.serviceLayer = serviceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getChildServiceLayer() {
        return this.childServiceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setChildServiceLayer(final Layer childServiceLayer) {
        this.childServiceLayer = childServiceLayer;
    }
}
