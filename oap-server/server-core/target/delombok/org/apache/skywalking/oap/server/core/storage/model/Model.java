// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.storage.model;

import org.apache.skywalking.oap.server.core.analysis.DownSampling;
import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
import org.apache.skywalking.oap.server.core.analysis.record.Record;
import java.util.List;

/**
 * The model definition of a logic entity.
 */
public class Model {
    private final String name;
    private final List<ModelColumn> columns;
    private final int scopeId;
    private final DownSampling downsampling;
    private final boolean superDataset;
    private final Class<?> streamClass;
    private final boolean timeRelativeID;
    private final SQLDatabaseModelExtension sqlDBModelExtension;
    private final BanyanDBModelExtension banyanDBModelExtension;
    private final ElasticSearchModelExtension elasticSearchModelExtension;
    private final java.util.concurrent.atomic.AtomicReference<java.lang.Object> isMetric = new java.util.concurrent.atomic.AtomicReference<java.lang.Object>();
    private final java.util.concurrent.atomic.AtomicReference<java.lang.Object> isRecord = new java.util.concurrent.atomic.AtomicReference<java.lang.Object>();
    private final java.util.concurrent.atomic.AtomicReference<java.lang.Object> isTimeSeries = new java.util.concurrent.atomic.AtomicReference<java.lang.Object>();

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ModelColumn> getColumns() {
        return this.columns;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getScopeId() {
        return this.scopeId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DownSampling getDownsampling() {
        return this.downsampling;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isSuperDataset() {
        return this.superDataset;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Class<?> getStreamClass() {
        return this.streamClass;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isTimeRelativeID() {
        return this.timeRelativeID;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SQLDatabaseModelExtension getSqlDBModelExtension() {
        return this.sqlDBModelExtension;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BanyanDBModelExtension getBanyanDBModelExtension() {
        return this.banyanDBModelExtension;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticSearchModelExtension getElasticSearchModelExtension() {
        return this.elasticSearchModelExtension;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Model)) return false;
        final Model other = (Model) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getScopeId() != other.getScopeId()) return false;
        if (this.isSuperDataset() != other.isSuperDataset()) return false;
        if (this.isTimeRelativeID() != other.isTimeRelativeID()) return false;
        if (this.isMetric() != other.isMetric()) return false;
        if (this.isRecord() != other.isRecord()) return false;
        if (this.isTimeSeries() != other.isTimeSeries()) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$columns = this.getColumns();
        final java.lang.Object other$columns = other.getColumns();
        if (this$columns == null ? other$columns != null : !this$columns.equals(other$columns)) return false;
        final java.lang.Object this$downsampling = this.getDownsampling();
        final java.lang.Object other$downsampling = other.getDownsampling();
        if (this$downsampling == null ? other$downsampling != null : !this$downsampling.equals(other$downsampling)) return false;
        final java.lang.Object this$streamClass = this.getStreamClass();
        final java.lang.Object other$streamClass = other.getStreamClass();
        if (this$streamClass == null ? other$streamClass != null : !this$streamClass.equals(other$streamClass)) return false;
        final java.lang.Object this$sqlDBModelExtension = this.getSqlDBModelExtension();
        final java.lang.Object other$sqlDBModelExtension = other.getSqlDBModelExtension();
        if (this$sqlDBModelExtension == null ? other$sqlDBModelExtension != null : !this$sqlDBModelExtension.equals(other$sqlDBModelExtension)) return false;
        final java.lang.Object this$banyanDBModelExtension = this.getBanyanDBModelExtension();
        final java.lang.Object other$banyanDBModelExtension = other.getBanyanDBModelExtension();
        if (this$banyanDBModelExtension == null ? other$banyanDBModelExtension != null : !this$banyanDBModelExtension.equals(other$banyanDBModelExtension)) return false;
        final java.lang.Object this$elasticSearchModelExtension = this.getElasticSearchModelExtension();
        final java.lang.Object other$elasticSearchModelExtension = other.getElasticSearchModelExtension();
        if (this$elasticSearchModelExtension == null ? other$elasticSearchModelExtension != null : !this$elasticSearchModelExtension.equals(other$elasticSearchModelExtension)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Model;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getScopeId();
        result = result * PRIME + (this.isSuperDataset() ? 79 : 97);
        result = result * PRIME + (this.isTimeRelativeID() ? 79 : 97);
        result = result * PRIME + (this.isMetric() ? 79 : 97);
        result = result * PRIME + (this.isRecord() ? 79 : 97);
        result = result * PRIME + (this.isTimeSeries() ? 79 : 97);
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $columns = this.getColumns();
        result = result * PRIME + ($columns == null ? 43 : $columns.hashCode());
        final java.lang.Object $downsampling = this.getDownsampling();
        result = result * PRIME + ($downsampling == null ? 43 : $downsampling.hashCode());
        final java.lang.Object $streamClass = this.getStreamClass();
        result = result * PRIME + ($streamClass == null ? 43 : $streamClass.hashCode());
        final java.lang.Object $sqlDBModelExtension = this.getSqlDBModelExtension();
        result = result * PRIME + ($sqlDBModelExtension == null ? 43 : $sqlDBModelExtension.hashCode());
        final java.lang.Object $banyanDBModelExtension = this.getBanyanDBModelExtension();
        result = result * PRIME + ($banyanDBModelExtension == null ? 43 : $banyanDBModelExtension.hashCode());
        final java.lang.Object $elasticSearchModelExtension = this.getElasticSearchModelExtension();
        result = result * PRIME + ($elasticSearchModelExtension == null ? 43 : $elasticSearchModelExtension.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Model(final String name, final List<ModelColumn> columns, final int scopeId, final DownSampling downsampling, final boolean superDataset, final Class<?> streamClass, final boolean timeRelativeID, final SQLDatabaseModelExtension sqlDBModelExtension, final BanyanDBModelExtension banyanDBModelExtension, final ElasticSearchModelExtension elasticSearchModelExtension) {
        this.name = name;
        this.columns = columns;
        this.scopeId = scopeId;
        this.downsampling = downsampling;
        this.superDataset = superDataset;
        this.streamClass = streamClass;
        this.timeRelativeID = timeRelativeID;
        this.sqlDBModelExtension = sqlDBModelExtension;
        this.banyanDBModelExtension = banyanDBModelExtension;
        this.elasticSearchModelExtension = elasticSearchModelExtension;
    }

    @java.lang.SuppressWarnings({"all", "unchecked"})
    @lombok.Generated
    public boolean isMetric() {
        java.lang.Object value = this.isMetric.get();
        if (value == null) {
            synchronized (this.isMetric) {
                value = this.isMetric.get();
                if (value == null) {
                    final boolean actualValue = Metrics.class.isAssignableFrom(getStreamClass());
                    value = actualValue;
                    this.isMetric.set(value);
                }
            }
        }
        return (java.lang.Boolean) value;
    }

    @java.lang.SuppressWarnings({"all", "unchecked"})
    @lombok.Generated
    public boolean isRecord() {
        java.lang.Object value = this.isRecord.get();
        if (value == null) {
            synchronized (this.isRecord) {
                value = this.isRecord.get();
                if (value == null) {
                    final boolean actualValue = Record.class.isAssignableFrom(getStreamClass());
                    value = actualValue;
                    this.isRecord.set(value);
                }
            }
        }
        return (java.lang.Boolean) value;
    }

    @java.lang.SuppressWarnings({"all", "unchecked"})
    @lombok.Generated
    public boolean isTimeSeries() {
        java.lang.Object value = this.isTimeSeries.get();
        if (value == null) {
            synchronized (this.isTimeSeries) {
                value = this.isTimeSeries.get();
                if (value == null) {
                    final boolean actualValue = !DownSampling.None.equals(getDownsampling());
                    value = actualValue;
                    this.isTimeSeries.set(value);
                }
            }
        }
        return (java.lang.Boolean) value;
    }
}
