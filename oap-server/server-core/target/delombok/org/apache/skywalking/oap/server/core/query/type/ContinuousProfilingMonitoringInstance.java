// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import java.util.ArrayList;
import java.util.List;

public class ContinuousProfilingMonitoringInstance {
    private String id;
    private String name;
    private List<Attribute> attributes;
    private int triggeredCount;
    private Long lastTriggerTimestamp;
    private List<ContinuousProfilingMonitoringProcess> processes;

    public ContinuousProfilingMonitoringInstance() {
        this.processes = new ArrayList<>();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getId() {
        return this.id;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Attribute> getAttributes() {
        return this.attributes;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTriggeredCount() {
        return this.triggeredCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Long getLastTriggerTimestamp() {
        return this.lastTriggerTimestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ContinuousProfilingMonitoringProcess> getProcesses() {
        return this.processes;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setId(final String id) {
        this.id = id;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setName(final String name) {
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAttributes(final List<Attribute> attributes) {
        this.attributes = attributes;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTriggeredCount(final int triggeredCount) {
        this.triggeredCount = triggeredCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLastTriggerTimestamp(final Long lastTriggerTimestamp) {
        this.lastTriggerTimestamp = lastTriggerTimestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcesses(final List<ContinuousProfilingMonitoringProcess> processes) {
        this.processes = processes;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ContinuousProfilingMonitoringInstance)) return false;
        final ContinuousProfilingMonitoringInstance other = (ContinuousProfilingMonitoringInstance) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getTriggeredCount() != other.getTriggeredCount()) return false;
        final java.lang.Object this$lastTriggerTimestamp = this.getLastTriggerTimestamp();
        final java.lang.Object other$lastTriggerTimestamp = other.getLastTriggerTimestamp();
        if (this$lastTriggerTimestamp == null ? other$lastTriggerTimestamp != null : !this$lastTriggerTimestamp.equals(other$lastTriggerTimestamp)) return false;
        final java.lang.Object this$id = this.getId();
        final java.lang.Object other$id = other.getId();
        if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$attributes = this.getAttributes();
        final java.lang.Object other$attributes = other.getAttributes();
        if (this$attributes == null ? other$attributes != null : !this$attributes.equals(other$attributes)) return false;
        final java.lang.Object this$processes = this.getProcesses();
        final java.lang.Object other$processes = other.getProcesses();
        if (this$processes == null ? other$processes != null : !this$processes.equals(other$processes)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ContinuousProfilingMonitoringInstance;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getTriggeredCount();
        final java.lang.Object $lastTriggerTimestamp = this.getLastTriggerTimestamp();
        result = result * PRIME + ($lastTriggerTimestamp == null ? 43 : $lastTriggerTimestamp.hashCode());
        final java.lang.Object $id = this.getId();
        result = result * PRIME + ($id == null ? 43 : $id.hashCode());
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $attributes = this.getAttributes();
        result = result * PRIME + ($attributes == null ? 43 : $attributes.hashCode());
        final java.lang.Object $processes = this.getProcesses();
        result = result * PRIME + ($processes == null ? 43 : $processes.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ContinuousProfilingMonitoringInstance(id=" + this.getId() + ", name=" + this.getName() + ", attributes=" + this.getAttributes() + ", triggeredCount=" + this.getTriggeredCount() + ", lastTriggerTimestamp=" + this.getLastTriggerTimestamp() + ", processes=" + this.getProcesses() + ")";
    }
}
