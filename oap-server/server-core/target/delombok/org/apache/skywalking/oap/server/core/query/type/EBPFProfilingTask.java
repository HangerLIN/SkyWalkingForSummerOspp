// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingTargetType;
import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingTriggerType;
import java.util.List;

public class EBPFProfilingTask {
    private String taskId;
    private String serviceId;
    private String serviceName;
    private String serviceInstanceId;
    private String serviceInstanceName;
    private List<String> processLabels;
    private String processId;
    private String processName;
    private long taskStartTime;
    private EBPFProfilingTriggerType triggerType;
    private long fixedTriggerDuration;
    private EBPFProfilingTargetType targetType;
    private long createTime;
    private long lastUpdateTime;
    private EBPFProfilingTaskExtension extensionConfig;
    private List<ContinuousProfilingTriggeredCause> continuousProfilingCauses;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingTask() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTaskId() {
        return this.taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceInstanceId() {
        return this.serviceInstanceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceInstanceName() {
        return this.serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getProcessLabels() {
        return this.processLabels;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessId() {
        return this.processId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessName() {
        return this.processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTaskStartTime() {
        return this.taskStartTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingTriggerType getTriggerType() {
        return this.triggerType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getFixedTriggerDuration() {
        return this.fixedTriggerDuration;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingTargetType getTargetType() {
        return this.targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getCreateTime() {
        return this.createTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingTaskExtension getExtensionConfig() {
        return this.extensionConfig;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ContinuousProfilingTriggeredCause> getContinuousProfilingCauses() {
        return this.continuousProfilingCauses;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaskId(final String taskId) {
        this.taskId = taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceId(final String serviceId) {
        this.serviceId = serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceId(final String serviceInstanceId) {
        this.serviceInstanceId = serviceInstanceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceName(final String serviceInstanceName) {
        this.serviceInstanceName = serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessLabels(final List<String> processLabels) {
        this.processLabels = processLabels;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessId(final String processId) {
        this.processId = processId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessName(final String processName) {
        this.processName = processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaskStartTime(final long taskStartTime) {
        this.taskStartTime = taskStartTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTriggerType(final EBPFProfilingTriggerType triggerType) {
        this.triggerType = triggerType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setFixedTriggerDuration(final long fixedTriggerDuration) {
        this.fixedTriggerDuration = fixedTriggerDuration;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTargetType(final EBPFProfilingTargetType targetType) {
        this.targetType = targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCreateTime(final long createTime) {
        this.createTime = createTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLastUpdateTime(final long lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setExtensionConfig(final EBPFProfilingTaskExtension extensionConfig) {
        this.extensionConfig = extensionConfig;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setContinuousProfilingCauses(final List<ContinuousProfilingTriggeredCause> continuousProfilingCauses) {
        this.continuousProfilingCauses = continuousProfilingCauses;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingTask)) return false;
        final EBPFProfilingTask other = (EBPFProfilingTask) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getTaskStartTime() != other.getTaskStartTime()) return false;
        if (this.getFixedTriggerDuration() != other.getFixedTriggerDuration()) return false;
        if (this.getCreateTime() != other.getCreateTime()) return false;
        if (this.getLastUpdateTime() != other.getLastUpdateTime()) return false;
        final java.lang.Object this$taskId = this.getTaskId();
        final java.lang.Object other$taskId = other.getTaskId();
        if (this$taskId == null ? other$taskId != null : !this$taskId.equals(other$taskId)) return false;
        final java.lang.Object this$serviceId = this.getServiceId();
        final java.lang.Object other$serviceId = other.getServiceId();
        if (this$serviceId == null ? other$serviceId != null : !this$serviceId.equals(other$serviceId)) return false;
        final java.lang.Object this$serviceName = this.getServiceName();
        final java.lang.Object other$serviceName = other.getServiceName();
        if (this$serviceName == null ? other$serviceName != null : !this$serviceName.equals(other$serviceName)) return false;
        final java.lang.Object this$serviceInstanceId = this.getServiceInstanceId();
        final java.lang.Object other$serviceInstanceId = other.getServiceInstanceId();
        if (this$serviceInstanceId == null ? other$serviceInstanceId != null : !this$serviceInstanceId.equals(other$serviceInstanceId)) return false;
        final java.lang.Object this$serviceInstanceName = this.getServiceInstanceName();
        final java.lang.Object other$serviceInstanceName = other.getServiceInstanceName();
        if (this$serviceInstanceName == null ? other$serviceInstanceName != null : !this$serviceInstanceName.equals(other$serviceInstanceName)) return false;
        final java.lang.Object this$processLabels = this.getProcessLabels();
        final java.lang.Object other$processLabels = other.getProcessLabels();
        if (this$processLabels == null ? other$processLabels != null : !this$processLabels.equals(other$processLabels)) return false;
        final java.lang.Object this$processId = this.getProcessId();
        final java.lang.Object other$processId = other.getProcessId();
        if (this$processId == null ? other$processId != null : !this$processId.equals(other$processId)) return false;
        final java.lang.Object this$processName = this.getProcessName();
        final java.lang.Object other$processName = other.getProcessName();
        if (this$processName == null ? other$processName != null : !this$processName.equals(other$processName)) return false;
        final java.lang.Object this$triggerType = this.getTriggerType();
        final java.lang.Object other$triggerType = other.getTriggerType();
        if (this$triggerType == null ? other$triggerType != null : !this$triggerType.equals(other$triggerType)) return false;
        final java.lang.Object this$targetType = this.getTargetType();
        final java.lang.Object other$targetType = other.getTargetType();
        if (this$targetType == null ? other$targetType != null : !this$targetType.equals(other$targetType)) return false;
        final java.lang.Object this$extensionConfig = this.getExtensionConfig();
        final java.lang.Object other$extensionConfig = other.getExtensionConfig();
        if (this$extensionConfig == null ? other$extensionConfig != null : !this$extensionConfig.equals(other$extensionConfig)) return false;
        final java.lang.Object this$continuousProfilingCauses = this.getContinuousProfilingCauses();
        final java.lang.Object other$continuousProfilingCauses = other.getContinuousProfilingCauses();
        if (this$continuousProfilingCauses == null ? other$continuousProfilingCauses != null : !this$continuousProfilingCauses.equals(other$continuousProfilingCauses)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingTask;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $taskStartTime = this.getTaskStartTime();
        result = result * PRIME + (int) ($taskStartTime >>> 32 ^ $taskStartTime);
        final long $fixedTriggerDuration = this.getFixedTriggerDuration();
        result = result * PRIME + (int) ($fixedTriggerDuration >>> 32 ^ $fixedTriggerDuration);
        final long $createTime = this.getCreateTime();
        result = result * PRIME + (int) ($createTime >>> 32 ^ $createTime);
        final long $lastUpdateTime = this.getLastUpdateTime();
        result = result * PRIME + (int) ($lastUpdateTime >>> 32 ^ $lastUpdateTime);
        final java.lang.Object $taskId = this.getTaskId();
        result = result * PRIME + ($taskId == null ? 43 : $taskId.hashCode());
        final java.lang.Object $serviceId = this.getServiceId();
        result = result * PRIME + ($serviceId == null ? 43 : $serviceId.hashCode());
        final java.lang.Object $serviceName = this.getServiceName();
        result = result * PRIME + ($serviceName == null ? 43 : $serviceName.hashCode());
        final java.lang.Object $serviceInstanceId = this.getServiceInstanceId();
        result = result * PRIME + ($serviceInstanceId == null ? 43 : $serviceInstanceId.hashCode());
        final java.lang.Object $serviceInstanceName = this.getServiceInstanceName();
        result = result * PRIME + ($serviceInstanceName == null ? 43 : $serviceInstanceName.hashCode());
        final java.lang.Object $processLabels = this.getProcessLabels();
        result = result * PRIME + ($processLabels == null ? 43 : $processLabels.hashCode());
        final java.lang.Object $processId = this.getProcessId();
        result = result * PRIME + ($processId == null ? 43 : $processId.hashCode());
        final java.lang.Object $processName = this.getProcessName();
        result = result * PRIME + ($processName == null ? 43 : $processName.hashCode());
        final java.lang.Object $triggerType = this.getTriggerType();
        result = result * PRIME + ($triggerType == null ? 43 : $triggerType.hashCode());
        final java.lang.Object $targetType = this.getTargetType();
        result = result * PRIME + ($targetType == null ? 43 : $targetType.hashCode());
        final java.lang.Object $extensionConfig = this.getExtensionConfig();
        result = result * PRIME + ($extensionConfig == null ? 43 : $extensionConfig.hashCode());
        final java.lang.Object $continuousProfilingCauses = this.getContinuousProfilingCauses();
        result = result * PRIME + ($continuousProfilingCauses == null ? 43 : $continuousProfilingCauses.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingTask(taskId=" + this.getTaskId() + ", serviceId=" + this.getServiceId() + ", serviceName=" + this.getServiceName() + ", serviceInstanceId=" + this.getServiceInstanceId() + ", serviceInstanceName=" + this.getServiceInstanceName() + ", processLabels=" + this.getProcessLabels() + ", processId=" + this.getProcessId() + ", processName=" + this.getProcessName() + ", taskStartTime=" + this.getTaskStartTime() + ", triggerType=" + this.getTriggerType() + ", fixedTriggerDuration=" + this.getFixedTriggerDuration() + ", targetType=" + this.getTargetType() + ", createTime=" + this.getCreateTime() + ", lastUpdateTime=" + this.getLastUpdateTime() + ", extensionConfig=" + this.getExtensionConfig() + ", continuousProfilingCauses=" + this.getContinuousProfilingCauses() + ")";
    }
}
