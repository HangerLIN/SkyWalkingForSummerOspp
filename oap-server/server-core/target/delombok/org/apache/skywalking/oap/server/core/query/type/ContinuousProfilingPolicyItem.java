// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import org.apache.skywalking.oap.server.core.profiling.continuous.storage.ContinuousProfilingMonitorType;
import java.util.List;

/**
 * Continuous profiling policy threshold item
 */
public class ContinuousProfilingPolicyItem {
    private ContinuousProfilingMonitorType type;
    private String threshold;
    private Integer period;
    private Integer count;
    private List<String> uriList;
    private String uriRegex;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingPolicyItem() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingMonitorType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getThreshold() {
        return this.threshold;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getPeriod() {
        return this.period;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getCount() {
        return this.count;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getUriList() {
        return this.uriList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getUriRegex() {
        return this.uriRegex;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final ContinuousProfilingMonitorType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setThreshold(final String threshold) {
        this.threshold = threshold;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPeriod(final Integer period) {
        this.period = period;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCount(final Integer count) {
        this.count = count;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUriList(final List<String> uriList) {
        this.uriList = uriList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUriRegex(final String uriRegex) {
        this.uriRegex = uriRegex;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ContinuousProfilingPolicyItem)) return false;
        final ContinuousProfilingPolicyItem other = (ContinuousProfilingPolicyItem) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$period = this.getPeriod();
        final java.lang.Object other$period = other.getPeriod();
        if (this$period == null ? other$period != null : !this$period.equals(other$period)) return false;
        final java.lang.Object this$count = this.getCount();
        final java.lang.Object other$count = other.getCount();
        if (this$count == null ? other$count != null : !this$count.equals(other$count)) return false;
        final java.lang.Object this$type = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final java.lang.Object this$threshold = this.getThreshold();
        final java.lang.Object other$threshold = other.getThreshold();
        if (this$threshold == null ? other$threshold != null : !this$threshold.equals(other$threshold)) return false;
        final java.lang.Object this$uriList = this.getUriList();
        final java.lang.Object other$uriList = other.getUriList();
        if (this$uriList == null ? other$uriList != null : !this$uriList.equals(other$uriList)) return false;
        final java.lang.Object this$uriRegex = this.getUriRegex();
        final java.lang.Object other$uriRegex = other.getUriRegex();
        if (this$uriRegex == null ? other$uriRegex != null : !this$uriRegex.equals(other$uriRegex)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ContinuousProfilingPolicyItem;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $period = this.getPeriod();
        result = result * PRIME + ($period == null ? 43 : $period.hashCode());
        final java.lang.Object $count = this.getCount();
        result = result * PRIME + ($count == null ? 43 : $count.hashCode());
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final java.lang.Object $threshold = this.getThreshold();
        result = result * PRIME + ($threshold == null ? 43 : $threshold.hashCode());
        final java.lang.Object $uriList = this.getUriList();
        result = result * PRIME + ($uriList == null ? 43 : $uriList.hashCode());
        final java.lang.Object $uriRegex = this.getUriRegex();
        result = result * PRIME + ($uriRegex == null ? 43 : $uriRegex.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ContinuousProfilingPolicyItem(type=" + this.getType() + ", threshold=" + this.getThreshold() + ", period=" + this.getPeriod() + ", count=" + this.getCount() + ", uriList=" + this.getUriList() + ", uriRegex=" + this.getUriRegex() + ")";
    }
}
