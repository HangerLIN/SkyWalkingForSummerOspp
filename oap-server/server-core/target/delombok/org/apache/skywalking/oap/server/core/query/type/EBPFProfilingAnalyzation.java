// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import java.util.ArrayList;
import java.util.List;

/**
 * eBPF Profiling analysis result, used to render the Flame Graph
 */
public class EBPFProfilingAnalyzation {
    private String tip;
    private List<EBPFProfilingTree> trees = new ArrayList<>();

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingAnalyzation() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTip() {
        return this.tip;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<EBPFProfilingTree> getTrees() {
        return this.trees;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTip(final String tip) {
        this.tip = tip;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTrees(final List<EBPFProfilingTree> trees) {
        this.trees = trees;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingAnalyzation)) return false;
        final EBPFProfilingAnalyzation other = (EBPFProfilingAnalyzation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$tip = this.getTip();
        final java.lang.Object other$tip = other.getTip();
        if (this$tip == null ? other$tip != null : !this$tip.equals(other$tip)) return false;
        final java.lang.Object this$trees = this.getTrees();
        final java.lang.Object other$trees = other.getTrees();
        if (this$trees == null ? other$trees != null : !this$trees.equals(other$trees)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingAnalyzation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $tip = this.getTip();
        result = result * PRIME + ($tip == null ? 43 : $tip.hashCode());
        final java.lang.Object $trees = this.getTrees();
        result = result * PRIME + ($trees == null ? 43 : $trees.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingAnalyzation(tip=" + this.getTip() + ", trees=" + this.getTrees() + ")";
    }
}
