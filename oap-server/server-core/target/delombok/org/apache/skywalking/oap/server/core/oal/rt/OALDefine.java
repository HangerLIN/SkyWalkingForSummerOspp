// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.skywalking.oap.server.core.oal.rt;

import org.apache.skywalking.oap.server.core.Const;
import org.apache.skywalking.oap.server.library.util.StringUtil;
import static java.util.Objects.requireNonNull;

/**
 * Define multiple OAL configuration
 */
public abstract class OALDefine {
    protected OALDefine(final String configFile, final String sourcePackage) {
        this(configFile, sourcePackage, Const.EMPTY_STRING);
    }

    /**
     * Define the booting parameters for OAL engine
     *
     * @param configFile    OAL script file path
     * @param sourcePackage the package path of source(s) used in given config OAL script file
     * @param catalog       of metrics defined through given OAL script file. Be used as prefix of generated dispatcher
     *                      class name.
     */
    protected OALDefine(final String configFile, final String sourcePackage, final String catalog) {
        this.configFile = requireNonNull(configFile);
        this.sourcePackage = appendPoint(requireNonNull(sourcePackage));
        this.dynamicMetricsClassPackage = "org.apache.skywalking.oap.server.core.source.oal.rt.metrics.";
        this.dynamicMetricsBuilderClassPackage = "org.apache.skywalking.oap.server.core.source.oal.rt.metrics.builder.";
        this.dynamicDispatcherClassPackage = StringUtil.isBlank(catalog) ? "org.apache.skywalking.oap.server.core.source.oal.rt.dispatcher." : "org.apache.skywalking.oap.server.core.source.oal.rt.dispatcher." + catalog;
    }

    private final String configFile;
    private final String sourcePackage;
    private final String dynamicMetricsClassPackage;
    private final String dynamicMetricsBuilderClassPackage;
    private final String dynamicDispatcherClassPackage;

    private String appendPoint(String classPackage) {
        if (classPackage.endsWith(Const.POINT)) {
            return classPackage;
        }
        return classPackage + Const.POINT;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getConfigFile() {
        return this.configFile;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourcePackage() {
        return this.sourcePackage;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDynamicMetricsClassPackage() {
        return this.dynamicMetricsClassPackage;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDynamicMetricsBuilderClassPackage() {
        return this.dynamicMetricsBuilderClassPackage;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDynamicDispatcherClassPackage() {
        return this.dynamicDispatcherClassPackage;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "OALDefine(configFile=" + this.getConfigFile() + ", sourcePackage=" + this.getSourcePackage() + ", dynamicMetricsClassPackage=" + this.getDynamicMetricsClassPackage() + ", dynamicMetricsBuilderClassPackage=" + this.getDynamicMetricsBuilderClassPackage() + ", dynamicDispatcherClassPackage=" + this.getDynamicDispatcherClassPackage() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof OALDefine)) return false;
        final OALDefine other = (OALDefine) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$configFile = this.getConfigFile();
        final java.lang.Object other$configFile = other.getConfigFile();
        if (this$configFile == null ? other$configFile != null : !this$configFile.equals(other$configFile)) return false;
        final java.lang.Object this$sourcePackage = this.getSourcePackage();
        final java.lang.Object other$sourcePackage = other.getSourcePackage();
        if (this$sourcePackage == null ? other$sourcePackage != null : !this$sourcePackage.equals(other$sourcePackage)) return false;
        final java.lang.Object this$dynamicMetricsClassPackage = this.getDynamicMetricsClassPackage();
        final java.lang.Object other$dynamicMetricsClassPackage = other.getDynamicMetricsClassPackage();
        if (this$dynamicMetricsClassPackage == null ? other$dynamicMetricsClassPackage != null : !this$dynamicMetricsClassPackage.equals(other$dynamicMetricsClassPackage)) return false;
        final java.lang.Object this$dynamicMetricsBuilderClassPackage = this.getDynamicMetricsBuilderClassPackage();
        final java.lang.Object other$dynamicMetricsBuilderClassPackage = other.getDynamicMetricsBuilderClassPackage();
        if (this$dynamicMetricsBuilderClassPackage == null ? other$dynamicMetricsBuilderClassPackage != null : !this$dynamicMetricsBuilderClassPackage.equals(other$dynamicMetricsBuilderClassPackage)) return false;
        final java.lang.Object this$dynamicDispatcherClassPackage = this.getDynamicDispatcherClassPackage();
        final java.lang.Object other$dynamicDispatcherClassPackage = other.getDynamicDispatcherClassPackage();
        if (this$dynamicDispatcherClassPackage == null ? other$dynamicDispatcherClassPackage != null : !this$dynamicDispatcherClassPackage.equals(other$dynamicDispatcherClassPackage)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof OALDefine;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $configFile = this.getConfigFile();
        result = result * PRIME + ($configFile == null ? 43 : $configFile.hashCode());
        final java.lang.Object $sourcePackage = this.getSourcePackage();
        result = result * PRIME + ($sourcePackage == null ? 43 : $sourcePackage.hashCode());
        final java.lang.Object $dynamicMetricsClassPackage = this.getDynamicMetricsClassPackage();
        result = result * PRIME + ($dynamicMetricsClassPackage == null ? 43 : $dynamicMetricsClassPackage.hashCode());
        final java.lang.Object $dynamicMetricsBuilderClassPackage = this.getDynamicMetricsBuilderClassPackage();
        result = result * PRIME + ($dynamicMetricsBuilderClassPackage == null ? 43 : $dynamicMetricsBuilderClassPackage.hashCode());
        final java.lang.Object $dynamicDispatcherClassPackage = this.getDynamicDispatcherClassPackage();
        result = result * PRIME + ($dynamicDispatcherClassPackage == null ? 43 : $dynamicDispatcherClassPackage.hashCode());
        return result;
    }
}
