// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.input;

import java.util.Objects;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import org.apache.skywalking.oap.server.core.query.enumeration.Scope;

/**
 * Entity represents the query entity, including service, instance, endpoint and conjecture service.
 *
 * @since 8.0.0
 */
public class Entity {
    /**
     * <pre>
     * 1. scope=All, no name is required.
     * 2. scope=Service, ServiceInstance and Endpoint, set necessary serviceName/serviceInstanceName/endpointName
     * 3. Scope=ServiceRelation, ServiceInstanceRelation and EndpointRelation
     *    serviceName/serviceInstanceName/endpointName is/are the source(s)
     *    estServiceName/destServiceInstanceName/destEndpointName is/are destination(s)
     *    set necessary names of sources and destinations.
     * </pre>
     *
     * @see MetricsCondition
     * @see RecordCondition
     * @see TopNCondition
     * @since 9.4.0 Scope could be sensed automatically through query condition's metric name.
     */
    private Scope scope;
    private String serviceName;
    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    private Boolean normal;
    private String serviceInstanceName;
    private String endpointName;
    private String processName;
    private String destServiceName;
    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    private Boolean destNormal;
    private String destServiceInstanceName;
    private String destEndpointName;
    private String destProcessName;

    public boolean isService() {
        return Scope.Service.equals(scope);
    }

    /**
     * @return true if the entity field is valid. The graphql definition couldn't provide the strict validation, because
     * the required fields are according to the scope.
     */
    public boolean isValid() {
        switch (scope) {
        case All: 
            return true;
        case Service: 
            return Objects.nonNull(serviceName) && Objects.nonNull(normal);
        case ServiceInstance: 
            return Objects.nonNull(serviceName) && Objects.nonNull(serviceInstanceName) && Objects.nonNull(normal);
        case Endpoint: 
            return Objects.nonNull(serviceName) && Objects.nonNull(endpointName) && Objects.nonNull(normal);
        case Process: 
            return Objects.nonNull(serviceName) && Objects.nonNull(serviceInstanceName) && Objects.nonNull(processName) && Objects.nonNull(normal);
        case ServiceRelation: 
            return Objects.nonNull(serviceName) && Objects.nonNull(destServiceName) && Objects.nonNull(normal) && Objects.nonNull(destNormal);
        case ServiceInstanceRelation: 
            return Objects.nonNull(serviceName) && Objects.nonNull(destServiceName) && Objects.nonNull(serviceInstanceName) && Objects.nonNull(destServiceInstanceName) && Objects.nonNull(normal) && Objects.nonNull(destNormal);
        case EndpointRelation: 
            return Objects.nonNull(serviceName) && Objects.nonNull(destServiceName) && Objects.nonNull(endpointName) && Objects.nonNull(destEndpointName) && Objects.nonNull(normal) && Objects.nonNull(destNormal);
        case ProcessRelation: 
            return Objects.nonNull(serviceName) && Objects.nonNull(destServiceName) && Objects.nonNull(serviceInstanceName) && Objects.nonNull(destServiceInstanceName) && Objects.nonNull(processName) && Objects.nonNull(destProcessName) && Objects.nonNull(normal) && Objects.nonNull(destNormal);
        default: 
            return false;
        }
    }

    /**
     * @return entity id based on the definition.
     */
    public String buildId() {
        switch (scope) {
        case All: 
            // This is unnecessary. Just for making core clear.
            return null;
        case Service: 
            return IDManager.ServiceID.buildId(serviceName, normal);
        case ServiceInstance: 
            return IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, normal), serviceInstanceName);
        case Endpoint: 
            return IDManager.EndpointID.buildId(IDManager.ServiceID.buildId(serviceName, normal), endpointName);
        case Process: 
            return IDManager.ProcessID.buildId(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, normal), serviceInstanceName), processName);
        case ServiceRelation: 
            return IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(serviceName, normal), IDManager.ServiceID.buildId(destServiceName, destNormal)));
        case ServiceInstanceRelation: 
            return IDManager.ServiceInstanceID.buildRelationId(new IDManager.ServiceInstanceID.ServiceInstanceRelationDefine(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, normal), serviceInstanceName), IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(destServiceName, destNormal), destServiceInstanceName)));
        case EndpointRelation: 
            return IDManager.EndpointID.buildRelationId(new IDManager.EndpointID.EndpointRelationDefine(IDManager.ServiceID.buildId(serviceName, normal), endpointName, IDManager.ServiceID.buildId(destServiceName, destNormal), destEndpointName));
        case ProcessRelation: 
            return IDManager.ProcessID.buildRelationId(new IDManager.ProcessID.ProcessRelationDefine(IDManager.ProcessID.buildId(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, normal), serviceInstanceName), processName), IDManager.ProcessID.buildId(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(destServiceName, destNormal), destServiceInstanceName), destProcessName)));
        default: 
            return null;
        }
    }

    /**
     * <pre>
     * 1. scope=All, no name is required.
     * 2. scope=Service, ServiceInstance and Endpoint, set necessary serviceName/serviceInstanceName/endpointName
     * 3. Scope=ServiceRelation, ServiceInstanceRelation and EndpointRelation
     *    serviceName/serviceInstanceName/endpointName is/are the source(s)
     *    estServiceName/destServiceInstanceName/destEndpointName is/are destination(s)
     *    set necessary names of sources and destinations.
     * </pre>
     *
     * @see MetricsCondition
     * @see RecordCondition
     * @see TopNCondition
     * @since 9.4.0 Scope could be sensed automatically through query condition's metric name.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setScope(final Scope scope) {
        this.scope = scope;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setNormal(final Boolean normal) {
        this.normal = normal;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceInstanceName(final String serviceInstanceName) {
        this.serviceInstanceName = serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndpointName(final String endpointName) {
        this.endpointName = endpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setProcessName(final String processName) {
        this.processName = processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceName(final String destServiceName) {
        this.destServiceName = destServiceName;
    }

    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestNormal(final Boolean destNormal) {
        this.destNormal = destNormal;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceInstanceName(final String destServiceInstanceName) {
        this.destServiceInstanceName = destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestEndpointName(final String destEndpointName) {
        this.destEndpointName = destEndpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestProcessName(final String destProcessName) {
        this.destProcessName = destProcessName;
    }

    /**
     * <pre>
     * 1. scope=All, no name is required.
     * 2. scope=Service, ServiceInstance and Endpoint, set necessary serviceName/serviceInstanceName/endpointName
     * 3. Scope=ServiceRelation, ServiceInstanceRelation and EndpointRelation
     *    serviceName/serviceInstanceName/endpointName is/are the source(s)
     *    estServiceName/destServiceInstanceName/destEndpointName is/are destination(s)
     *    set necessary names of sources and destinations.
     * </pre>
     *
     * @see MetricsCondition
     * @see RecordCondition
     * @see TopNCondition
     * @since 9.4.0 Scope could be sensed automatically through query condition's metric name.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Scope getScope() {
        return this.scope;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getNormal() {
        return this.normal;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceInstanceName() {
        return this.serviceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpointName() {
        return this.endpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessName() {
        return this.processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceName() {
        return this.destServiceName;
    }

    /**
     * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
     * conjectural service, usually detected by the agent.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Boolean getDestNormal() {
        return this.destNormal;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceInstanceName() {
        return this.destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestEndpointName() {
        return this.destEndpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestProcessName() {
        return this.destProcessName;
    }
}
