// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query;

import org.apache.skywalking.oap.server.core.query.type.Pagination;

public enum PaginationUtils {
    INSTANCE;

    public Page exchange(Pagination paging) {
        int limit = paging.getPageSize();
        int from = paging.getPageSize() * ((paging.getPageNum() == 0 ? 1 : paging.getPageNum()) - 1);
        return new Page(from, limit);
    }


    public static class Page {
        private final int from;
        private final int limit;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getFrom() {
            return this.from;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getLimit() {
            return this.limit;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof PaginationUtils.Page)) return false;
            final PaginationUtils.Page other = (PaginationUtils.Page) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getFrom() != other.getFrom()) return false;
            if (this.getLimit() != other.getLimit()) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof PaginationUtils.Page;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getFrom();
            result = result * PRIME + this.getLimit();
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "PaginationUtils.Page(from=" + this.getFrom() + ", limit=" + this.getLimit() + ")";
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Page(final int from, final int limit) {
            this.from = from;
            this.limit = limit;
        }
    }
}
