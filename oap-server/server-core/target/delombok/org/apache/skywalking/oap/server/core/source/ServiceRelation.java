// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.source;

import org.apache.skywalking.oap.server.core.analysis.Layer;
import org.apache.skywalking.oap.server.library.util.StringUtil;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_RELATION;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_RELATION_CATALOG_NAME;

@ScopeDeclaration(id = SERVICE_RELATION, name = "ServiceRelation", catalog = SERVICE_RELATION_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class ServiceRelation extends Source {
    private String entityId;

    @Override
    public int scope() {
        return DefaultScopeDefine.SERVICE_RELATION;
    }

    @Override
    public String getEntityId() {
        if (StringUtil.isEmpty(entityId)) {
            entityId = IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId, destServiceId));
        }
        return entityId;
    }

    private String sourceServiceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "source_name", requireDynamicActive = true)
    private String sourceServiceName;
    private String sourceServiceInstanceName;
    private Layer sourceLayer;
    private String destServiceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "dest_name", requireDynamicActive = true)
    private String destServiceName;
    private Layer destLayer;
    private String destServiceInstanceName;
    private String endpoint;
    private int componentId;
    private int latency;
    private boolean status;
    private int httpResponseStatusCode;
    private String rpcStatusCode;
    private RequestType type;
    private DetectPoint detectPoint;
    private String tlsMode;
    private SideCar sideCar = new SideCar();

    @Override
    public void prepare() {
        sourceServiceId = IDManager.ServiceID.buildId(sourceServiceName, sourceLayer.isNormal());
        destServiceId = IDManager.ServiceID.buildId(destServiceName, destLayer.isNormal());
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceServiceId() {
        return this.sourceServiceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceServiceName() {
        return this.sourceServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSourceServiceName(final String sourceServiceName) {
        this.sourceServiceName = sourceServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceServiceInstanceName() {
        return this.sourceServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSourceServiceInstanceName(final String sourceServiceInstanceName) {
        this.sourceServiceInstanceName = sourceServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getSourceLayer() {
        return this.sourceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSourceLayer(final Layer sourceLayer) {
        this.sourceLayer = sourceLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceId() {
        return this.destServiceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceName() {
        return this.destServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceName(final String destServiceName) {
        this.destServiceName = destServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getDestLayer() {
        return this.destLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestLayer(final Layer destLayer) {
        this.destLayer = destLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceInstanceName() {
        return this.destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceInstanceName(final String destServiceInstanceName) {
        this.destServiceInstanceName = destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndpoint(final String endpoint) {
        this.endpoint = endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getComponentId() {
        return this.componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setComponentId(final int componentId) {
        this.componentId = componentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getLatency() {
        return this.latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLatency(final int latency) {
        this.latency = latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStatus(final boolean status) {
        this.status = status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getHttpResponseStatusCode() {
        return this.httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHttpResponseStatusCode(final int httpResponseStatusCode) {
        this.httpResponseStatusCode = httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRpcStatusCode() {
        return this.rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRpcStatusCode(final String rpcStatusCode) {
        this.rpcStatusCode = rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public RequestType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final RequestType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DetectPoint getDetectPoint() {
        return this.detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDetectPoint(final DetectPoint detectPoint) {
        this.detectPoint = detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTlsMode() {
        return this.tlsMode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTlsMode(final String tlsMode) {
        this.tlsMode = tlsMode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SideCar getSideCar() {
        return this.sideCar;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSideCar(final SideCar sideCar) {
        this.sideCar = sideCar;
    }
}
