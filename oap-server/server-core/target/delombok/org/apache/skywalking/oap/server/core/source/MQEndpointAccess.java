// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements.  See the NOTICE file distributed with
 *   this work for additional information regarding copyright ownership.
 *   The ASF licenses this file to You under the Apache License, Version 2.0
 *   (the "License"); you may not use this file except in compliance with
 *   the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.apache.skywalking.oap.server.core.source;

import org.apache.skywalking.oap.server.core.analysis.IDManager;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.MESSAGE_QUEUE_ENDPOINT_ACCESS;

@ScopeDeclaration(id = MESSAGE_QUEUE_ENDPOINT_ACCESS, name = "MQEndpointAccess", catalog = ENDPOINT_CATALOG_NAME)
@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
public class MQEndpointAccess extends Source {
    @Override
    public int scope() {
        return MESSAGE_QUEUE_ENDPOINT_ACCESS;
    }

    @Override
    public String getEntityId() {
        if (entityId == null) {
            entityId = IDManager.EndpointID.buildId(serviceId, endpoint);
        }
        return entityId;
    }

    private String entityId;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
    private String serviceId;
    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
    private String serviceName;
    @ScopeDefaultColumn.DefinedByField(columnName = "endpoint", requireDynamicActive = true)
    private String endpoint;
    private int typeId;
    private long transmissionLatency;
    private boolean status;
    private MQOperation operation;

    @Override
    public void prepare() {
        this.serviceId = IDManager.ServiceID.buildId(serviceName, false);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceName(final String serviceName) {
        this.serviceName = serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEndpoint(final String endpoint) {
        this.endpoint = endpoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTypeId() {
        return this.typeId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTypeId(final int typeId) {
        this.typeId = typeId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTransmissionLatency() {
        return this.transmissionLatency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTransmissionLatency(final long transmissionLatency) {
        this.transmissionLatency = transmissionLatency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStatus(final boolean status) {
        this.status = status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MQOperation getOperation() {
        return this.operation;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setOperation(final MQOperation operation) {
        this.operation = operation;
    }
}
