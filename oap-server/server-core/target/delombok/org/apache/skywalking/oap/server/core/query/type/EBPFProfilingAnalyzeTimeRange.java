// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

/**
 * eBPF Profiling analysis the time range for query
 */
public class EBPFProfilingAnalyzeTimeRange {
    // start timestamp
    private long start;
    // end timestamp
    private long end;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingAnalyzeTimeRange() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getStart() {
        return this.start;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getEnd() {
        return this.end;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStart(final long start) {
        this.start = start;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnd(final long end) {
        this.end = end;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingAnalyzeTimeRange)) return false;
        final EBPFProfilingAnalyzeTimeRange other = (EBPFProfilingAnalyzeTimeRange) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getStart() != other.getStart()) return false;
        if (this.getEnd() != other.getEnd()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingAnalyzeTimeRange;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $start = this.getStart();
        result = result * PRIME + (int) ($start >>> 32 ^ $start);
        final long $end = this.getEnd();
        result = result * PRIME + (int) ($end >>> 32 ^ $end);
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingAnalyzeTimeRange(start=" + this.getStart() + ", end=" + this.getEnd() + ")";
    }
}
