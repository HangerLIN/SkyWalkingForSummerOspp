// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.analysis.meter;

import java.util.Map;
import org.apache.skywalking.oap.server.core.UnexpectedException;
import org.apache.skywalking.oap.server.core.analysis.IDManager;
import org.apache.skywalking.oap.server.core.analysis.Layer;
import org.apache.skywalking.oap.server.core.config.NamingControl;
import org.apache.skywalking.oap.server.core.source.DetectPoint;

/**
 * MeterEntity represents the entity in the meter system.
 */
public class MeterEntity {
    private static NamingControl NAMING_CONTROL;
    private ScopeType scopeType;
    private String serviceName;
    private String instanceName;
    private Map<String, String> instanceProperties;
    private String endpointName;
    private String processName;
    private String sourceServiceName;
    private String destServiceName;
    private String sourceProcessId;
    private String destProcessId;
    private DetectPoint detectPoint;
    private Layer layer;
    private int componentId;

    private MeterEntity() {
    }

    public String id() {
        switch (scopeType) {
        case SERVICE: 
            // In Meter system, only normal service, because we don't conjecture any node.
            return IDManager.ServiceID.buildId(serviceName, true);
        case SERVICE_INSTANCE: 
            return IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, true), instanceName);
        case ENDPOINT: 
            return IDManager.EndpointID.buildId(IDManager.ServiceID.buildId(serviceName, true), endpointName);
        case PROCESS: 
            return IDManager.ProcessID.buildId(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(serviceName, true), instanceName), processName);
        case SERVICE_RELATION: 
            return IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId(), destServiceId()));
        case PROCESS_RELATION: 
            return IDManager.ProcessID.buildRelationId(new IDManager.ProcessID.ProcessRelationDefine(sourceProcessId, destProcessId));
        default: 
            throw new UnexpectedException("Unexpected scope type of entity " + this.toString());
        }
    }

    public String serviceId() {
        return IDManager.ServiceID.buildId(serviceName, true);
    }

    public String serviceInstanceId() {
        return IDManager.ServiceInstanceID.buildId(serviceId(), instanceName);
    }

    public String sourceServiceId() {
        return IDManager.ServiceID.buildId(sourceServiceName, true);
    }

    public String destServiceId() {
        return IDManager.ServiceID.buildId(destServiceName, true);
    }

    public static void setNamingControl(final NamingControl namingControl) {
        NAMING_CONTROL = namingControl;
    }

    public void setServiceName(final String serviceName) {
        this.serviceName = NAMING_CONTROL.formatServiceName(serviceName);
    }

    /**
     * Create a service level meter entity.
     */
    public static MeterEntity newService(String serviceName, Layer layer) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.SERVICE;
        meterEntity.serviceName = NAMING_CONTROL.formatServiceName(serviceName);
        meterEntity.layer = layer;
        return meterEntity;
    }

    /**
     * Create a service instance level meter entity.
     */
    public static MeterEntity newServiceInstance(String serviceName, String serviceInstance, Layer layer, Map<String, String> properties) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.SERVICE_INSTANCE;
        meterEntity.serviceName = NAMING_CONTROL.formatServiceName(serviceName);
        meterEntity.instanceName = NAMING_CONTROL.formatInstanceName(serviceInstance);
        meterEntity.instanceProperties = properties;
        meterEntity.layer = layer;
        return meterEntity;
    }

    /**
     * Create an endpoint level meter entity.
     */
    public static MeterEntity newEndpoint(String serviceName, String endpointName, Layer layer) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.ENDPOINT;
        meterEntity.serviceName = NAMING_CONTROL.formatServiceName(serviceName);
        meterEntity.endpointName = NAMING_CONTROL.formatEndpointName(serviceName, endpointName);
        meterEntity.layer = layer;
        return meterEntity;
    }

    public static MeterEntity newProcess(String serviceName, String instanceName, String processName, String layerName) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.PROCESS;
        meterEntity.serviceName = NAMING_CONTROL.formatServiceName(serviceName);
        meterEntity.instanceName = NAMING_CONTROL.formatInstanceName(instanceName);
        meterEntity.processName = processName;
        meterEntity.layer = Layer.nameOf(layerName);
        return meterEntity;
    }

    public static MeterEntity newServiceRelation(String sourceServiceName, String destServiceName, DetectPoint detectPoint, Layer layer, int componentId) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.SERVICE_RELATION;
        meterEntity.sourceServiceName = NAMING_CONTROL.formatServiceName(sourceServiceName);
        meterEntity.destServiceName = NAMING_CONTROL.formatServiceName(destServiceName);
        meterEntity.detectPoint = detectPoint;
        meterEntity.layer = layer;
        meterEntity.componentId = componentId;
        return meterEntity;
    }

    public static MeterEntity newProcessRelation(String serviceName, String instanceName, String sourceProcessId, String destProcessId, int componentId, DetectPoint detectPoint) {
        final MeterEntity meterEntity = new MeterEntity();
        meterEntity.scopeType = ScopeType.PROCESS_RELATION;
        meterEntity.serviceName = serviceName;
        meterEntity.instanceName = instanceName;
        meterEntity.sourceProcessId = sourceProcessId;
        meterEntity.destProcessId = destProcessId;
        meterEntity.componentId = componentId;
        meterEntity.detectPoint = detectPoint;
        return meterEntity;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MeterEntity)) return false;
        final MeterEntity other = (MeterEntity) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getComponentId() != other.getComponentId()) return false;
        final java.lang.Object this$scopeType = this.getScopeType();
        final java.lang.Object other$scopeType = other.getScopeType();
        if (this$scopeType == null ? other$scopeType != null : !this$scopeType.equals(other$scopeType)) return false;
        final java.lang.Object this$serviceName = this.getServiceName();
        final java.lang.Object other$serviceName = other.getServiceName();
        if (this$serviceName == null ? other$serviceName != null : !this$serviceName.equals(other$serviceName)) return false;
        final java.lang.Object this$instanceName = this.getInstanceName();
        final java.lang.Object other$instanceName = other.getInstanceName();
        if (this$instanceName == null ? other$instanceName != null : !this$instanceName.equals(other$instanceName)) return false;
        final java.lang.Object this$instanceProperties = this.getInstanceProperties();
        final java.lang.Object other$instanceProperties = other.getInstanceProperties();
        if (this$instanceProperties == null ? other$instanceProperties != null : !this$instanceProperties.equals(other$instanceProperties)) return false;
        final java.lang.Object this$endpointName = this.getEndpointName();
        final java.lang.Object other$endpointName = other.getEndpointName();
        if (this$endpointName == null ? other$endpointName != null : !this$endpointName.equals(other$endpointName)) return false;
        final java.lang.Object this$processName = this.getProcessName();
        final java.lang.Object other$processName = other.getProcessName();
        if (this$processName == null ? other$processName != null : !this$processName.equals(other$processName)) return false;
        final java.lang.Object this$sourceServiceName = this.getSourceServiceName();
        final java.lang.Object other$sourceServiceName = other.getSourceServiceName();
        if (this$sourceServiceName == null ? other$sourceServiceName != null : !this$sourceServiceName.equals(other$sourceServiceName)) return false;
        final java.lang.Object this$destServiceName = this.getDestServiceName();
        final java.lang.Object other$destServiceName = other.getDestServiceName();
        if (this$destServiceName == null ? other$destServiceName != null : !this$destServiceName.equals(other$destServiceName)) return false;
        final java.lang.Object this$sourceProcessId = this.getSourceProcessId();
        final java.lang.Object other$sourceProcessId = other.getSourceProcessId();
        if (this$sourceProcessId == null ? other$sourceProcessId != null : !this$sourceProcessId.equals(other$sourceProcessId)) return false;
        final java.lang.Object this$destProcessId = this.getDestProcessId();
        final java.lang.Object other$destProcessId = other.getDestProcessId();
        if (this$destProcessId == null ? other$destProcessId != null : !this$destProcessId.equals(other$destProcessId)) return false;
        final java.lang.Object this$detectPoint = this.getDetectPoint();
        final java.lang.Object other$detectPoint = other.getDetectPoint();
        if (this$detectPoint == null ? other$detectPoint != null : !this$detectPoint.equals(other$detectPoint)) return false;
        final java.lang.Object this$layer = this.getLayer();
        final java.lang.Object other$layer = other.getLayer();
        if (this$layer == null ? other$layer != null : !this$layer.equals(other$layer)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MeterEntity;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getComponentId();
        final java.lang.Object $scopeType = this.getScopeType();
        result = result * PRIME + ($scopeType == null ? 43 : $scopeType.hashCode());
        final java.lang.Object $serviceName = this.getServiceName();
        result = result * PRIME + ($serviceName == null ? 43 : $serviceName.hashCode());
        final java.lang.Object $instanceName = this.getInstanceName();
        result = result * PRIME + ($instanceName == null ? 43 : $instanceName.hashCode());
        final java.lang.Object $instanceProperties = this.getInstanceProperties();
        result = result * PRIME + ($instanceProperties == null ? 43 : $instanceProperties.hashCode());
        final java.lang.Object $endpointName = this.getEndpointName();
        result = result * PRIME + ($endpointName == null ? 43 : $endpointName.hashCode());
        final java.lang.Object $processName = this.getProcessName();
        result = result * PRIME + ($processName == null ? 43 : $processName.hashCode());
        final java.lang.Object $sourceServiceName = this.getSourceServiceName();
        result = result * PRIME + ($sourceServiceName == null ? 43 : $sourceServiceName.hashCode());
        final java.lang.Object $destServiceName = this.getDestServiceName();
        result = result * PRIME + ($destServiceName == null ? 43 : $destServiceName.hashCode());
        final java.lang.Object $sourceProcessId = this.getSourceProcessId();
        result = result * PRIME + ($sourceProcessId == null ? 43 : $sourceProcessId.hashCode());
        final java.lang.Object $destProcessId = this.getDestProcessId();
        result = result * PRIME + ($destProcessId == null ? 43 : $destProcessId.hashCode());
        final java.lang.Object $detectPoint = this.getDetectPoint();
        result = result * PRIME + ($detectPoint == null ? 43 : $detectPoint.hashCode());
        final java.lang.Object $layer = this.getLayer();
        result = result * PRIME + ($layer == null ? 43 : $layer.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MeterEntity(scopeType=" + this.getScopeType() + ", serviceName=" + this.getServiceName() + ", instanceName=" + this.getInstanceName() + ", instanceProperties=" + this.getInstanceProperties() + ", endpointName=" + this.getEndpointName() + ", processName=" + this.getProcessName() + ", sourceServiceName=" + this.getSourceServiceName() + ", destServiceName=" + this.getDestServiceName() + ", sourceProcessId=" + this.getSourceProcessId() + ", destProcessId=" + this.getDestProcessId() + ", detectPoint=" + this.getDetectPoint() + ", layer=" + this.getLayer() + ", componentId=" + this.getComponentId() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScopeType getScopeType() {
        return this.scopeType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceName() {
        return this.serviceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getInstanceName() {
        return this.instanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, String> getInstanceProperties() {
        return this.instanceProperties;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getEndpointName() {
        return this.endpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getProcessName() {
        return this.processName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceServiceName() {
        return this.sourceServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceName() {
        return this.destServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSourceProcessId() {
        return this.sourceProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestProcessId() {
        return this.destProcessId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DetectPoint getDetectPoint() {
        return this.detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getLayer() {
        return this.layer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getComponentId() {
        return this.componentId;
    }
}
