// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.skywalking.oap.server.core.browser.source;

import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
import org.apache.skywalking.oap.server.core.source.Source;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_ERROR_LOG;

/**
 * Browser error log raw data
 */
@ScopeDeclaration(id = BROWSER_ERROR_LOG, name = "BrowserErrorLog")
public class BrowserErrorLog extends Source {
    @Override
    public int scope() {
        return BROWSER_ERROR_LOG;
    }

    @Override
    public String getEntityId() {
        return uniqueId;
    }

    private String uniqueId;
    private String serviceId;
    private String serviceVersionId;
    private String pagePathId;
    private long timestamp;
    private BrowserErrorCategory errorCategory;
    private byte[] dataBinary;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getUniqueId() {
        return this.uniqueId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUniqueId(final String uniqueId) {
        this.uniqueId = uniqueId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceId() {
        return this.serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceId(final String serviceId) {
        this.serviceId = serviceId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getServiceVersionId() {
        return this.serviceVersionId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setServiceVersionId(final String serviceVersionId) {
        this.serviceVersionId = serviceVersionId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getPagePathId() {
        return this.pagePathId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPagePathId(final String pagePathId) {
        this.pagePathId = pagePathId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTimestamp() {
        return this.timestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimestamp(final long timestamp) {
        this.timestamp = timestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BrowserErrorCategory getErrorCategory() {
        return this.errorCategory;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setErrorCategory(final BrowserErrorCategory errorCategory) {
        this.errorCategory = errorCategory;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public byte[] getDataBinary() {
        return this.dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDataBinary(final byte[] dataBinary) {
        this.dataBinary = dataBinary;
    }
}
