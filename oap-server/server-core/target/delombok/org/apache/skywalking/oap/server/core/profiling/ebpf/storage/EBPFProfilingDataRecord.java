// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.profiling.ebpf.storage;

import com.google.common.base.Charsets;
import com.google.common.hash.Hashing;
import org.apache.skywalking.oap.server.core.analysis.Stream;
import org.apache.skywalking.oap.server.core.analysis.record.Record;
import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
import org.apache.skywalking.oap.server.core.storage.StorageID;
import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
import org.apache.skywalking.oap.server.core.storage.annotation.Column;
import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.EBPF_PROFILING_DATA;

/**
 * eBPF profiling reported data from the eBPF agent side
 */
@Stream(name = EBPFProfilingDataRecord.INDEX_NAME, scopeId = EBPF_PROFILING_DATA, builder = EBPFProfilingDataRecord.Builder.class, processor = RecordStreamProcessor.class)
@BanyanDB.TimestampColumn(EBPFProfilingDataRecord.UPLOAD_TIME)
public class EBPFProfilingDataRecord extends Record {
    public static final String INDEX_NAME = "ebpf_profiling_data";
    public static final String SCHEDULE_ID = "schedule_id";
    public static final String TASK_ID = "task_id";
    public static final String STACK_ID_LIST = "stack_id";
    public static final String TARGET_TYPE = "target_type";
    public static final String DATA_BINARY = "dump_binary";
    public static final String UPLOAD_TIME = "upload_time";
    @Column(name = TASK_ID)
    @BanyanDB.SeriesID(index = 0)
    private String taskId;
    @Column(name = SCHEDULE_ID)
    private String scheduleId;
    @Column(name = STACK_ID_LIST)
    private String stackIdList;
    @Column(name = TARGET_TYPE)
    private int targetType;
    @Column(name = DATA_BINARY, storageOnly = true)
    private byte[] dataBinary;
    @Column(name = UPLOAD_TIME)
    private long uploadTime;

    @Override
    public StorageID id() {
        return new StorageID().appendMutant(new String[] {SCHEDULE_ID, STACK_ID_LIST, UPLOAD_TIME}, Hashing.sha256().newHasher().putString(scheduleId, Charsets.UTF_8).putString(stackIdList, Charsets.UTF_8).putLong(uploadTime).hash().toString());
    }


    public static class Builder implements StorageBuilder<EBPFProfilingDataRecord> {
        @Override
        public EBPFProfilingDataRecord storage2Entity(final Convert2Entity converter) {
            final EBPFProfilingDataRecord dataTraffic = new EBPFProfilingDataRecord();
            dataTraffic.setScheduleId((String) converter.get(SCHEDULE_ID));
            dataTraffic.setTaskId((String) converter.get(TASK_ID));
            dataTraffic.setStackIdList((String) converter.get(STACK_ID_LIST));
            dataTraffic.setTargetType(((Number) converter.get(TARGET_TYPE)).intValue());
            dataTraffic.setDataBinary(converter.getBytes(DATA_BINARY));
            dataTraffic.setUploadTime(((Number) converter.get(UPLOAD_TIME)).longValue());
            dataTraffic.setTimeBucket(((Number) converter.get(TIME_BUCKET)).longValue());
            return dataTraffic;
        }

        @Override
        public void entity2Storage(final EBPFProfilingDataRecord storageData, final Convert2Storage converter) {
            converter.accept(SCHEDULE_ID, storageData.getScheduleId());
            converter.accept(TASK_ID, storageData.getTaskId());
            converter.accept(STACK_ID_LIST, storageData.getStackIdList());
            converter.accept(TARGET_TYPE, storageData.getTargetType());
            converter.accept(DATA_BINARY, storageData.getDataBinary());
            converter.accept(UPLOAD_TIME, storageData.getUploadTime());
            converter.accept(TIME_BUCKET, storageData.getTimeBucket());
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingDataRecord() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTaskId() {
        return this.taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getScheduleId() {
        return this.scheduleId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getStackIdList() {
        return this.stackIdList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTargetType() {
        return this.targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public byte[] getDataBinary() {
        return this.dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getUploadTime() {
        return this.uploadTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaskId(final String taskId) {
        this.taskId = taskId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setScheduleId(final String scheduleId) {
        this.scheduleId = scheduleId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStackIdList(final String stackIdList) {
        this.stackIdList = stackIdList;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTargetType(final int targetType) {
        this.targetType = targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDataBinary(final byte[] dataBinary) {
        this.dataBinary = dataBinary;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUploadTime(final long uploadTime) {
        this.uploadTime = uploadTime;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingDataRecord)) return false;
        final EBPFProfilingDataRecord other = (EBPFProfilingDataRecord) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getTargetType() != other.getTargetType()) return false;
        if (this.getUploadTime() != other.getUploadTime()) return false;
        final java.lang.Object this$taskId = this.getTaskId();
        final java.lang.Object other$taskId = other.getTaskId();
        if (this$taskId == null ? other$taskId != null : !this$taskId.equals(other$taskId)) return false;
        final java.lang.Object this$scheduleId = this.getScheduleId();
        final java.lang.Object other$scheduleId = other.getScheduleId();
        if (this$scheduleId == null ? other$scheduleId != null : !this$scheduleId.equals(other$scheduleId)) return false;
        final java.lang.Object this$stackIdList = this.getStackIdList();
        final java.lang.Object other$stackIdList = other.getStackIdList();
        if (this$stackIdList == null ? other$stackIdList != null : !this$stackIdList.equals(other$stackIdList)) return false;
        if (!java.util.Arrays.equals(this.getDataBinary(), other.getDataBinary())) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingDataRecord;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getTargetType();
        final long $uploadTime = this.getUploadTime();
        result = result * PRIME + (int) ($uploadTime >>> 32 ^ $uploadTime);
        final java.lang.Object $taskId = this.getTaskId();
        result = result * PRIME + ($taskId == null ? 43 : $taskId.hashCode());
        final java.lang.Object $scheduleId = this.getScheduleId();
        result = result * PRIME + ($scheduleId == null ? 43 : $scheduleId.hashCode());
        final java.lang.Object $stackIdList = this.getStackIdList();
        result = result * PRIME + ($stackIdList == null ? 43 : $stackIdList.hashCode());
        result = result * PRIME + java.util.Arrays.hashCode(this.getDataBinary());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingDataRecord(taskId=" + this.getTaskId() + ", scheduleId=" + this.getScheduleId() + ", stackIdList=" + this.getStackIdList() + ", targetType=" + this.getTargetType() + ", dataBinary=" + java.util.Arrays.toString(this.getDataBinary()) + ", uploadTime=" + this.getUploadTime() + ")";
    }
}
