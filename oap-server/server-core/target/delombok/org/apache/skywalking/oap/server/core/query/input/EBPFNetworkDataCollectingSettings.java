// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.input;

public class EBPFNetworkDataCollectingSettings {
    // Require to collect the complete request
    private boolean requireCompleteRequest;
    // The max size of request context. The unit is byte.
    // Collect the whole request header and body if this is not set.
    private Integer maxRequestSize;
    // Require to collect the complete response
    private boolean requireCompleteResponse;
    // The max size of response context. The unit is byte.
    // Collect the whole response header and body if this is not set.
    private Integer maxResponseSize;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isRequireCompleteRequest() {
        return this.requireCompleteRequest;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getMaxRequestSize() {
        return this.maxRequestSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isRequireCompleteResponse() {
        return this.requireCompleteResponse;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Integer getMaxResponseSize() {
        return this.maxResponseSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRequireCompleteRequest(final boolean requireCompleteRequest) {
        this.requireCompleteRequest = requireCompleteRequest;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxRequestSize(final Integer maxRequestSize) {
        this.maxRequestSize = maxRequestSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRequireCompleteResponse(final boolean requireCompleteResponse) {
        this.requireCompleteResponse = requireCompleteResponse;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxResponseSize(final Integer maxResponseSize) {
        this.maxResponseSize = maxResponseSize;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFNetworkDataCollectingSettings)) return false;
        final EBPFNetworkDataCollectingSettings other = (EBPFNetworkDataCollectingSettings) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isRequireCompleteRequest() != other.isRequireCompleteRequest()) return false;
        if (this.isRequireCompleteResponse() != other.isRequireCompleteResponse()) return false;
        final java.lang.Object this$maxRequestSize = this.getMaxRequestSize();
        final java.lang.Object other$maxRequestSize = other.getMaxRequestSize();
        if (this$maxRequestSize == null ? other$maxRequestSize != null : !this$maxRequestSize.equals(other$maxRequestSize)) return false;
        final java.lang.Object this$maxResponseSize = this.getMaxResponseSize();
        final java.lang.Object other$maxResponseSize = other.getMaxResponseSize();
        if (this$maxResponseSize == null ? other$maxResponseSize != null : !this$maxResponseSize.equals(other$maxResponseSize)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFNetworkDataCollectingSettings;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isRequireCompleteRequest() ? 79 : 97);
        result = result * PRIME + (this.isRequireCompleteResponse() ? 79 : 97);
        final java.lang.Object $maxRequestSize = this.getMaxRequestSize();
        result = result * PRIME + ($maxRequestSize == null ? 43 : $maxRequestSize.hashCode());
        final java.lang.Object $maxResponseSize = this.getMaxResponseSize();
        result = result * PRIME + ($maxResponseSize == null ? 43 : $maxResponseSize.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFNetworkDataCollectingSettings(requireCompleteRequest=" + this.isRequireCompleteRequest() + ", maxRequestSize=" + this.getMaxRequestSize() + ", requireCompleteResponse=" + this.isRequireCompleteResponse() + ", maxResponseSize=" + this.getMaxResponseSize() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFNetworkDataCollectingSettings(final boolean requireCompleteRequest, final Integer maxRequestSize, final boolean requireCompleteResponse, final Integer maxResponseSize) {
        this.requireCompleteRequest = requireCompleteRequest;
        this.maxRequestSize = maxRequestSize;
        this.requireCompleteResponse = requireCompleteResponse;
        this.maxResponseSize = maxResponseSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFNetworkDataCollectingSettings() {
    }
}
