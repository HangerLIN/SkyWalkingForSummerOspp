// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.input;

import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;

public class SegmentProfileAnalyzeQuery {
    private String segmentId;
    private ProfileAnalyzeTimeRange timeRange;


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class SegmentProfileAnalyzeQueryBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String segmentId;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ProfileAnalyzeTimeRange timeRange;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        SegmentProfileAnalyzeQueryBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SegmentProfileAnalyzeQuery.SegmentProfileAnalyzeQueryBuilder segmentId(final String segmentId) {
            this.segmentId = segmentId;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SegmentProfileAnalyzeQuery.SegmentProfileAnalyzeQueryBuilder timeRange(final ProfileAnalyzeTimeRange timeRange) {
            this.timeRange = timeRange;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SegmentProfileAnalyzeQuery build() {
            return new SegmentProfileAnalyzeQuery(this.segmentId, this.timeRange);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "SegmentProfileAnalyzeQuery.SegmentProfileAnalyzeQueryBuilder(segmentId=" + this.segmentId + ", timeRange=" + this.timeRange + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static SegmentProfileAnalyzeQuery.SegmentProfileAnalyzeQueryBuilder builder() {
        return new SegmentProfileAnalyzeQuery.SegmentProfileAnalyzeQueryBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSegmentId() {
        return this.segmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ProfileAnalyzeTimeRange getTimeRange() {
        return this.timeRange;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSegmentId(final String segmentId) {
        this.segmentId = segmentId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimeRange(final ProfileAnalyzeTimeRange timeRange) {
        this.timeRange = timeRange;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SegmentProfileAnalyzeQuery)) return false;
        final SegmentProfileAnalyzeQuery other = (SegmentProfileAnalyzeQuery) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$segmentId = this.getSegmentId();
        final java.lang.Object other$segmentId = other.getSegmentId();
        if (this$segmentId == null ? other$segmentId != null : !this$segmentId.equals(other$segmentId)) return false;
        final java.lang.Object this$timeRange = this.getTimeRange();
        final java.lang.Object other$timeRange = other.getTimeRange();
        if (this$timeRange == null ? other$timeRange != null : !this$timeRange.equals(other$timeRange)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SegmentProfileAnalyzeQuery;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $segmentId = this.getSegmentId();
        result = result * PRIME + ($segmentId == null ? 43 : $segmentId.hashCode());
        final java.lang.Object $timeRange = this.getTimeRange();
        result = result * PRIME + ($timeRange == null ? 43 : $timeRange.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "SegmentProfileAnalyzeQuery(segmentId=" + this.getSegmentId() + ", timeRange=" + this.getTimeRange() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SegmentProfileAnalyzeQuery(final String segmentId, final ProfileAnalyzeTimeRange timeRange) {
        this.segmentId = segmentId;
        this.timeRange = timeRange;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SegmentProfileAnalyzeQuery() {
    }
}
