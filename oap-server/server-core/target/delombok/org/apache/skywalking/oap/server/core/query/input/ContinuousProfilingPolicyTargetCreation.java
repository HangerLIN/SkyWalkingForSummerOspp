// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.input;

import org.apache.skywalking.oap.server.core.profiling.continuous.storage.ContinuousProfilingTargetType;
import java.util.List;

public class ContinuousProfilingPolicyTargetCreation {
    // policy profiling target
    private ContinuousProfilingTargetType targetType;
    // target check thresholds
    private List<ContinuousProfilingPolicyItemCreation> checkItems;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingPolicyTargetCreation() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingTargetType getTargetType() {
        return this.targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ContinuousProfilingPolicyItemCreation> getCheckItems() {
        return this.checkItems;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTargetType(final ContinuousProfilingTargetType targetType) {
        this.targetType = targetType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCheckItems(final List<ContinuousProfilingPolicyItemCreation> checkItems) {
        this.checkItems = checkItems;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ContinuousProfilingPolicyTargetCreation)) return false;
        final ContinuousProfilingPolicyTargetCreation other = (ContinuousProfilingPolicyTargetCreation) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$targetType = this.getTargetType();
        final java.lang.Object other$targetType = other.getTargetType();
        if (this$targetType == null ? other$targetType != null : !this$targetType.equals(other$targetType)) return false;
        final java.lang.Object this$checkItems = this.getCheckItems();
        final java.lang.Object other$checkItems = other.getCheckItems();
        if (this$checkItems == null ? other$checkItems != null : !this$checkItems.equals(other$checkItems)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ContinuousProfilingPolicyTargetCreation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $targetType = this.getTargetType();
        result = result * PRIME + ($targetType == null ? 43 : $targetType.hashCode());
        final java.lang.Object $checkItems = this.getCheckItems();
        result = result * PRIME + ($checkItems == null ? 43 : $checkItems.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ContinuousProfilingPolicyTargetCreation(targetType=" + this.getTargetType() + ", checkItems=" + this.getCheckItems() + ")";
    }
}
