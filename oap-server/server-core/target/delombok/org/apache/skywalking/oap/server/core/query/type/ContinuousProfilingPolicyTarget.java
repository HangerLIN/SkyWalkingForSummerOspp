// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.query.type;

import org.apache.skywalking.oap.server.core.profiling.continuous.storage.ContinuousProfilingTargetType;
import java.util.List;

public class ContinuousProfilingPolicyTarget {
    private ContinuousProfilingTargetType type;
    private List<ContinuousProfilingPolicyItem> checkItems;
    private int triggeredCount;
    private Long lastTriggerTimestamp;


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class ContinuousProfilingPolicyTargetBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ContinuousProfilingTargetType type;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private List<ContinuousProfilingPolicyItem> checkItems;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int triggeredCount;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Long lastTriggerTimestamp;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        ContinuousProfilingPolicyTargetBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder type(final ContinuousProfilingTargetType type) {
            this.type = type;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder checkItems(final List<ContinuousProfilingPolicyItem> checkItems) {
            this.checkItems = checkItems;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder triggeredCount(final int triggeredCount) {
            this.triggeredCount = triggeredCount;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder lastTriggerTimestamp(final Long lastTriggerTimestamp) {
            this.lastTriggerTimestamp = lastTriggerTimestamp;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ContinuousProfilingPolicyTarget build() {
            return new ContinuousProfilingPolicyTarget(this.type, this.checkItems, this.triggeredCount, this.lastTriggerTimestamp);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder(type=" + this.type + ", checkItems=" + this.checkItems + ", triggeredCount=" + this.triggeredCount + ", lastTriggerTimestamp=" + this.lastTriggerTimestamp + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder builder() {
        return new ContinuousProfilingPolicyTarget.ContinuousProfilingPolicyTargetBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingTargetType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ContinuousProfilingPolicyItem> getCheckItems() {
        return this.checkItems;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getTriggeredCount() {
        return this.triggeredCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Long getLastTriggerTimestamp() {
        return this.lastTriggerTimestamp;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final ContinuousProfilingTargetType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCheckItems(final List<ContinuousProfilingPolicyItem> checkItems) {
        this.checkItems = checkItems;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTriggeredCount(final int triggeredCount) {
        this.triggeredCount = triggeredCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLastTriggerTimestamp(final Long lastTriggerTimestamp) {
        this.lastTriggerTimestamp = lastTriggerTimestamp;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ContinuousProfilingPolicyTarget)) return false;
        final ContinuousProfilingPolicyTarget other = (ContinuousProfilingPolicyTarget) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getTriggeredCount() != other.getTriggeredCount()) return false;
        final java.lang.Object this$lastTriggerTimestamp = this.getLastTriggerTimestamp();
        final java.lang.Object other$lastTriggerTimestamp = other.getLastTriggerTimestamp();
        if (this$lastTriggerTimestamp == null ? other$lastTriggerTimestamp != null : !this$lastTriggerTimestamp.equals(other$lastTriggerTimestamp)) return false;
        final java.lang.Object this$type = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final java.lang.Object this$checkItems = this.getCheckItems();
        final java.lang.Object other$checkItems = other.getCheckItems();
        if (this$checkItems == null ? other$checkItems != null : !this$checkItems.equals(other$checkItems)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ContinuousProfilingPolicyTarget;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getTriggeredCount();
        final java.lang.Object $lastTriggerTimestamp = this.getLastTriggerTimestamp();
        result = result * PRIME + ($lastTriggerTimestamp == null ? 43 : $lastTriggerTimestamp.hashCode());
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final java.lang.Object $checkItems = this.getCheckItems();
        result = result * PRIME + ($checkItems == null ? 43 : $checkItems.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ContinuousProfilingPolicyTarget(type=" + this.getType() + ", checkItems=" + this.getCheckItems() + ", triggeredCount=" + this.getTriggeredCount() + ", lastTriggerTimestamp=" + this.getLastTriggerTimestamp() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingPolicyTarget() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ContinuousProfilingPolicyTarget(final ContinuousProfilingTargetType type, final List<ContinuousProfilingPolicyItem> checkItems, final int triggeredCount, final Long lastTriggerTimestamp) {
        this.type = type;
        this.checkItems = checkItems;
        this.triggeredCount = triggeredCount;
        this.lastTriggerTimestamp = lastTriggerTimestamp;
    }
}
