// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.profiling.ebpf.analyze;

import org.apache.skywalking.apm.network.ebpf.profiling.v3.EBPFOffCPUProfiling;
import org.apache.skywalking.apm.network.ebpf.profiling.v3.EBPFOnCPUProfiling;
import org.apache.skywalking.apm.network.ebpf.profiling.v3.EBPFProfilingStackMetadata;
import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingDataRecord;
import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingStackType;
import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingTargetType;
import org.apache.skywalking.oap.server.core.query.type.EBPFProfilingAnalyzeAggregateType;
import java.util.LinkedList;
import java.util.List;

/**
 * Transform the {@link EBPFProfilingDataRecord} as runtime data
 */
public class EBPFProfilingStack {
    private long uploadTime;
    private long dumpCount;
    private List<Symbol> symbols;

    public static EBPFProfilingStack deserialize(EBPFProfilingDataRecord record, EBPFProfilingAnalyzeAggregateType aggregateType) throws Exception {
        final EBPFProfilingStack stack = new EBPFProfilingStack();
        analyzeSymbolAndDimension(record, aggregateType, stack);
        stack.setUploadTime(record.getUploadTime());
        return stack;
    }


    public static final class Symbol {
        private String name;
        private EBPFProfilingStackType stackType;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public EBPFProfilingStackType getStackType() {
            return this.stackType;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setName(final String name) {
            this.name = name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setStackType(final EBPFProfilingStackType stackType) {
            this.stackType = stackType;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "EBPFProfilingStack.Symbol(name=" + this.getName() + ", stackType=" + this.getStackType() + ")";
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Symbol(final String name, final EBPFProfilingStackType stackType) {
            this.name = name;
            this.stackType = stackType;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof EBPFProfilingStack.Symbol)) return false;
            final EBPFProfilingStack.Symbol other = (EBPFProfilingStack.Symbol) o;
            final java.lang.Object this$name = this.getName();
            final java.lang.Object other$name = other.getName();
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$stackType = this.getStackType();
            final java.lang.Object other$stackType = other.getStackType();
            if (this$stackType == null ? other$stackType != null : !this$stackType.equals(other$stackType)) return false;
            return true;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $name = this.getName();
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $stackType = this.getStackType();
            result = result * PRIME + ($stackType == null ? 43 : $stackType.hashCode());
            return result;
        }
    }

    private static void analyzeSymbolAndDimension(EBPFProfilingDataRecord record, EBPFProfilingAnalyzeAggregateType aggregateType, EBPFProfilingStack toStack) throws Exception {
        final EBPFProfilingTargetType targetType = EBPFProfilingTargetType.valueOf(record.getTargetType());
        switch (targetType) {
        case ON_CPU: 
            final EBPFOnCPUProfiling onCPUProfiling = EBPFOnCPUProfiling.parseFrom(record.getDataBinary());
            toStack.setDumpCount(onCPUProfiling.getDumpCount());
            toStack.setSymbols(parseSymbols(onCPUProfiling.getStacksList()));
            break;
        case OFF_CPU: 
            final EBPFOffCPUProfiling offCPUProfiling = EBPFOffCPUProfiling.parseFrom(record.getDataBinary());
            toStack.setSymbols(parseSymbols(offCPUProfiling.getStacksList()));
            if (aggregateType == EBPFProfilingAnalyzeAggregateType.DURATION) {
                toStack.setDumpCount(offCPUProfiling.getDuration());
            } else {
                toStack.setDumpCount(offCPUProfiling.getSwitchCount());
            }
            break;
        default: 
            throw new Exception("unknown target type: " + targetType);
        }
    }

    private static List<Symbol> parseSymbols(List<EBPFProfilingStackMetadata> metadataList) {
        final LinkedList<Symbol> symbols = new LinkedList<>();
        for (EBPFProfilingStackMetadata stack : metadataList) {
            stack.getStackSymbolsList().forEach(s -> symbols.addFirst(new Symbol(s, EBPFProfilingStackType.valueOf(stack.getStackType()))));
        }
        return symbols;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EBPFProfilingStack() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getUploadTime() {
        return this.uploadTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getDumpCount() {
        return this.dumpCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Symbol> getSymbols() {
        return this.symbols;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setUploadTime(final long uploadTime) {
        this.uploadTime = uploadTime;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDumpCount(final long dumpCount) {
        this.dumpCount = dumpCount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSymbols(final List<Symbol> symbols) {
        this.symbols = symbols;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EBPFProfilingStack)) return false;
        final EBPFProfilingStack other = (EBPFProfilingStack) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getUploadTime() != other.getUploadTime()) return false;
        if (this.getDumpCount() != other.getDumpCount()) return false;
        final java.lang.Object this$symbols = this.getSymbols();
        final java.lang.Object other$symbols = other.getSymbols();
        if (this$symbols == null ? other$symbols != null : !this$symbols.equals(other$symbols)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EBPFProfilingStack;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $uploadTime = this.getUploadTime();
        result = result * PRIME + (int) ($uploadTime >>> 32 ^ $uploadTime);
        final long $dumpCount = this.getDumpCount();
        result = result * PRIME + (int) ($dumpCount >>> 32 ^ $dumpCount);
        final java.lang.Object $symbols = this.getSymbols();
        result = result * PRIME + ($symbols == null ? 43 : $symbols.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "EBPFProfilingStack(uploadTime=" + this.getUploadTime() + ", dumpCount=" + this.getDumpCount() + ", symbols=" + this.getSymbols() + ")";
    }
}
