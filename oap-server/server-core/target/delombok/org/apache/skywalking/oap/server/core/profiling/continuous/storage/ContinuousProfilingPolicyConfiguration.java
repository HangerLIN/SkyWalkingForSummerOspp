// Generated by delombok at Thu Apr 18 20:39:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.profiling.continuous.storage;

import com.google.gson.Gson;
import org.apache.skywalking.oap.server.core.query.input.ContinuousProfilingPolicyItemCreation;
import org.apache.skywalking.oap.server.core.query.input.ContinuousProfilingPolicyCreation;
import org.apache.skywalking.oap.server.core.query.input.ContinuousProfilingPolicyTargetCreation;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContinuousProfilingPolicyConfiguration {
    private static Gson GSON = new Gson();
    // one target have multiple checkers
    private Map<ContinuousProfilingTargetType, Map<ContinuousProfilingMonitorType, CheckItem>> targetCheckers;


    public static class CheckItem {
        private String threshold;
        private int period;
        private int count;
        private List<String> uriList;
        private String uriRegex;


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class CheckItemBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String threshold;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int period;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int count;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private List<String> uriList;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String uriRegex;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            CheckItemBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder threshold(final String threshold) {
                this.threshold = threshold;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder period(final int period) {
                this.period = period;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder count(final int count) {
                this.count = count;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder uriList(final List<String> uriList) {
                this.uriList = uriList;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder uriRegex(final String uriRegex) {
                this.uriRegex = uriRegex;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ContinuousProfilingPolicyConfiguration.CheckItem build() {
                return new ContinuousProfilingPolicyConfiguration.CheckItem(this.threshold, this.period, this.count, this.uriList, this.uriRegex);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder(threshold=" + this.threshold + ", period=" + this.period + ", count=" + this.count + ", uriList=" + this.uriList + ", uriRegex=" + this.uriRegex + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder builder() {
            return new ContinuousProfilingPolicyConfiguration.CheckItem.CheckItemBuilder();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getThreshold() {
            return this.threshold;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getPeriod() {
            return this.period;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getCount() {
            return this.count;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public List<String> getUriList() {
            return this.uriList;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getUriRegex() {
            return this.uriRegex;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setThreshold(final String threshold) {
            this.threshold = threshold;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setPeriod(final int period) {
            this.period = period;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setCount(final int count) {
            this.count = count;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setUriList(final List<String> uriList) {
            this.uriList = uriList;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setUriRegex(final String uriRegex) {
            this.uriRegex = uriRegex;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof ContinuousProfilingPolicyConfiguration.CheckItem)) return false;
            final ContinuousProfilingPolicyConfiguration.CheckItem other = (ContinuousProfilingPolicyConfiguration.CheckItem) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getPeriod() != other.getPeriod()) return false;
            if (this.getCount() != other.getCount()) return false;
            final java.lang.Object this$threshold = this.getThreshold();
            final java.lang.Object other$threshold = other.getThreshold();
            if (this$threshold == null ? other$threshold != null : !this$threshold.equals(other$threshold)) return false;
            final java.lang.Object this$uriList = this.getUriList();
            final java.lang.Object other$uriList = other.getUriList();
            if (this$uriList == null ? other$uriList != null : !this$uriList.equals(other$uriList)) return false;
            final java.lang.Object this$uriRegex = this.getUriRegex();
            final java.lang.Object other$uriRegex = other.getUriRegex();
            if (this$uriRegex == null ? other$uriRegex != null : !this$uriRegex.equals(other$uriRegex)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof ContinuousProfilingPolicyConfiguration.CheckItem;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getPeriod();
            result = result * PRIME + this.getCount();
            final java.lang.Object $threshold = this.getThreshold();
            result = result * PRIME + ($threshold == null ? 43 : $threshold.hashCode());
            final java.lang.Object $uriList = this.getUriList();
            result = result * PRIME + ($uriList == null ? 43 : $uriList.hashCode());
            final java.lang.Object $uriRegex = this.getUriRegex();
            result = result * PRIME + ($uriRegex == null ? 43 : $uriRegex.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ContinuousProfilingPolicyConfiguration.CheckItem(threshold=" + this.getThreshold() + ", period=" + this.getPeriod() + ", count=" + this.getCount() + ", uriList=" + this.getUriList() + ", uriRegex=" + this.getUriRegex() + ")";
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CheckItem() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public CheckItem(final String threshold, final int period, final int count, final List<String> uriList, final String uriRegex) {
            this.threshold = threshold;
            this.period = period;
            this.count = count;
            this.uriList = uriList;
            this.uriRegex = uriRegex;
        }
    }

    public String toJSON() {
        return GSON.toJson(this);
    }

    public static ContinuousProfilingPolicyConfiguration buildFromRequest(ContinuousProfilingPolicyCreation request) {
        final ContinuousProfilingPolicyConfiguration data = new ContinuousProfilingPolicyConfiguration();
        for (ContinuousProfilingPolicyTargetCreation target : request.getTargets()) {
            final ContinuousProfilingTargetType targetType = target.getTargetType();
            Map<ContinuousProfilingMonitorType, CheckItem> items = data.targetCheckers.computeIfAbsent(targetType, k -> new HashMap<>());
            for (ContinuousProfilingPolicyItemCreation itemRequest : target.getCheckItems()) {
                final CheckItem item = new CheckItem();
                item.setThreshold(itemRequest.getThreshold());
                item.setPeriod(itemRequest.getPeriod());
                item.setCount(itemRequest.getCount());
                item.setUriList(itemRequest.getUriList());
                item.setUriRegex(itemRequest.getUriRegex());
                items.put(itemRequest.getType(), item);
            }
        }
        return data;
    }

    public static ContinuousProfilingPolicyConfiguration parseFromJSON(String json) {
        return GSON.fromJson(json, ContinuousProfilingPolicyConfiguration.class);
    }

    public ContinuousProfilingPolicyConfiguration() {
        this.targetCheckers = new HashMap<>();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<ContinuousProfilingTargetType, Map<ContinuousProfilingMonitorType, CheckItem>> getTargetCheckers() {
        return this.targetCheckers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTargetCheckers(final Map<ContinuousProfilingTargetType, Map<ContinuousProfilingMonitorType, CheckItem>> targetCheckers) {
        this.targetCheckers = targetCheckers;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ContinuousProfilingPolicyConfiguration)) return false;
        final ContinuousProfilingPolicyConfiguration other = (ContinuousProfilingPolicyConfiguration) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$targetCheckers = this.getTargetCheckers();
        final java.lang.Object other$targetCheckers = other.getTargetCheckers();
        if (this$targetCheckers == null ? other$targetCheckers != null : !this$targetCheckers.equals(other$targetCheckers)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ContinuousProfilingPolicyConfiguration;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $targetCheckers = this.getTargetCheckers();
        result = result * PRIME + ($targetCheckers == null ? 43 : $targetCheckers.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ContinuousProfilingPolicyConfiguration(targetCheckers=" + this.getTargetCheckers() + ")";
    }
}
