// Generated by delombok at Thu Apr 18 20:39:51 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.storage.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @since 9.1.0
 */
public class SQLDatabaseModelExtension {
    private final Map<String, AdditionalTable> additionalTables = new HashMap<>(5);
    //exclude the columns from the main table
    private final List<ModelColumn> excludeColumns = new ArrayList<>(5);

    public void appendAdditionalTable(String tableName, ModelColumn column) {
        additionalTables.computeIfAbsent(tableName, AdditionalTable::new).appendColumn(column);
    }

    public void appendExcludeColumns(ModelColumn column) {
        excludeColumns.add(column);
    }


    public static class AdditionalTable {
        private final String name;
        private final List<ModelColumn> columns = new ArrayList<>();
        private boolean hasListColumn = false;

        public void appendColumn(ModelColumn column) {
            if (hasListColumn && List.class.isAssignableFrom(column.getType())) {
                throw new IllegalStateException("A AdditionalEntity: " + name + " only support 1 List type. Field: " + column.getColumnName() + " should set to another AdditionalEntity.");
            } else if (List.class.isAssignableFrom(column.getType())) {
                hasListColumn = true;
            }
            columns.add(column);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public List<ModelColumn> getColumns() {
            return this.columns;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isHasListColumn() {
            return this.hasListColumn;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private AdditionalTable(final String name) {
            this.name = name;
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, AdditionalTable> getAdditionalTables() {
        return this.additionalTables;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<ModelColumn> getExcludeColumns() {
        return this.excludeColumns;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SQLDatabaseModelExtension)) return false;
        final SQLDatabaseModelExtension other = (SQLDatabaseModelExtension) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$additionalTables = this.getAdditionalTables();
        final java.lang.Object other$additionalTables = other.getAdditionalTables();
        if (this$additionalTables == null ? other$additionalTables != null : !this$additionalTables.equals(other$additionalTables)) return false;
        final java.lang.Object this$excludeColumns = this.getExcludeColumns();
        final java.lang.Object other$excludeColumns = other.getExcludeColumns();
        if (this$excludeColumns == null ? other$excludeColumns != null : !this$excludeColumns.equals(other$excludeColumns)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SQLDatabaseModelExtension;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $additionalTables = this.getAdditionalTables();
        result = result * PRIME + ($additionalTables == null ? 43 : $additionalTables.hashCode());
        final java.lang.Object $excludeColumns = this.getExcludeColumns();
        result = result * PRIME + ($excludeColumns == null ? 43 : $excludeColumns.hashCode());
        return result;
    }
}
