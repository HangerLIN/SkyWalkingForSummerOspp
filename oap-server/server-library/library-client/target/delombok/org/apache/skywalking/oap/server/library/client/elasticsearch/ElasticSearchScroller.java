// Generated by delombok at Thu Apr 18 20:39:46 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.library.client.elasticsearch;

import org.apache.skywalking.library.elasticsearch.requests.search.Search;
import org.apache.skywalking.library.elasticsearch.requests.search.SearchParams;
import org.apache.skywalking.library.elasticsearch.response.search.SearchHit;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.function.Function;

public class ElasticSearchScroller<T> {
    public static final Duration SCROLL_CONTEXT_RETENTION = Duration.ofSeconds(30);
    final ElasticSearchClient client;
    final Search search;
    final String index;
    final int queryMaxSize;
    final SearchParams params;
    final Function<SearchHit, T> resultConverter;

    public List<T> scroll() {
        final var results = new ArrayList<T>();
        final var scrollIds = new HashSet<String>();
        params.scroll(SCROLL_CONTEXT_RETENTION);
        var response = client.search(index, search, params);
        try {
            while (true) {
                final var scrollId = response.getScrollId();
                scrollIds.add(scrollId);
                if (response.getHits().getTotal() == 0) {
                    break;
                }
                for (final var searchHit : response.getHits()) {
                    results.add(resultConverter.apply(searchHit));
                    if (queryMaxSize > 0 && results.size() >= queryMaxSize) {
                        return results;
                    }
                }
                if (search.getSize() != null && response.getHits().getHits().size() < search.getSize()) {
                    return results;
                }
                response = client.scroll(SCROLL_CONTEXT_RETENTION, scrollId);
            }
        } finally {
            scrollIds.forEach(client::deleteScrollContextQuietly);
        }
        return results;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static <T> int $default$queryMaxSize() {
        return 0;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static <T> SearchParams $default$params() {
        return new SearchParams();
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class ElasticSearchScrollerBuilder<T> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ElasticSearchClient client;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Search search;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String index;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean queryMaxSize$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int queryMaxSize$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean params$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private SearchParams params$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Function<SearchHit, T> resultConverter;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        ElasticSearchScrollerBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> client(final ElasticSearchClient client) {
            this.client = client;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> search(final Search search) {
            this.search = search;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> index(final String index) {
            this.index = index;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> queryMaxSize(final int queryMaxSize) {
            this.queryMaxSize$value = queryMaxSize;
            queryMaxSize$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> params(final SearchParams params) {
            this.params$value = params;
            params$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller.ElasticSearchScrollerBuilder<T> resultConverter(final Function<SearchHit, T> resultConverter) {
            this.resultConverter = resultConverter;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ElasticSearchScroller<T> build() {
            int queryMaxSize$value = this.queryMaxSize$value;
            if (!this.queryMaxSize$set) queryMaxSize$value = ElasticSearchScroller.<T>$default$queryMaxSize();
            SearchParams params$value = this.params$value;
            if (!this.params$set) params$value = ElasticSearchScroller.<T>$default$params();
            return new ElasticSearchScroller<T>(this.client, this.search, this.index, queryMaxSize$value, params$value, this.resultConverter);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ElasticSearchScroller.ElasticSearchScrollerBuilder(client=" + this.client + ", search=" + this.search + ", index=" + this.index + ", queryMaxSize$value=" + this.queryMaxSize$value + ", params$value=" + this.params$value + ", resultConverter=" + this.resultConverter + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static <T> ElasticSearchScroller.ElasticSearchScrollerBuilder<T> builder() {
        return new ElasticSearchScroller.ElasticSearchScrollerBuilder<T>();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ElasticSearchScroller(final ElasticSearchClient client, final Search search, final String index, final int queryMaxSize, final SearchParams params, final Function<SearchHit, T> resultConverter) {
        this.client = client;
        this.search = search;
        this.index = index;
        this.queryMaxSize = queryMaxSize;
        this.params = params;
        this.resultConverter = resultConverter;
    }
}
