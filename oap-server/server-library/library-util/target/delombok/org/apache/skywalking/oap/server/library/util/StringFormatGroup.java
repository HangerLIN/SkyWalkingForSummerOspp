// Generated by delombok at Thu Apr 18 20:39:42 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.library.util;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Pattern;

/**
 * Group patterns use {@link java.util.regex.Pattern} as core, could group the input strings to matched group or return
 * original string.
 */
public class StringFormatGroup {
    private final List<PatternRule> rules;

    public StringFormatGroup() {
        rules = new ArrayList<>();
    }

    public StringFormatGroup(int size) {
        rules = new ArrayList<>(size);
    }

    /**
     * Add a new match rule. The rule will follow the order of being added.
     *
     * @param name      will be used when ruleRegex matched.
     * @param ruleRegex to match target string.
     */
    public void addRule(String name, String ruleRegex) {
        for (PatternRule rule : rules) {
            if (rule.name.equals(name)) {
                return;
            }
        }
        PatternRule rule = new PatternRule(name, ruleRegex);
        rules.add(rule);
    }

    /**
     * Format the string based on rules.
     *
     * @param string to be formatted
     * @return matched rule name, or original string.
     */
    public FormatResult format(String string) {
        for (PatternRule rule : rules) {
            if (rule.getPattern().matcher(string).matches()) {
                return new FormatResult(true, string, rule.getName());
            }
        }
        return new FormatResult(false, string, string);
    }

    public void sortRules(Comparator<? super PatternRule> comparator) {
        rules.sort(comparator);
    }


    public static class FormatResult {
        private final boolean match;
        private final String name;
        private final String replacedName;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean isMatch() {
            return this.match;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getReplacedName() {
            return this.replacedName;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public FormatResult(final boolean match, final String name, final String replacedName) {
            this.match = match;
            this.name = name;
            this.replacedName = replacedName;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof StringFormatGroup.FormatResult)) return false;
            final StringFormatGroup.FormatResult other = (StringFormatGroup.FormatResult) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.isMatch() != other.isMatch()) return false;
            final java.lang.Object this$name = this.getName();
            final java.lang.Object other$name = other.getName();
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$replacedName = this.getReplacedName();
            final java.lang.Object other$replacedName = other.getReplacedName();
            if (this$replacedName == null ? other$replacedName != null : !this$replacedName.equals(other$replacedName)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof StringFormatGroup.FormatResult;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + (this.isMatch() ? 79 : 97);
            final java.lang.Object $name = this.getName();
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $replacedName = this.getReplacedName();
            result = result * PRIME + ($replacedName == null ? 43 : $replacedName.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "StringFormatGroup.FormatResult(match=" + this.isMatch() + ", name=" + this.getName() + ", replacedName=" + this.getReplacedName() + ")";
        }
    }


    public static class PatternRule {
        private final String name;
        private final Pattern pattern;

        private PatternRule(String name, String ruleRegex) {
            this.name = name;
            pattern = Pattern.compile(ruleRegex);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Pattern getPattern() {
            return this.pattern;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "StringFormatGroup.PatternRule(name=" + this.getName() + ", pattern=" + this.getPattern() + ")";
        }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "StringFormatGroup(rules=" + this.rules + ")";
    }
}
