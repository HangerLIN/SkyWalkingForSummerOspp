// Generated by delombok at Thu Apr 18 20:39:42 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.library.util.prometheus.metrics;

import java.util.Map;

public class Counter extends Metric {
    private double value;

    public Counter(String name, Map<String, String> labels, double value, long timestamp) {
        super(name, labels, timestamp);
        this.value = value;
    }

    @Override
    public Metric sum(Metric m) {
        this.value = this.value + m.value();
        return this;
    }

    @Override
    public Double value() {
        return this.value;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class CounterBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String name;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private java.util.ArrayList<String> labels$key;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private java.util.ArrayList<String> labels$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private double value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private long timestamp;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        CounterBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder label(final String labelKey, final String labelValue) {
            if (this.labels$key == null) {
                this.labels$key = new java.util.ArrayList<String>();
                this.labels$value = new java.util.ArrayList<String>();
            }
            this.labels$key.add(labelKey);
            this.labels$value.add(labelValue);
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder labels(final java.util.Map<? extends String, ? extends String> labels) {
            if (labels == null) {
                throw new java.lang.NullPointerException("labels cannot be null");
            }
            if (this.labels$key == null) {
                this.labels$key = new java.util.ArrayList<String>();
                this.labels$value = new java.util.ArrayList<String>();
            }
            for (final java.util.Map.Entry<? extends String, ? extends String> $lombokEntry : labels.entrySet()) {
                this.labels$key.add($lombokEntry.getKey());
                this.labels$value.add($lombokEntry.getValue());
            }
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder clearLabels() {
            if (this.labels$key != null) {
                this.labels$key.clear();
                this.labels$value.clear();
            }
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder value(final double value) {
            this.value = value;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter.CounterBuilder timestamp(final long timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Counter build() {
            java.util.Map<String, String> labels;
            switch (this.labels$key == null ? 0 : this.labels$key.size()) {
            case 0: 
                labels = java.util.Collections.emptyMap();
                break;
            case 1: 
                labels = java.util.Collections.singletonMap(this.labels$key.get(0), this.labels$value.get(0));
                break;
            default: 
                labels = new java.util.LinkedHashMap<String, String>(this.labels$key.size() < 1073741824 ? 1 + this.labels$key.size() + (this.labels$key.size() - 3) / 3 : java.lang.Integer.MAX_VALUE);
                for (int $i = 0; $i < this.labels$key.size(); $i++) labels.put(this.labels$key.get($i), (String) this.labels$value.get($i));
                labels = java.util.Collections.unmodifiableMap(labels);
            }
            return new Counter(this.name, labels, this.value, this.timestamp);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "Counter.CounterBuilder(name=" + this.name + ", labels$key=" + this.labels$key + ", labels$value=" + this.labels$value + ", value=" + this.value + ", timestamp=" + this.timestamp + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static Counter.CounterBuilder builder() {
        return new Counter.CounterBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Counter)) return false;
        final Counter other = (Counter) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (java.lang.Double.compare(this.getValue(), other.getValue()) != 0) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Counter;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final long $value = java.lang.Double.doubleToLongBits(this.getValue());
        result = result * PRIME + (int) ($value >>> 32 ^ $value);
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Counter(super=" + super.toString() + ", value=" + this.getValue() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public double getValue() {
        return this.value;
    }
}
