// Generated by delombok at Thu Apr 18 20:39:47 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.library.server.http;

public class HTTPServerConfig {
    private String host;
    private int port;
    private String contextPath;
    private int maxThreads;
    private long idleTimeOut;
    private int acceptQueueSize;
    private int maxRequestHeaderSize;
    private boolean enableTLS;
    private String tlsKeyPath;
    private String tlsCertChainPath;
    private boolean acceptProxyRequest;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static int $default$maxThreads() {
        return 200;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static long $default$idleTimeOut() {
        return 30000;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static int $default$acceptQueueSize() {
        return 0;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static int $default$maxRequestHeaderSize() {
        return 8192;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static boolean $default$enableTLS() {
        return false;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    HTTPServerConfig(final String host, final int port, final String contextPath, final int maxThreads, final long idleTimeOut, final int acceptQueueSize, final int maxRequestHeaderSize, final boolean enableTLS, final String tlsKeyPath, final String tlsCertChainPath, final boolean acceptProxyRequest) {
        this.host = host;
        this.port = port;
        this.contextPath = contextPath;
        this.maxThreads = maxThreads;
        this.idleTimeOut = idleTimeOut;
        this.acceptQueueSize = acceptQueueSize;
        this.maxRequestHeaderSize = maxRequestHeaderSize;
        this.enableTLS = enableTLS;
        this.tlsKeyPath = tlsKeyPath;
        this.tlsCertChainPath = tlsCertChainPath;
        this.acceptProxyRequest = acceptProxyRequest;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class HTTPServerConfigBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String host;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int port;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String contextPath;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean maxThreads$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int maxThreads$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean idleTimeOut$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private long idleTimeOut$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean acceptQueueSize$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int acceptQueueSize$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean maxRequestHeaderSize$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int maxRequestHeaderSize$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean enableTLS$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean enableTLS$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String tlsKeyPath;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String tlsCertChainPath;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean acceptProxyRequest;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        HTTPServerConfigBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder host(final String host) {
            this.host = host;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder port(final int port) {
            this.port = port;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder contextPath(final String contextPath) {
            this.contextPath = contextPath;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder maxThreads(final int maxThreads) {
            this.maxThreads$value = maxThreads;
            maxThreads$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder idleTimeOut(final long idleTimeOut) {
            this.idleTimeOut$value = idleTimeOut;
            idleTimeOut$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder acceptQueueSize(final int acceptQueueSize) {
            this.acceptQueueSize$value = acceptQueueSize;
            acceptQueueSize$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder maxRequestHeaderSize(final int maxRequestHeaderSize) {
            this.maxRequestHeaderSize$value = maxRequestHeaderSize;
            maxRequestHeaderSize$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder enableTLS(final boolean enableTLS) {
            this.enableTLS$value = enableTLS;
            enableTLS$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder tlsKeyPath(final String tlsKeyPath) {
            this.tlsKeyPath = tlsKeyPath;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder tlsCertChainPath(final String tlsCertChainPath) {
            this.tlsCertChainPath = tlsCertChainPath;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig.HTTPServerConfigBuilder acceptProxyRequest(final boolean acceptProxyRequest) {
            this.acceptProxyRequest = acceptProxyRequest;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public HTTPServerConfig build() {
            int maxThreads$value = this.maxThreads$value;
            if (!this.maxThreads$set) maxThreads$value = HTTPServerConfig.$default$maxThreads();
            long idleTimeOut$value = this.idleTimeOut$value;
            if (!this.idleTimeOut$set) idleTimeOut$value = HTTPServerConfig.$default$idleTimeOut();
            int acceptQueueSize$value = this.acceptQueueSize$value;
            if (!this.acceptQueueSize$set) acceptQueueSize$value = HTTPServerConfig.$default$acceptQueueSize();
            int maxRequestHeaderSize$value = this.maxRequestHeaderSize$value;
            if (!this.maxRequestHeaderSize$set) maxRequestHeaderSize$value = HTTPServerConfig.$default$maxRequestHeaderSize();
            boolean enableTLS$value = this.enableTLS$value;
            if (!this.enableTLS$set) enableTLS$value = HTTPServerConfig.$default$enableTLS();
            return new HTTPServerConfig(this.host, this.port, this.contextPath, maxThreads$value, idleTimeOut$value, acceptQueueSize$value, maxRequestHeaderSize$value, enableTLS$value, this.tlsKeyPath, this.tlsCertChainPath, this.acceptProxyRequest);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "HTTPServerConfig.HTTPServerConfigBuilder(host=" + this.host + ", port=" + this.port + ", contextPath=" + this.contextPath + ", maxThreads$value=" + this.maxThreads$value + ", idleTimeOut$value=" + this.idleTimeOut$value + ", acceptQueueSize$value=" + this.acceptQueueSize$value + ", maxRequestHeaderSize$value=" + this.maxRequestHeaderSize$value + ", enableTLS$value=" + this.enableTLS$value + ", tlsKeyPath=" + this.tlsKeyPath + ", tlsCertChainPath=" + this.tlsCertChainPath + ", acceptProxyRequest=" + this.acceptProxyRequest + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static HTTPServerConfig.HTTPServerConfigBuilder builder() {
        return new HTTPServerConfig.HTTPServerConfigBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHost(final String host) {
        this.host = host;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPort(final int port) {
        this.port = port;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setContextPath(final String contextPath) {
        this.contextPath = contextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxThreads(final int maxThreads) {
        this.maxThreads = maxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setIdleTimeOut(final long idleTimeOut) {
        this.idleTimeOut = idleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAcceptQueueSize(final int acceptQueueSize) {
        this.acceptQueueSize = acceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxRequestHeaderSize(final int maxRequestHeaderSize) {
        this.maxRequestHeaderSize = maxRequestHeaderSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnableTLS(final boolean enableTLS) {
        this.enableTLS = enableTLS;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTlsKeyPath(final String tlsKeyPath) {
        this.tlsKeyPath = tlsKeyPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTlsCertChainPath(final String tlsCertChainPath) {
        this.tlsCertChainPath = tlsCertChainPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAcceptProxyRequest(final boolean acceptProxyRequest) {
        this.acceptProxyRequest = acceptProxyRequest;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getHost() {
        return this.host;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getPort() {
        return this.port;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getContextPath() {
        return this.contextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxThreads() {
        return this.maxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getIdleTimeOut() {
        return this.idleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getAcceptQueueSize() {
        return this.acceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxRequestHeaderSize() {
        return this.maxRequestHeaderSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEnableTLS() {
        return this.enableTLS;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTlsKeyPath() {
        return this.tlsKeyPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTlsCertChainPath() {
        return this.tlsCertChainPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isAcceptProxyRequest() {
        return this.acceptProxyRequest;
    }
}
