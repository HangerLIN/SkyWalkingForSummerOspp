// Generated by delombok at Thu Apr 18 20:39:45 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.skywalking.library.elasticsearch.response;

public final class NodeInfo {

    public static class Version {
        private String distribution = "ElasticSearch";
        private String number;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Version() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getDistribution() {
            return this.distribution;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getNumber() {
            return this.number;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setDistribution(final String distribution) {
            this.distribution = distribution;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setNumber(final String number) {
            this.number = number;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof NodeInfo.Version)) return false;
            final NodeInfo.Version other = (NodeInfo.Version) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$distribution = this.getDistribution();
            final java.lang.Object other$distribution = other.getDistribution();
            if (this$distribution == null ? other$distribution != null : !this$distribution.equals(other$distribution)) return false;
            final java.lang.Object this$number = this.getNumber();
            final java.lang.Object other$number = other.getNumber();
            if (this$number == null ? other$number != null : !this$number.equals(other$number)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof NodeInfo.Version;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $distribution = this.getDistribution();
            result = result * PRIME + ($distribution == null ? 43 : $distribution.hashCode());
            final java.lang.Object $number = this.getNumber();
            result = result * PRIME + ($number == null ? 43 : $number.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "NodeInfo.Version(distribution=" + this.getDistribution() + ", number=" + this.getNumber() + ")";
        }
    }

    private Version version;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public NodeInfo() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Version getVersion() {
        return this.version;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setVersion(final Version version) {
        this.version = version;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof NodeInfo)) return false;
        final NodeInfo other = (NodeInfo) o;
        final java.lang.Object this$version = this.getVersion();
        final java.lang.Object other$version = other.getVersion();
        if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $version = this.getVersion();
        result = result * PRIME + ($version == null ? 43 : $version.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "NodeInfo(version=" + this.getVersion() + ")";
    }
}
