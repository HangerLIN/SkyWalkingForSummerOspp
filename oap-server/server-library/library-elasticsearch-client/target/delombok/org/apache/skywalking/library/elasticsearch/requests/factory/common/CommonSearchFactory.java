// Generated by delombok at Thu Apr 18 20:39:45 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.skywalking.library.elasticsearch.requests.factory.common;

import java.util.HashMap;
import java.util.Map;
import com.linecorp.armeria.common.HttpRequest;
import com.linecorp.armeria.common.HttpRequestBuilder;
import com.linecorp.armeria.common.MediaType;
import org.apache.skywalking.library.elasticsearch.ElasticSearchVersion;
import org.apache.skywalking.library.elasticsearch.requests.factory.SearchFactory;
import org.apache.skywalking.library.elasticsearch.requests.search.Scroll;
import org.apache.skywalking.library.elasticsearch.requests.search.Search;
import org.apache.skywalking.library.elasticsearch.requests.search.SearchParams;

public final class CommonSearchFactory implements SearchFactory {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(CommonSearchFactory.class);
    private final ElasticSearchVersion version;

    @Override
    public HttpRequest search(Search search, SearchParams params, String... indices) {
        try {
            final HttpRequestBuilder builder = HttpRequest.builder();
            if (indices == null || indices.length == 0) {
                builder.get("/_search");
            } else {
                builder.get("/{indices}/_search").pathParam("indices", String.join(",", indices));
            }
            if (params != null) {
                params.forEach(e -> builder.queryParam(e.getKey(), e.getValue()));
            }
            final byte[] content = version.codec().encode(search);
            if (log.isDebugEnabled()) {
                log.debug("Search request: {}", new String(content));
            }
            return builder.content(MediaType.JSON, content).build();
        } catch (final java.lang.Throwable $ex) {
            throw lombok.Lombok.sneakyThrow($ex);
        }
    }

    @Override
    public HttpRequest scroll(Scroll scroll) {
        try {
            final HttpRequestBuilder builder = HttpRequest.builder().get("/_search/scroll");
            final byte[] content = version.codec().encode(scroll);
            if (log.isDebugEnabled()) {
                log.debug("Scroll request: {}", new String(content));
            }
            return builder.content(MediaType.JSON, content).build();
        } catch (final java.lang.Throwable $ex) {
            throw lombok.Lombok.sneakyThrow($ex);
        }
    }

    @Override
    public HttpRequest deleteScrollContext(String scrollId) {
        try {
            final HttpRequestBuilder builder = HttpRequest.builder().delete("/_search/scroll");
            final Map<String, String> params = new HashMap<>();
            params.put("scroll_id", scrollId);
            final byte[] content = version.codec().encode(params);
            if (log.isDebugEnabled()) {
                log.debug("Delete scroll context request: {}", new String(content));
            }
            return builder.content(MediaType.JSON, content).build();
        } catch (final java.lang.Throwable $ex) {
            throw lombok.Lombok.sneakyThrow($ex);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public CommonSearchFactory(final ElasticSearchVersion version) {
        this.version = version;
    }
}
