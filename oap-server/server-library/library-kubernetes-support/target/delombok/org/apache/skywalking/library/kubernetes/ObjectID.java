// Generated by delombok at Thu Apr 18 20:39:59 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.library.kubernetes;

import org.apache.logging.log4j.util.Strings;

public class ObjectID {
    public static final ObjectID EMPTY = ObjectID.builder().build();
    private final String name;
    private final String namespace;

    @Override
    public String toString() {
        if (this == EMPTY) {
            return "";
        }
        if (Strings.isBlank(namespace)) {
            return name;
        }
        return name + "." + namespace;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class ObjectIDBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String name;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String namespace;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        ObjectIDBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ObjectID.ObjectIDBuilder name(final String name) {
            this.name = name;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ObjectID.ObjectIDBuilder namespace(final String namespace) {
            this.namespace = namespace;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ObjectID build() {
            return new ObjectID(this.name, this.namespace);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ObjectID.ObjectIDBuilder(name=" + this.name + ", namespace=" + this.namespace + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static ObjectID.ObjectIDBuilder builder() {
        return new ObjectID.ObjectIDBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String name() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String namespace() {
        return this.namespace;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ObjectID)) return false;
        final ObjectID other = (ObjectID) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.name();
        final java.lang.Object other$name = other.name();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$namespace = this.namespace();
        final java.lang.Object other$namespace = other.namespace();
        if (this$namespace == null ? other$namespace != null : !this$namespace.equals(other$namespace)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ObjectID;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.name();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $namespace = this.namespace();
        result = result * PRIME + ($namespace == null ? 43 : $namespace.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ObjectID(final String name, final String namespace) {
        this.name = name;
        this.namespace = namespace;
    }
}
