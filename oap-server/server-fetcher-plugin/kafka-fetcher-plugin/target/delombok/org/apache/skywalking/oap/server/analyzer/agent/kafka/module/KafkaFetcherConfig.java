// Generated by delombok at Thu Apr 18 20:40:52 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.analyzer.agent.kafka.module;

import org.apache.skywalking.oap.server.library.module.ModuleConfig;
import java.util.Properties;

public class KafkaFetcherConfig extends ModuleConfig {
    /**
     * Kafka consumer config.
     */
    private Properties kafkaConsumerConfig = new Properties();
    /**
     * <B>bootstrap.servers</B>: A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     *  A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    private String bootstrapServers;
    /**
     * <B>group.id</B>: A unique string that identifies the consumer group this consumer belongs to.
     */
    private String groupId = "skywalking-consumer";
    /**
     * If true, create the Kafka topic when it does not exist.
     */
    private boolean createTopicIfNotExist = true;
    /**
     * The number of partitions for the topic being created.
     */
    private int partitions = 3;
    /**
     * The replication factor for each partition in the topic being created.
     */
    private int replicationFactor = 2;
    private boolean enableNativeProtoLog = true;
    private boolean enableNativeJsonLog = true;
    private String configPath = "meter-analyzer-config";
    private String topicNameOfMetrics = "skywalking-metrics";
    private String topicNameOfProfiling = "skywalking-profilings";
    private String topicNameOfTracingSegments = "skywalking-segments";
    private String topicNameOfManagements = "skywalking-managements";
    private String topicNameOfMeters = "skywalking-meters";
    private String topicNameOfLogs = "skywalking-logs";
    private String topicNameOfJsonLogs = "skywalking-logs-json";
    private int kafkaHandlerThreadPoolSize;
    private int kafkaHandlerThreadPoolQueueSize;
    private String namespace = "";
    private String mm2SourceAlias = "";
    private String mm2SourceSeparator = "";
    private int consumers = 1;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public KafkaFetcherConfig() {
    }

    /**
     * Kafka consumer config.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Properties getKafkaConsumerConfig() {
        return this.kafkaConsumerConfig;
    }

    /**
     * <B>bootstrap.servers</B>: A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     *  A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getBootstrapServers() {
        return this.bootstrapServers;
    }

    /**
     * <B>group.id</B>: A unique string that identifies the consumer group this consumer belongs to.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getGroupId() {
        return this.groupId;
    }

    /**
     * If true, create the Kafka topic when it does not exist.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isCreateTopicIfNotExist() {
        return this.createTopicIfNotExist;
    }

    /**
     * The number of partitions for the topic being created.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getPartitions() {
        return this.partitions;
    }

    /**
     * The replication factor for each partition in the topic being created.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getReplicationFactor() {
        return this.replicationFactor;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEnableNativeProtoLog() {
        return this.enableNativeProtoLog;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEnableNativeJsonLog() {
        return this.enableNativeJsonLog;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getConfigPath() {
        return this.configPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfMetrics() {
        return this.topicNameOfMetrics;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfProfiling() {
        return this.topicNameOfProfiling;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfTracingSegments() {
        return this.topicNameOfTracingSegments;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfManagements() {
        return this.topicNameOfManagements;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfMeters() {
        return this.topicNameOfMeters;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfLogs() {
        return this.topicNameOfLogs;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTopicNameOfJsonLogs() {
        return this.topicNameOfJsonLogs;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getKafkaHandlerThreadPoolSize() {
        return this.kafkaHandlerThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getKafkaHandlerThreadPoolQueueSize() {
        return this.kafkaHandlerThreadPoolQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getNamespace() {
        return this.namespace;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getMm2SourceAlias() {
        return this.mm2SourceAlias;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getMm2SourceSeparator() {
        return this.mm2SourceSeparator;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getConsumers() {
        return this.consumers;
    }

    /**
     * Kafka consumer config.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaConsumerConfig(final Properties kafkaConsumerConfig) {
        this.kafkaConsumerConfig = kafkaConsumerConfig;
    }

    /**
     * <B>bootstrap.servers</B>: A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     *  A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setBootstrapServers(final String bootstrapServers) {
        this.bootstrapServers = bootstrapServers;
    }

    /**
     * <B>group.id</B>: A unique string that identifies the consumer group this consumer belongs to.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGroupId(final String groupId) {
        this.groupId = groupId;
    }

    /**
     * If true, create the Kafka topic when it does not exist.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setCreateTopicIfNotExist(final boolean createTopicIfNotExist) {
        this.createTopicIfNotExist = createTopicIfNotExist;
    }

    /**
     * The number of partitions for the topic being created.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPartitions(final int partitions) {
        this.partitions = partitions;
    }

    /**
     * The replication factor for each partition in the topic being created.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setReplicationFactor(final int replicationFactor) {
        this.replicationFactor = replicationFactor;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnableNativeProtoLog(final boolean enableNativeProtoLog) {
        this.enableNativeProtoLog = enableNativeProtoLog;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnableNativeJsonLog(final boolean enableNativeJsonLog) {
        this.enableNativeJsonLog = enableNativeJsonLog;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setConfigPath(final String configPath) {
        this.configPath = configPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfMetrics(final String topicNameOfMetrics) {
        this.topicNameOfMetrics = topicNameOfMetrics;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfProfiling(final String topicNameOfProfiling) {
        this.topicNameOfProfiling = topicNameOfProfiling;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfTracingSegments(final String topicNameOfTracingSegments) {
        this.topicNameOfTracingSegments = topicNameOfTracingSegments;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfManagements(final String topicNameOfManagements) {
        this.topicNameOfManagements = topicNameOfManagements;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfMeters(final String topicNameOfMeters) {
        this.topicNameOfMeters = topicNameOfMeters;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfLogs(final String topicNameOfLogs) {
        this.topicNameOfLogs = topicNameOfLogs;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTopicNameOfJsonLogs(final String topicNameOfJsonLogs) {
        this.topicNameOfJsonLogs = topicNameOfJsonLogs;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaHandlerThreadPoolSize(final int kafkaHandlerThreadPoolSize) {
        this.kafkaHandlerThreadPoolSize = kafkaHandlerThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaHandlerThreadPoolQueueSize(final int kafkaHandlerThreadPoolQueueSize) {
        this.kafkaHandlerThreadPoolQueueSize = kafkaHandlerThreadPoolQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setNamespace(final String namespace) {
        this.namespace = namespace;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMm2SourceAlias(final String mm2SourceAlias) {
        this.mm2SourceAlias = mm2SourceAlias;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMm2SourceSeparator(final String mm2SourceSeparator) {
        this.mm2SourceSeparator = mm2SourceSeparator;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setConsumers(final int consumers) {
        this.consumers = consumers;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof KafkaFetcherConfig)) return false;
        final KafkaFetcherConfig other = (KafkaFetcherConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isCreateTopicIfNotExist() != other.isCreateTopicIfNotExist()) return false;
        if (this.getPartitions() != other.getPartitions()) return false;
        if (this.getReplicationFactor() != other.getReplicationFactor()) return false;
        if (this.isEnableNativeProtoLog() != other.isEnableNativeProtoLog()) return false;
        if (this.isEnableNativeJsonLog() != other.isEnableNativeJsonLog()) return false;
        if (this.getKafkaHandlerThreadPoolSize() != other.getKafkaHandlerThreadPoolSize()) return false;
        if (this.getKafkaHandlerThreadPoolQueueSize() != other.getKafkaHandlerThreadPoolQueueSize()) return false;
        if (this.getConsumers() != other.getConsumers()) return false;
        final java.lang.Object this$kafkaConsumerConfig = this.getKafkaConsumerConfig();
        final java.lang.Object other$kafkaConsumerConfig = other.getKafkaConsumerConfig();
        if (this$kafkaConsumerConfig == null ? other$kafkaConsumerConfig != null : !this$kafkaConsumerConfig.equals(other$kafkaConsumerConfig)) return false;
        final java.lang.Object this$bootstrapServers = this.getBootstrapServers();
        final java.lang.Object other$bootstrapServers = other.getBootstrapServers();
        if (this$bootstrapServers == null ? other$bootstrapServers != null : !this$bootstrapServers.equals(other$bootstrapServers)) return false;
        final java.lang.Object this$groupId = this.getGroupId();
        final java.lang.Object other$groupId = other.getGroupId();
        if (this$groupId == null ? other$groupId != null : !this$groupId.equals(other$groupId)) return false;
        final java.lang.Object this$configPath = this.getConfigPath();
        final java.lang.Object other$configPath = other.getConfigPath();
        if (this$configPath == null ? other$configPath != null : !this$configPath.equals(other$configPath)) return false;
        final java.lang.Object this$topicNameOfMetrics = this.getTopicNameOfMetrics();
        final java.lang.Object other$topicNameOfMetrics = other.getTopicNameOfMetrics();
        if (this$topicNameOfMetrics == null ? other$topicNameOfMetrics != null : !this$topicNameOfMetrics.equals(other$topicNameOfMetrics)) return false;
        final java.lang.Object this$topicNameOfProfiling = this.getTopicNameOfProfiling();
        final java.lang.Object other$topicNameOfProfiling = other.getTopicNameOfProfiling();
        if (this$topicNameOfProfiling == null ? other$topicNameOfProfiling != null : !this$topicNameOfProfiling.equals(other$topicNameOfProfiling)) return false;
        final java.lang.Object this$topicNameOfTracingSegments = this.getTopicNameOfTracingSegments();
        final java.lang.Object other$topicNameOfTracingSegments = other.getTopicNameOfTracingSegments();
        if (this$topicNameOfTracingSegments == null ? other$topicNameOfTracingSegments != null : !this$topicNameOfTracingSegments.equals(other$topicNameOfTracingSegments)) return false;
        final java.lang.Object this$topicNameOfManagements = this.getTopicNameOfManagements();
        final java.lang.Object other$topicNameOfManagements = other.getTopicNameOfManagements();
        if (this$topicNameOfManagements == null ? other$topicNameOfManagements != null : !this$topicNameOfManagements.equals(other$topicNameOfManagements)) return false;
        final java.lang.Object this$topicNameOfMeters = this.getTopicNameOfMeters();
        final java.lang.Object other$topicNameOfMeters = other.getTopicNameOfMeters();
        if (this$topicNameOfMeters == null ? other$topicNameOfMeters != null : !this$topicNameOfMeters.equals(other$topicNameOfMeters)) return false;
        final java.lang.Object this$topicNameOfLogs = this.getTopicNameOfLogs();
        final java.lang.Object other$topicNameOfLogs = other.getTopicNameOfLogs();
        if (this$topicNameOfLogs == null ? other$topicNameOfLogs != null : !this$topicNameOfLogs.equals(other$topicNameOfLogs)) return false;
        final java.lang.Object this$topicNameOfJsonLogs = this.getTopicNameOfJsonLogs();
        final java.lang.Object other$topicNameOfJsonLogs = other.getTopicNameOfJsonLogs();
        if (this$topicNameOfJsonLogs == null ? other$topicNameOfJsonLogs != null : !this$topicNameOfJsonLogs.equals(other$topicNameOfJsonLogs)) return false;
        final java.lang.Object this$namespace = this.getNamespace();
        final java.lang.Object other$namespace = other.getNamespace();
        if (this$namespace == null ? other$namespace != null : !this$namespace.equals(other$namespace)) return false;
        final java.lang.Object this$mm2SourceAlias = this.getMm2SourceAlias();
        final java.lang.Object other$mm2SourceAlias = other.getMm2SourceAlias();
        if (this$mm2SourceAlias == null ? other$mm2SourceAlias != null : !this$mm2SourceAlias.equals(other$mm2SourceAlias)) return false;
        final java.lang.Object this$mm2SourceSeparator = this.getMm2SourceSeparator();
        final java.lang.Object other$mm2SourceSeparator = other.getMm2SourceSeparator();
        if (this$mm2SourceSeparator == null ? other$mm2SourceSeparator != null : !this$mm2SourceSeparator.equals(other$mm2SourceSeparator)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof KafkaFetcherConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isCreateTopicIfNotExist() ? 79 : 97);
        result = result * PRIME + this.getPartitions();
        result = result * PRIME + this.getReplicationFactor();
        result = result * PRIME + (this.isEnableNativeProtoLog() ? 79 : 97);
        result = result * PRIME + (this.isEnableNativeJsonLog() ? 79 : 97);
        result = result * PRIME + this.getKafkaHandlerThreadPoolSize();
        result = result * PRIME + this.getKafkaHandlerThreadPoolQueueSize();
        result = result * PRIME + this.getConsumers();
        final java.lang.Object $kafkaConsumerConfig = this.getKafkaConsumerConfig();
        result = result * PRIME + ($kafkaConsumerConfig == null ? 43 : $kafkaConsumerConfig.hashCode());
        final java.lang.Object $bootstrapServers = this.getBootstrapServers();
        result = result * PRIME + ($bootstrapServers == null ? 43 : $bootstrapServers.hashCode());
        final java.lang.Object $groupId = this.getGroupId();
        result = result * PRIME + ($groupId == null ? 43 : $groupId.hashCode());
        final java.lang.Object $configPath = this.getConfigPath();
        result = result * PRIME + ($configPath == null ? 43 : $configPath.hashCode());
        final java.lang.Object $topicNameOfMetrics = this.getTopicNameOfMetrics();
        result = result * PRIME + ($topicNameOfMetrics == null ? 43 : $topicNameOfMetrics.hashCode());
        final java.lang.Object $topicNameOfProfiling = this.getTopicNameOfProfiling();
        result = result * PRIME + ($topicNameOfProfiling == null ? 43 : $topicNameOfProfiling.hashCode());
        final java.lang.Object $topicNameOfTracingSegments = this.getTopicNameOfTracingSegments();
        result = result * PRIME + ($topicNameOfTracingSegments == null ? 43 : $topicNameOfTracingSegments.hashCode());
        final java.lang.Object $topicNameOfManagements = this.getTopicNameOfManagements();
        result = result * PRIME + ($topicNameOfManagements == null ? 43 : $topicNameOfManagements.hashCode());
        final java.lang.Object $topicNameOfMeters = this.getTopicNameOfMeters();
        result = result * PRIME + ($topicNameOfMeters == null ? 43 : $topicNameOfMeters.hashCode());
        final java.lang.Object $topicNameOfLogs = this.getTopicNameOfLogs();
        result = result * PRIME + ($topicNameOfLogs == null ? 43 : $topicNameOfLogs.hashCode());
        final java.lang.Object $topicNameOfJsonLogs = this.getTopicNameOfJsonLogs();
        result = result * PRIME + ($topicNameOfJsonLogs == null ? 43 : $topicNameOfJsonLogs.hashCode());
        final java.lang.Object $namespace = this.getNamespace();
        result = result * PRIME + ($namespace == null ? 43 : $namespace.hashCode());
        final java.lang.Object $mm2SourceAlias = this.getMm2SourceAlias();
        result = result * PRIME + ($mm2SourceAlias == null ? 43 : $mm2SourceAlias.hashCode());
        final java.lang.Object $mm2SourceSeparator = this.getMm2SourceSeparator();
        result = result * PRIME + ($mm2SourceSeparator == null ? 43 : $mm2SourceSeparator.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "KafkaFetcherConfig(kafkaConsumerConfig=" + this.getKafkaConsumerConfig() + ", bootstrapServers=" + this.getBootstrapServers() + ", groupId=" + this.getGroupId() + ", createTopicIfNotExist=" + this.isCreateTopicIfNotExist() + ", partitions=" + this.getPartitions() + ", replicationFactor=" + this.getReplicationFactor() + ", enableNativeProtoLog=" + this.isEnableNativeProtoLog() + ", enableNativeJsonLog=" + this.isEnableNativeJsonLog() + ", configPath=" + this.getConfigPath() + ", topicNameOfMetrics=" + this.getTopicNameOfMetrics() + ", topicNameOfProfiling=" + this.getTopicNameOfProfiling() + ", topicNameOfTracingSegments=" + this.getTopicNameOfTracingSegments() + ", topicNameOfManagements=" + this.getTopicNameOfManagements() + ", topicNameOfMeters=" + this.getTopicNameOfMeters() + ", topicNameOfLogs=" + this.getTopicNameOfLogs() + ", topicNameOfJsonLogs=" + this.getTopicNameOfJsonLogs() + ", kafkaHandlerThreadPoolSize=" + this.getKafkaHandlerThreadPoolSize() + ", kafkaHandlerThreadPoolQueueSize=" + this.getKafkaHandlerThreadPoolQueueSize() + ", namespace=" + this.getNamespace() + ", mm2SourceAlias=" + this.getMm2SourceAlias() + ", mm2SourceSeparator=" + this.getMm2SourceSeparator() + ", consumers=" + this.getConsumers() + ")";
    }
}
