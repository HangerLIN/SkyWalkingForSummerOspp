// Generated by delombok at Thu Apr 18 20:40:22 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.receiver.telegraf.provider.handler.pojo;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.linecorp.armeria.common.AggregatedHttpRequest;
import com.linecorp.armeria.common.annotation.Nullable;
import com.linecorp.armeria.server.ServiceRequestContext;
import com.linecorp.armeria.server.annotation.RequestConverterFunction;
import java.lang.reflect.ParameterizedType;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class TelegrafData implements RequestConverterFunction {
    private List<TelegrafDatum> metrics;
    private static final ObjectMapper MAPPER = new ObjectMapper();

    @Override
    @Nullable
    public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request, Class<?> expectedResultType, @Nullable ParameterizedType expectedParameterizedResultType) throws Exception {
        if (expectedResultType == TelegrafData.class) {
            // Convert the request to a TelegrafData object
            return MAPPER.readValue(request.contentUtf8(), TelegrafData.class);
        }
        return RequestConverterFunction.fallthrough();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<TelegrafDatum> getMetrics() {
        return this.metrics;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMetrics(final List<TelegrafDatum> metrics) {
        this.metrics = metrics;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TelegrafData)) return false;
        final TelegrafData other = (TelegrafData) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$metrics = this.getMetrics();
        final java.lang.Object other$metrics = other.getMetrics();
        if (this$metrics == null ? other$metrics != null : !this$metrics.equals(other$metrics)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TelegrafData;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $metrics = this.getMetrics();
        result = result * PRIME + ($metrics == null ? 43 : $metrics.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "TelegrafData(metrics=" + this.getMetrics() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TelegrafData() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public TelegrafData(final List<TelegrafDatum> metrics) {
        this.metrics = metrics;
    }
}
