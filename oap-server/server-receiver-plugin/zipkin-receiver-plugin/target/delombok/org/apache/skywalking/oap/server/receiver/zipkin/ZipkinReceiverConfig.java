// Generated by delombok at Thu Apr 18 20:40:05 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.receiver.zipkin;

import org.apache.skywalking.oap.server.core.Const;
import org.apache.skywalking.oap.server.library.module.ModuleConfig;

public class ZipkinReceiverConfig extends ModuleConfig {
    // HTTP collector config
    private boolean enableHttpCollector = true;
    private String restHost;
    private int restPort;
    private String restContextPath;
    private int restMaxThreads = 200;
    private long restIdleTimeOut = 30000;
    private int restAcceptQueueSize = 0;
    private String searchableTracesTags = DEFAULT_SEARCHABLE_TAG_KEYS;
    private int sampleRate = 10000;
    private static final String DEFAULT_SEARCHABLE_TAG_KEYS = String.join(Const.COMMA, "http.method");
    // kafka collector config
    private boolean enableKafkaCollector = false;
    /**
     * A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    private String kafkaBootstrapServers;
    private String kafkaGroupId = "zipkin";
    private String kafkaTopic = "zipkin";
    /**
     * Kafka consumer config,JSON format as Properties. If it contains the same key with above, would override.
     */
    private String kafkaConsumerConfig = "{\"auto.offset.reset\":\"earliest\",\"enable.auto.commit\":true}";
    private int kafkaConsumers = 1;
    private int kafkaHandlerThreadPoolSize;
    private int kafkaHandlerThreadPoolQueueSize;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnableHttpCollector(final boolean enableHttpCollector) {
        this.enableHttpCollector = enableHttpCollector;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestHost(final String restHost) {
        this.restHost = restHost;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestPort(final int restPort) {
        this.restPort = restPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestContextPath(final String restContextPath) {
        this.restContextPath = restContextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestMaxThreads(final int restMaxThreads) {
        this.restMaxThreads = restMaxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestIdleTimeOut(final long restIdleTimeOut) {
        this.restIdleTimeOut = restIdleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestAcceptQueueSize(final int restAcceptQueueSize) {
        this.restAcceptQueueSize = restAcceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSearchableTracesTags(final String searchableTracesTags) {
        this.searchableTracesTags = searchableTracesTags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSampleRate(final int sampleRate) {
        this.sampleRate = sampleRate;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setEnableKafkaCollector(final boolean enableKafkaCollector) {
        this.enableKafkaCollector = enableKafkaCollector;
    }

    /**
     * A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaBootstrapServers(final String kafkaBootstrapServers) {
        this.kafkaBootstrapServers = kafkaBootstrapServers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaGroupId(final String kafkaGroupId) {
        this.kafkaGroupId = kafkaGroupId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaTopic(final String kafkaTopic) {
        this.kafkaTopic = kafkaTopic;
    }

    /**
     * Kafka consumer config,JSON format as Properties. If it contains the same key with above, would override.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaConsumerConfig(final String kafkaConsumerConfig) {
        this.kafkaConsumerConfig = kafkaConsumerConfig;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaConsumers(final int kafkaConsumers) {
        this.kafkaConsumers = kafkaConsumers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaHandlerThreadPoolSize(final int kafkaHandlerThreadPoolSize) {
        this.kafkaHandlerThreadPoolSize = kafkaHandlerThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setKafkaHandlerThreadPoolQueueSize(final int kafkaHandlerThreadPoolQueueSize) {
        this.kafkaHandlerThreadPoolQueueSize = kafkaHandlerThreadPoolQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEnableHttpCollector() {
        return this.enableHttpCollector;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRestHost() {
        return this.restHost;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestPort() {
        return this.restPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRestContextPath() {
        return this.restContextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestMaxThreads() {
        return this.restMaxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getRestIdleTimeOut() {
        return this.restIdleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestAcceptQueueSize() {
        return this.restAcceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getSearchableTracesTags() {
        return this.searchableTracesTags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getSampleRate() {
        return this.sampleRate;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isEnableKafkaCollector() {
        return this.enableKafkaCollector;
    }

    /**
     * A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getKafkaBootstrapServers() {
        return this.kafkaBootstrapServers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getKafkaGroupId() {
        return this.kafkaGroupId;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getKafkaTopic() {
        return this.kafkaTopic;
    }

    /**
     * Kafka consumer config,JSON format as Properties. If it contains the same key with above, would override.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getKafkaConsumerConfig() {
        return this.kafkaConsumerConfig;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getKafkaConsumers() {
        return this.kafkaConsumers;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getKafkaHandlerThreadPoolSize() {
        return this.kafkaHandlerThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getKafkaHandlerThreadPoolQueueSize() {
        return this.kafkaHandlerThreadPoolQueueSize;
    }
}
