// Generated by delombok at Thu Apr 18 20:40:21 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.receiver.zabbix.provider;

import com.google.common.collect.ImmutableMap;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.commons.text.StringTokenizer;
import org.apache.skywalking.oap.server.library.util.StringUtil;
import org.apache.skywalking.oap.meter.analyzer.MetricConvert;
import org.apache.skywalking.oap.meter.analyzer.dsl.Sample;
import org.apache.skywalking.oap.meter.analyzer.dsl.SampleFamily;
import org.apache.skywalking.oap.meter.analyzer.dsl.SampleFamilyBuilder;
import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;
import org.apache.skywalking.oap.server.library.util.CollectionUtils;
import org.apache.skywalking.oap.server.receiver.zabbix.provider.config.ZabbixConfig;
import org.apache.skywalking.oap.server.receiver.zabbix.provider.protocol.bean.ZabbixRequest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import static com.google.common.collect.ImmutableMap.toImmutableMap;

/**
 * Management all Zabbix metrics
 */
public class ZabbixMetrics {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ZabbixMetrics.class);
    private final List<ZabbixConfig> originalConfigs;
    /**
     * All enabled service and instance group
     */
    private List<InstanceGroup> allServices = new ArrayList<>();

    public ZabbixMetrics(List<ZabbixConfig> originalConfigs, MeterSystem meterSystem) {
        this.originalConfigs = originalConfigs;
        initConfigs(meterSystem);
    }

    /**
     * Get all key names when Zabbix agent queried
     */
    public Set<String> getAllMonitorMetricNames(String hostName) {
        // Find instance group
        return findInstanceGroup(hostName).map(InstanceGroup::getEnabledKeys).orElse(null);
    }

    /**
     * Receive agent data and convert to meter system
     */
    public ConvertStatics convertMetrics(List<ZabbixRequest.AgentData> agentDataList) {
        if (CollectionUtils.isEmpty(agentDataList)) {
            return ConvertStatics.EMPTY;
        }
        return 
        // Group by host
        // Convert every agent data list
        // Merge all statics
        agentDataList.stream().collect(Collectors.groupingBy(ZabbixRequest.AgentData::getHost)).entrySet().stream().map(e -> findInstanceGroup(e.getKey()).map(instanceGroup -> instanceGroup.convertToMeter(e.getValue())).orElse(null)).filter(Objects::nonNull).reduce(ConvertStatics::merge).orElse(ConvertStatics.EMPTY);
    }

    private Optional<InstanceGroup> findInstanceGroup(String hostName) {
        // Find service group, support using cache
        return allServices.stream().filter(group -> group.matchesWithHostName(hostName)).findAny();
    }

    private void initConfigs(MeterSystem meterSystem) {
        // Temporary instance group cache, encase generate multiple instance group
        HashMap<String, InstanceGroup> tmpGroupCache = new HashMap<>();
        // Each config entities
        originalConfigs.forEach(c -> c.getEntities().getHostPatterns().forEach(instance -> tmpGroupCache.computeIfAbsent(instance, ins -> {
            InstanceGroup instanceGroup = new InstanceGroup(ins, meterSystem);
            allServices.add(instanceGroup);
            return instanceGroup;
        }).appendMetrics(c)));
    }


    /**
     * Metrics convert to meter system statics
     */
    public static class ConvertStatics {
        public static final ConvertStatics EMPTY = ConvertStatics.builder().build();
        private int total;
        private int success;
        private int failed;
        private double useTime;

        public ConvertStatics merge(ConvertStatics statics) {
            this.total += statics.total;
            this.success += statics.success;
            this.failed += statics.failed;
            this.useTime += statics.useTime;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        ConvertStatics(final int total, final int success, final int failed, final double useTime) {
            this.total = total;
            this.success = success;
            this.failed = failed;
            this.useTime = useTime;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class ConvertStaticsBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int total;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int success;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int failed;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private double useTime;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            ConvertStaticsBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder total(final int total) {
                this.total = total;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder success(final int success) {
                this.success = success;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder failed(final int failed) {
                this.failed = failed;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder useTime(final double useTime) {
                this.useTime = useTime;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.ConvertStatics build() {
                return new ZabbixMetrics.ConvertStatics(this.total, this.success, this.failed, this.useTime);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder(total=" + this.total + ", success=" + this.success + ", failed=" + this.failed + ", useTime=" + this.useTime + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder builder() {
            return new ZabbixMetrics.ConvertStatics.ConvertStaticsBuilder();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getTotal() {
            return this.total;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getSuccess() {
            return this.success;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getFailed() {
            return this.failed;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public double getUseTime() {
            return this.useTime;
        }
    }


    /**
     * The group of instances according to hostPatterns defined in Zabbix rule file
     */
    private static class InstanceGroup {
        static final InstanceGroup EMPTY = new InstanceGroup("", null);
        private final Pattern instancePattern;
        private final MeterSystem meterSystem;
        private Set<String> enabledKeys;
        private List<MetricConvert> metricConverts;
        private List<ZabbixConfig.EntityLabel> labels;

        public InstanceGroup(String instancePattern, MeterSystem meterSystem) {
            this.instancePattern = Pattern.compile(instancePattern);
            this.meterSystem = meterSystem;
            this.enabledKeys = new HashSet<>();
            this.metricConverts = new ArrayList<>();
            this.labels = new ArrayList<>();
        }

        public void appendMetrics(ZabbixConfig config) {
            // Append metrics to converters
            metricConverts.add(new MetricConvert(config, meterSystem));
            // Append labels and add to item keys
            if (CollectionUtils.isNotEmpty(config.getEntities().getLabels())) {
                labels.addAll(config.getEntities().getLabels());
                config.getEntities().getLabels().stream().filter(l -> StringUtils.isNotBlank(l.getFromItem())).forEach(l -> enabledKeys.add(l.getFromItem()));
            }
            // Append all metric keys
            enabledKeys.addAll(config.getRequiredZabbixItemKeys());
        }

        public boolean matchesWithHostName(String hostName) {
            Matcher matcher = instancePattern.matcher(hostName);
            return matcher.matches();
        }

        public ConvertStatics convertToMeter(List<ZabbixRequest.AgentData> dataList) {
            if (log.isDebugEnabled()) {
                log.debug("Receive zabbix agent data: {}", dataList);
            }
            StopWatch stopWatch = new StopWatch();
            Collection<SampleFamily> sampleFamilies = null;
            try {
                stopWatch.start();
                // Parse config labels
                Map<String, String> configLabels = parseConfigLabels(dataList);
                // Build metrics
                ImmutableMap<String, SampleFamily> families = 
                // Correct state
                // Parse data to list
                // Combine to sample family
                dataList.stream().filter(d -> d.getState() == 0 && NumberUtils.isParsable(d.getValue())).map(this::parseAgentData).map(b -> b.build(configLabels)).collect(Collectors.groupingBy(Sample::getName)).entrySet().stream().collect(toImmutableMap(Map.Entry::getKey, e -> SampleFamilyBuilder.newBuilder(e.getValue().stream().toArray(Sample[]::new)).build()));
                sampleFamilies = families.values();
                // Each all converters
                metricConverts.forEach(converter -> converter.toMeter(families));
            } finally {
                stopWatch.stop();
            }
            return 
            // Setting all as success
            ConvertStatics.builder().total(sampleFamilies.size()).success(sampleFamilies.size()).useTime(((double) stopWatch.getTime()) / 1000).build();
        }

        /**
         * Parsing config labels from original value or agent data
         */
        private Map<String, String> parseConfigLabels(List<ZabbixRequest.AgentData> dataList) {
            if (CollectionUtils.isEmpty(labels)) {
                return Collections.emptyMap();
            }
            return 
            // Exists Value
            // Searching from Agent data
            labels.stream().map(label -> {
                if (StringUtil.isNotBlank(label.getValue())) {
                    return Tuple.of(label.getName(), label.getValue());
                } else if (StringUtil.isNotBlank(label.getFromItem())) {
                    return dataList.stream().filter(d -> Objects.equals(d.getKey(), label.getFromItem())).findFirst().map(d -> Tuple.of(label.getName(), d.getValue())).orElse(null);
                }
                return null;
            }).filter(Objects::nonNull).collect(Collectors.toMap(Tuple2::_1, Tuple2::_2));
        }

        /**
         * Parsing Zabbix agent data to sample builder
         */
        private SampleBuilder parseAgentData(ZabbixRequest.AgentData data) {
            String keyName = data.getKey();
            SampleBuilder.SampleBuilderBuilder builder = SampleBuilder.builder();
            if (keyName.contains("[") && keyName.endsWith("]")) {
                String key = StringUtils.substringBefore(keyName, "[");
                // Split params, support quote mode, label name start at 1
                StringTokenizer tokenizer = new StringTokenizer(StringUtils.substringAfter(keyName.substring(0, keyName.length() - 1), "["), ',', '\"');
                tokenizer.setIgnoreEmptyTokens(false);
                int inx = 1;
                ImmutableMap.Builder<String, String> paramBuilder = ImmutableMap.builder();
                while (tokenizer.hasNext()) {
                    paramBuilder.put(String.valueOf(inx++), tokenizer.next());
                }
                builder.name(key).labels(paramBuilder.build());
            } else {
                builder.name(keyName).labels(ImmutableMap.of());
            }
            return builder.hostName(data.getHost()).timestamp(TimeUnit.SECONDS.toMillis(data.getClock())).value(Double.parseDouble(data.getValue())).build();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Set<String> getEnabledKeys() {
            return this.enabledKeys;
        }
    }


    private static class SampleBuilder {
        private final String name;
        private final String hostName;
        private final long timestamp;
        private final ImmutableMap<String, String> labels;
        private final double value;

        public Sample build(Map<String, String> configLabels) {
            return 
            // Put original labels
            // Put config labels
            // Put report instance to labels
            Sample.builder().name(escapedName(name)).labels(ImmutableMap.<String, String>builder().putAll(labels).putAll(configLabels).put("host", hostName).build()).value(value).timestamp(timestamp).build();
        }

        // Returns the escaped name of the given one, with "." replaced by "_"
        private String escapedName(final String name) {
            return name.replaceAll("\\.", "_");
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        SampleBuilder(final String name, final String hostName, final long timestamp, final ImmutableMap<String, String> labels, final double value) {
            this.name = name;
            this.hostName = hostName;
            this.timestamp = timestamp;
            this.labels = labels;
            this.value = value;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class SampleBuilderBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String name;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String hostName;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private long timestamp;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private ImmutableMap<String, String> labels;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private double value;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            SampleBuilderBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder.SampleBuilderBuilder name(final String name) {
                this.name = name;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder.SampleBuilderBuilder hostName(final String hostName) {
                this.hostName = hostName;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder.SampleBuilderBuilder timestamp(final long timestamp) {
                this.timestamp = timestamp;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder.SampleBuilderBuilder labels(final ImmutableMap<String, String> labels) {
                this.labels = labels;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder.SampleBuilderBuilder value(final double value) {
                this.value = value;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public ZabbixMetrics.SampleBuilder build() {
                return new ZabbixMetrics.SampleBuilder(this.name, this.hostName, this.timestamp, this.labels, this.value);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "ZabbixMetrics.SampleBuilder.SampleBuilderBuilder(name=" + this.name + ", hostName=" + this.hostName + ", timestamp=" + this.timestamp + ", labels=" + this.labels + ", value=" + this.value + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static ZabbixMetrics.SampleBuilder.SampleBuilderBuilder builder() {
            return new ZabbixMetrics.SampleBuilder.SampleBuilderBuilder();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getHostName() {
            return this.hostName;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public long getTimestamp() {
            return this.timestamp;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ImmutableMap<String, String> getLabels() {
            return this.labels;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public double getValue() {
            return this.value;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof ZabbixMetrics.SampleBuilder)) return false;
            final ZabbixMetrics.SampleBuilder other = (ZabbixMetrics.SampleBuilder) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getTimestamp() != other.getTimestamp()) return false;
            if (java.lang.Double.compare(this.getValue(), other.getValue()) != 0) return false;
            final java.lang.Object this$name = this.getName();
            final java.lang.Object other$name = other.getName();
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$hostName = this.getHostName();
            final java.lang.Object other$hostName = other.getHostName();
            if (this$hostName == null ? other$hostName != null : !this$hostName.equals(other$hostName)) return false;
            final java.lang.Object this$labels = this.getLabels();
            final java.lang.Object other$labels = other.getLabels();
            if (this$labels == null ? other$labels != null : !this$labels.equals(other$labels)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof ZabbixMetrics.SampleBuilder;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final long $timestamp = this.getTimestamp();
            result = result * PRIME + (int) ($timestamp >>> 32 ^ $timestamp);
            final long $value = java.lang.Double.doubleToLongBits(this.getValue());
            result = result * PRIME + (int) ($value >>> 32 ^ $value);
            final java.lang.Object $name = this.getName();
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $hostName = this.getHostName();
            result = result * PRIME + ($hostName == null ? 43 : $hostName.hashCode());
            final java.lang.Object $labels = this.getLabels();
            result = result * PRIME + ($labels == null ? 43 : $labels.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ZabbixMetrics.SampleBuilder(name=" + this.getName() + ", hostName=" + this.getHostName() + ", timestamp=" + this.getTimestamp() + ", labels=" + this.getLabels() + ", value=" + this.getValue() + ")";
        }
    }
}
