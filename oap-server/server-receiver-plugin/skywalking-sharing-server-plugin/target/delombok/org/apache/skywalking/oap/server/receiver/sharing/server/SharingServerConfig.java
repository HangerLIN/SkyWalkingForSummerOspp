// Generated by delombok at Thu Apr 18 20:40:04 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.receiver.sharing.server;

import org.apache.skywalking.oap.server.library.module.ModuleConfig;

public class SharingServerConfig extends ModuleConfig {
    private String restHost;
    /**
     * Only setting the real port(not 0) makes the Armeria server online.
     */
    private int restPort;
    private String restContextPath;
    private int restMaxThreads = 200;
    private long restIdleTimeOut = 30000;
    private int restAcceptQueueSize = 0;
    private String gRPCHost;
    /**
     * Only setting the real port(not 0) makes the gRPC server online.
     */
    private int gRPCPort;
    private int maxConcurrentCallsPerConnection;
    private int maxMessageSize;
    private int gRPCThreadPoolSize;
    private int gRPCThreadPoolQueueSize;
    private String authentication;
    private boolean gRPCSslEnabled = false;
    private String gRPCSslKeyPath;
    private String gRPCSslCertChainPath;
    private String gRPCSslTrustedCAsPath;
    /**
     * The maximum size in bytes allowed for request headers.
     * Use -1 to disable it.
     */
    private int httpMaxRequestHeaderSize = 8192;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRestHost() {
        return this.restHost;
    }

    /**
     * Only setting the real port(not 0) makes the Armeria server online.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestPort() {
        return this.restPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRestContextPath() {
        return this.restContextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestMaxThreads() {
        return this.restMaxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getRestIdleTimeOut() {
        return this.restIdleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getRestAcceptQueueSize() {
        return this.restAcceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getGRPCHost() {
        return this.gRPCHost;
    }

    /**
     * Only setting the real port(not 0) makes the gRPC server online.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getGRPCPort() {
        return this.gRPCPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxConcurrentCallsPerConnection() {
        return this.maxConcurrentCallsPerConnection;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxMessageSize() {
        return this.maxMessageSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getGRPCThreadPoolSize() {
        return this.gRPCThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getGRPCThreadPoolQueueSize() {
        return this.gRPCThreadPoolQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getAuthentication() {
        return this.authentication;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isGRPCSslEnabled() {
        return this.gRPCSslEnabled;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getGRPCSslKeyPath() {
        return this.gRPCSslKeyPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getGRPCSslCertChainPath() {
        return this.gRPCSslCertChainPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getGRPCSslTrustedCAsPath() {
        return this.gRPCSslTrustedCAsPath;
    }

    /**
     * The maximum size in bytes allowed for request headers.
     * Use -1 to disable it.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getHttpMaxRequestHeaderSize() {
        return this.httpMaxRequestHeaderSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestHost(final String restHost) {
        this.restHost = restHost;
    }

    /**
     * Only setting the real port(not 0) makes the Armeria server online.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestPort(final int restPort) {
        this.restPort = restPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestContextPath(final String restContextPath) {
        this.restContextPath = restContextPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestMaxThreads(final int restMaxThreads) {
        this.restMaxThreads = restMaxThreads;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestIdleTimeOut(final long restIdleTimeOut) {
        this.restIdleTimeOut = restIdleTimeOut;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRestAcceptQueueSize(final int restAcceptQueueSize) {
        this.restAcceptQueueSize = restAcceptQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCHost(final String gRPCHost) {
        this.gRPCHost = gRPCHost;
    }

    /**
     * Only setting the real port(not 0) makes the gRPC server online.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCPort(final int gRPCPort) {
        this.gRPCPort = gRPCPort;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxConcurrentCallsPerConnection(final int maxConcurrentCallsPerConnection) {
        this.maxConcurrentCallsPerConnection = maxConcurrentCallsPerConnection;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxMessageSize(final int maxMessageSize) {
        this.maxMessageSize = maxMessageSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCThreadPoolSize(final int gRPCThreadPoolSize) {
        this.gRPCThreadPoolSize = gRPCThreadPoolSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCThreadPoolQueueSize(final int gRPCThreadPoolQueueSize) {
        this.gRPCThreadPoolQueueSize = gRPCThreadPoolQueueSize;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAuthentication(final String authentication) {
        this.authentication = authentication;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCSslEnabled(final boolean gRPCSslEnabled) {
        this.gRPCSslEnabled = gRPCSslEnabled;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCSslKeyPath(final String gRPCSslKeyPath) {
        this.gRPCSslKeyPath = gRPCSslKeyPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCSslCertChainPath(final String gRPCSslCertChainPath) {
        this.gRPCSslCertChainPath = gRPCSslCertChainPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setGRPCSslTrustedCAsPath(final String gRPCSslTrustedCAsPath) {
        this.gRPCSslTrustedCAsPath = gRPCSslTrustedCAsPath;
    }

    /**
     * The maximum size in bytes allowed for request headers.
     * Use -1 to disable it.
     */
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHttpMaxRequestHeaderSize(final int httpMaxRequestHeaderSize) {
        this.httpMaxRequestHeaderSize = httpMaxRequestHeaderSize;
    }
}
