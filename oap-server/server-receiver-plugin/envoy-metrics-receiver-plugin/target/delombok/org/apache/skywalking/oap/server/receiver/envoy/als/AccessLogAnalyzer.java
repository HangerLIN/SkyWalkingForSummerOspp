// Generated by delombok at Thu Apr 18 20:40:16 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.receiver.envoy.als;

import org.apache.skywalking.apm.network.servicemesh.v3.ServiceMeshMetrics;
import org.apache.skywalking.oap.server.library.module.ModuleManager;
import org.apache.skywalking.oap.server.library.module.ModuleStartException;
import org.apache.skywalking.oap.server.receiver.envoy.EnvoyMetricReceiverConfig;
import io.envoyproxy.envoy.config.core.v3.Node;
import io.envoyproxy.envoy.service.accesslog.v3.StreamAccessLogsMessage;

public interface AccessLogAnalyzer<E> {
    String name();

    void init(ModuleManager manager, EnvoyMetricReceiverConfig config) throws ModuleStartException;

    /**
     * The method works as a chain of analyzers. Logs are processed sequentially by analyzers one by one, the results of the previous analyzer are passed into the current one.
     * <p>
     * To do fast-success, the analyzer could simply check the results of the previous analyzer and return if not empty.
     *
     * @param result     of the previous analyzer.
     * @param identifier of the Envoy node where the logs are emitted.
     * @param entry      the log entry.
     * @param role       the role of the Envoy node where the logs are emitted.
     * @return the analysis results.
     */
    Result analysis(final Result result, final StreamAccessLogsMessage.Identifier identifier, final E entry, final Role role);

    default Role identify(StreamAccessLogsMessage.Identifier alsIdentifier, Role defaultRole) {
        if (alsIdentifier == null) {
            return defaultRole;
        }
        if (!alsIdentifier.hasNode()) {
            return defaultRole;
        }
        final Node node = alsIdentifier.getNode();
        final String id = node.getId();
        if (id.startsWith("router~")) {
            return Role.PROXY;
        } else if (id.startsWith("sidecar~")) {
            return Role.SIDECAR;
        }
        return defaultRole;
    }


    class Result {
        /**
         * The service representing the Envoy node.
         */
        private ServiceMetaInfo service;
        /**
         * The analyzed metrics result.
         */
        private ServiceMeshMetrics.Builder metrics;
        private boolean hasDownstreamMetrics;
        private boolean hasUpstreamMetrics;
        private final java.util.concurrent.atomic.AtomicReference<java.lang.Object> hasResult = new java.util.concurrent.atomic.AtomicReference<java.lang.Object>();

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private static ServiceMeshMetrics.Builder $default$metrics() {
            return ServiceMeshMetrics.newBuilder();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        Result(final ServiceMetaInfo service, final ServiceMeshMetrics.Builder metrics, final boolean hasDownstreamMetrics, final boolean hasUpstreamMetrics) {
            this.service = service;
            this.metrics = metrics;
            this.hasDownstreamMetrics = hasDownstreamMetrics;
            this.hasUpstreamMetrics = hasUpstreamMetrics;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class ResultBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private ServiceMetaInfo service;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private boolean metrics$set;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private ServiceMeshMetrics.Builder metrics$value;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private boolean hasDownstreamMetrics;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private boolean hasUpstreamMetrics;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            ResultBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public AccessLogAnalyzer.Result.ResultBuilder service(final ServiceMetaInfo service) {
                this.service = service;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public AccessLogAnalyzer.Result.ResultBuilder metrics(final ServiceMeshMetrics.Builder metrics) {
                this.metrics$value = metrics;
                metrics$set = true;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public AccessLogAnalyzer.Result.ResultBuilder hasDownstreamMetrics(final boolean hasDownstreamMetrics) {
                this.hasDownstreamMetrics = hasDownstreamMetrics;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public AccessLogAnalyzer.Result.ResultBuilder hasUpstreamMetrics(final boolean hasUpstreamMetrics) {
                this.hasUpstreamMetrics = hasUpstreamMetrics;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public AccessLogAnalyzer.Result build() {
                ServiceMeshMetrics.Builder metrics$value = this.metrics$value;
                if (!this.metrics$set) metrics$value = Result.$default$metrics();
                return new AccessLogAnalyzer.Result(this.service, metrics$value, this.hasDownstreamMetrics, this.hasUpstreamMetrics);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "AccessLogAnalyzer.Result.ResultBuilder(service=" + this.service + ", metrics$value=" + this.metrics$value + ", hasDownstreamMetrics=" + this.hasDownstreamMetrics + ", hasUpstreamMetrics=" + this.hasUpstreamMetrics + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static AccessLogAnalyzer.Result.ResultBuilder builder() {
            return new AccessLogAnalyzer.Result.ResultBuilder();
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public AccessLogAnalyzer.Result.ResultBuilder toBuilder() {
            return new AccessLogAnalyzer.Result.ResultBuilder().service(this.service).metrics(this.metrics).hasDownstreamMetrics(this.hasDownstreamMetrics).hasUpstreamMetrics(this.hasUpstreamMetrics);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ServiceMetaInfo getService() {
            return this.service;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ServiceMeshMetrics.Builder getMetrics() {
            return this.metrics;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean hasDownstreamMetrics() {
            return this.hasDownstreamMetrics;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean hasUpstreamMetrics() {
            return this.hasUpstreamMetrics;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setService(final ServiceMetaInfo service) {
            this.service = service;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setMetrics(final ServiceMeshMetrics.Builder metrics) {
            this.metrics = metrics;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public AccessLogAnalyzer.Result hasDownstreamMetrics(final boolean hasDownstreamMetrics) {
            this.hasDownstreamMetrics = hasDownstreamMetrics;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public AccessLogAnalyzer.Result hasUpstreamMetrics(final boolean hasUpstreamMetrics) {
            this.hasUpstreamMetrics = hasUpstreamMetrics;
            return this;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof AccessLogAnalyzer.Result)) return false;
            final AccessLogAnalyzer.Result other = (AccessLogAnalyzer.Result) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.hasDownstreamMetrics() != other.hasDownstreamMetrics()) return false;
            if (this.hasUpstreamMetrics() != other.hasUpstreamMetrics()) return false;
            if (this.hasResult() != other.hasResult()) return false;
            final java.lang.Object this$service = this.getService();
            final java.lang.Object other$service = other.getService();
            if (this$service == null ? other$service != null : !this$service.equals(other$service)) return false;
            final java.lang.Object this$metrics = this.getMetrics();
            final java.lang.Object other$metrics = other.getMetrics();
            if (this$metrics == null ? other$metrics != null : !this$metrics.equals(other$metrics)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof AccessLogAnalyzer.Result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + (this.hasDownstreamMetrics() ? 79 : 97);
            result = result * PRIME + (this.hasUpstreamMetrics() ? 79 : 97);
            result = result * PRIME + (this.hasResult() ? 79 : 97);
            final java.lang.Object $service = this.getService();
            result = result * PRIME + ($service == null ? 43 : $service.hashCode());
            final java.lang.Object $metrics = this.getMetrics();
            result = result * PRIME + ($metrics == null ? 43 : $metrics.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "AccessLogAnalyzer.Result(service=" + this.getService() + ", metrics=" + this.getMetrics() + ", hasDownstreamMetrics=" + this.hasDownstreamMetrics() + ", hasUpstreamMetrics=" + this.hasUpstreamMetrics() + ", hasResult=" + this.hasResult() + ")";
        }

        @java.lang.SuppressWarnings({"all", "unchecked"})
        @lombok.Generated
        public boolean hasResult() {
            java.lang.Object value = this.hasResult.get();
            if (value == null) {
                synchronized (this.hasResult) {
                    value = this.hasResult.get();
                    if (value == null) {
                        final boolean actualValue = hasDownstreamMetrics || hasUpstreamMetrics;
                        value = actualValue;
                        this.hasResult.set(value);
                    }
                }
            }
            return (java.lang.Boolean) value;
        }
    }
}
