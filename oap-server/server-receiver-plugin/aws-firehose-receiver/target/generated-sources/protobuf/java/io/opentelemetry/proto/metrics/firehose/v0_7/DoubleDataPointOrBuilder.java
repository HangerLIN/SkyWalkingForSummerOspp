// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.firehose.v0_7;

public interface DoubleDataPointOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.DoubleDataPoint)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> 
      getLabelsList();
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue getLabels(int index);
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder> 
      getLabelsOrBuilderList();
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder getLabelsOrBuilder(
      int index);

  /**
   * <pre>
   * start_time_unix_nano is the last time when the aggregation value was reset
   * to "zero". For some metric types this is ignored, see data types for more
   * details.
   * The aggregation value is over the time interval (start_time_unix_nano,
   * time_unix_nano].
   * 
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * Value of 0 indicates that the timestamp is unspecified. In that case the
   * timestamp may be decided by the backend.
   * </pre>
   *
   * <code>fixed64 start_time_unix_nano = 2;</code>
   * @return The startTimeUnixNano.
   */
  long getStartTimeUnixNano();

  /**
   * <pre>
   * time_unix_nano is the moment when this aggregation value was reported.
   * 
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 time_unix_nano = 3;</code>
   * @return The timeUnixNano.
   */
  long getTimeUnixNano();

  /**
   * <pre>
   * value itself.
   * </pre>
   *
   * <code>double value = 4;</code>
   * @return The value.
   */
  double getValue();

  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> 
      getExemplarsList();
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar getExemplars(int index);
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  int getExemplarsCount();
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder> 
      getExemplarsOrBuilderList();
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder getExemplarsOrBuilder(
      int index);
}
