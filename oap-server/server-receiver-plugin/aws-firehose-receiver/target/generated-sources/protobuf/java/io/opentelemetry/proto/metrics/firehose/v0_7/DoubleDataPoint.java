// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.firehose.v0_7;

/**
 * <pre>
 * DoubleDataPoint is a single data point in a timeseries that describes the
 * time-varying value of a double metric.
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.metrics.v1.DoubleDataPoint}
 */
public final class DoubleDataPoint extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.DoubleDataPoint)
    DoubleDataPointOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DoubleDataPoint.newBuilder() to construct.
  private DoubleDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DoubleDataPoint() {
    labels_ = java.util.Collections.emptyList();
    exemplars_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DoubleDataPoint();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DoubleDataPoint(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              labels_ = new java.util.ArrayList<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue>();
              mutable_bitField0_ |= 0x00000001;
            }
            labels_.add(
                input.readMessage(io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.parser(), extensionRegistry));
            break;
          }
          case 17: {

            startTimeUnixNano_ = input.readFixed64();
            break;
          }
          case 25: {

            timeUnixNano_ = input.readFixed64();
            break;
          }
          case 33: {

            value_ = input.readDouble();
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              exemplars_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar>();
              mutable_bitField0_ |= 0x00000002;
            }
            exemplars_.add(
                input.readMessage(io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        labels_ = java.util.Collections.unmodifiableList(labels_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opentelemetry.proto.metrics.firehose.v0_7.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_DoubleDataPoint_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.metrics.firehose.v0_7.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_DoubleDataPoint_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.class, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.Builder.class);
  }

  public static final int LABELS_FIELD_NUMBER = 1;
  private java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> labels_;
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> getLabelsList() {
    return labels_;
  }
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder> 
      getLabelsOrBuilderList() {
    return labels_;
  }
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  @java.lang.Override
  public int getLabelsCount() {
    return labels_.size();
  }
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue getLabels(int index) {
    return labels_.get(index);
  }
  /**
   * <pre>
   * The set of labels that uniquely identify this timeseries.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder getLabelsOrBuilder(
      int index) {
    return labels_.get(index);
  }

  public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
  private long startTimeUnixNano_;
  /**
   * <pre>
   * start_time_unix_nano is the last time when the aggregation value was reset
   * to "zero". For some metric types this is ignored, see data types for more
   * details.
   * The aggregation value is over the time interval (start_time_unix_nano,
   * time_unix_nano].
   * 
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * Value of 0 indicates that the timestamp is unspecified. In that case the
   * timestamp may be decided by the backend.
   * </pre>
   *
   * <code>fixed64 start_time_unix_nano = 2;</code>
   * @return The startTimeUnixNano.
   */
  @java.lang.Override
  public long getStartTimeUnixNano() {
    return startTimeUnixNano_;
  }

  public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
  private long timeUnixNano_;
  /**
   * <pre>
   * time_unix_nano is the moment when this aggregation value was reported.
   * 
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 time_unix_nano = 3;</code>
   * @return The timeUnixNano.
   */
  @java.lang.Override
  public long getTimeUnixNano() {
    return timeUnixNano_;
  }

  public static final int VALUE_FIELD_NUMBER = 4;
  private double value_;
  /**
   * <pre>
   * value itself.
   * </pre>
   *
   * <code>double value = 4;</code>
   * @return The value.
   */
  @java.lang.Override
  public double getValue() {
    return value_;
  }

  public static final int EXEMPLARS_FIELD_NUMBER = 5;
  private java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> exemplars_;
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  @java.lang.Override
  public java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> getExemplarsList() {
    return exemplars_;
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder> 
      getExemplarsOrBuilderList() {
    return exemplars_;
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  @java.lang.Override
  public int getExemplarsCount() {
    return exemplars_.size();
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar getExemplars(int index) {
    return exemplars_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder getExemplarsOrBuilder(
      int index) {
    return exemplars_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < labels_.size(); i++) {
      output.writeMessage(1, labels_.get(i));
    }
    if (startTimeUnixNano_ != 0L) {
      output.writeFixed64(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      output.writeFixed64(3, timeUnixNano_);
    }
    if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
      output.writeDouble(4, value_);
    }
    for (int i = 0; i < exemplars_.size(); i++) {
      output.writeMessage(5, exemplars_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < labels_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, labels_.get(i));
    }
    if (startTimeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(3, timeUnixNano_);
    }
    if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, value_);
    }
    for (int i = 0; i < exemplars_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, exemplars_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint other = (io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint) obj;

    if (!getLabelsList()
        .equals(other.getLabelsList())) return false;
    if (getStartTimeUnixNano()
        != other.getStartTimeUnixNano()) return false;
    if (getTimeUnixNano()
        != other.getTimeUnixNano()) return false;
    if (java.lang.Double.doubleToLongBits(getValue())
        != java.lang.Double.doubleToLongBits(
            other.getValue())) return false;
    if (!getExemplarsList()
        .equals(other.getExemplarsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getLabelsCount() > 0) {
      hash = (37 * hash) + LABELS_FIELD_NUMBER;
      hash = (53 * hash) + getLabelsList().hashCode();
    }
    hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStartTimeUnixNano());
    hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimeUnixNano());
    hash = (37 * hash) + VALUE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getValue()));
    if (getExemplarsCount() > 0) {
      hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
      hash = (53 * hash) + getExemplarsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * DoubleDataPoint is a single data point in a timeseries that describes the
   * time-varying value of a double metric.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.DoubleDataPoint}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.DoubleDataPoint)
      io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPointOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opentelemetry.proto.metrics.firehose.v0_7.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_DoubleDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.metrics.firehose.v0_7.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_DoubleDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.class, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.Builder.class);
    }

    // Construct using io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLabelsFieldBuilder();
        getExemplarsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        labelsBuilder_.clear();
      }
      startTimeUnixNano_ = 0L;

      timeUnixNano_ = 0L;

      value_ = 0D;

      if (exemplarsBuilder_ == null) {
        exemplars_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        exemplarsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opentelemetry.proto.metrics.firehose.v0_7.MetricsProto.internal_static_opentelemetry_proto_metrics_v1_DoubleDataPoint_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint getDefaultInstanceForType() {
      return io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint build() {
      io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint buildPartial() {
      io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint result = new io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint(this);
      int from_bitField0_ = bitField0_;
      if (labelsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.labels_ = labels_;
      } else {
        result.labels_ = labelsBuilder_.build();
      }
      result.startTimeUnixNano_ = startTimeUnixNano_;
      result.timeUnixNano_ = timeUnixNano_;
      result.value_ = value_;
      if (exemplarsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.exemplars_ = exemplars_;
      } else {
        result.exemplars_ = exemplarsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint) {
        return mergeFrom((io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint other) {
      if (other == io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint.getDefaultInstance()) return this;
      if (labelsBuilder_ == null) {
        if (!other.labels_.isEmpty()) {
          if (labels_.isEmpty()) {
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLabelsIsMutable();
            labels_.addAll(other.labels_);
          }
          onChanged();
        }
      } else {
        if (!other.labels_.isEmpty()) {
          if (labelsBuilder_.isEmpty()) {
            labelsBuilder_.dispose();
            labelsBuilder_ = null;
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000001);
            labelsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLabelsFieldBuilder() : null;
          } else {
            labelsBuilder_.addAllMessages(other.labels_);
          }
        }
      }
      if (other.getStartTimeUnixNano() != 0L) {
        setStartTimeUnixNano(other.getStartTimeUnixNano());
      }
      if (other.getTimeUnixNano() != 0L) {
        setTimeUnixNano(other.getTimeUnixNano());
      }
      if (other.getValue() != 0D) {
        setValue(other.getValue());
      }
      if (exemplarsBuilder_ == null) {
        if (!other.exemplars_.isEmpty()) {
          if (exemplars_.isEmpty()) {
            exemplars_ = other.exemplars_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureExemplarsIsMutable();
            exemplars_.addAll(other.exemplars_);
          }
          onChanged();
        }
      } else {
        if (!other.exemplars_.isEmpty()) {
          if (exemplarsBuilder_.isEmpty()) {
            exemplarsBuilder_.dispose();
            exemplarsBuilder_ = null;
            exemplars_ = other.exemplars_;
            bitField0_ = (bitField0_ & ~0x00000002);
            exemplarsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getExemplarsFieldBuilder() : null;
          } else {
            exemplarsBuilder_.addAllMessages(other.exemplars_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> labels_ =
      java.util.Collections.emptyList();
    private void ensureLabelsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        labels_ = new java.util.ArrayList<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue>(labels_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder> labelsBuilder_;

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> getLabelsList() {
      if (labelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(labels_);
      } else {
        return labelsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public int getLabelsCount() {
      if (labelsBuilder_ == null) {
        return labels_.size();
      } else {
        return labelsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue getLabels(int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);
      } else {
        return labelsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder setLabels(
        int index, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.set(index, value);
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder setLabels(
        int index, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.set(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder addLabels(io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder addLabels(
        int index, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(index, value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder addLabels(
        io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder addLabels(
        int index, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder addAllLabels(
        java.lang.Iterable<? extends io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue> values) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, labels_);
        onChanged();
      } else {
        labelsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder clearLabels() {
      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        labelsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public Builder removeLabels(int index) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.remove(index);
        onChanged();
      } else {
        labelsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder getLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);  } else {
        return labelsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder> 
         getLabelsOrBuilderList() {
      if (labelsBuilder_ != null) {
        return labelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(labels_);
      }
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder addLabelsBuilder() {
      return getLabelsFieldBuilder().addBuilder(
          io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder addLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder> 
         getLabelsBuilderList() {
      return getLabelsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder> 
        getLabelsFieldBuilder() {
      if (labelsBuilder_ == null) {
        labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValue.Builder, io.opentelemetry.proto.common.firehose.v0_7.StringKeyValueOrBuilder>(
                labels_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        labels_ = null;
      }
      return labelsBuilder_;
    }

    private long startTimeUnixNano_ ;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @param value The startTimeUnixNano to set.
     * @return This builder for chaining.
     */
    public Builder setStartTimeUnixNano(long value) {
      
      startTimeUnixNano_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartTimeUnixNano() {
      
      startTimeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long timeUnixNano_ ;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @param value The timeUnixNano to set.
     * @return This builder for chaining.
     */
    public Builder setTimeUnixNano(long value) {
      
      timeUnixNano_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * 
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeUnixNano() {
      
      timeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private double value_ ;
    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>double value = 4;</code>
     * @return The value.
     */
    @java.lang.Override
    public double getValue() {
      return value_;
    }
    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>double value = 4;</code>
     * @param value The value to set.
     * @return This builder for chaining.
     */
    public Builder setValue(double value) {
      
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>double value = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearValue() {
      
      value_ = 0D;
      onChanged();
      return this;
    }

    private java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> exemplars_ =
      java.util.Collections.emptyList();
    private void ensureExemplarsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        exemplars_ = new java.util.ArrayList<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar>(exemplars_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder> exemplarsBuilder_;

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> getExemplarsList() {
      if (exemplarsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(exemplars_);
      } else {
        return exemplarsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public int getExemplarsCount() {
      if (exemplarsBuilder_ == null) {
        return exemplars_.size();
      } else {
        return exemplarsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar getExemplars(int index) {
      if (exemplarsBuilder_ == null) {
        return exemplars_.get(index);
      } else {
        return exemplarsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder setExemplars(
        int index, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.set(index, value);
        onChanged();
      } else {
        exemplarsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder setExemplars(
        int index, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.set(index, builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder addExemplars(io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.add(value);
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder addExemplars(
        int index, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.add(index, value);
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder addExemplars(
        io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.add(builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder addExemplars(
        int index, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.add(index, builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder addAllExemplars(
        java.lang.Iterable<? extends io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar> values) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, exemplars_);
        onChanged();
      } else {
        exemplarsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder clearExemplars() {
      if (exemplarsBuilder_ == null) {
        exemplars_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        exemplarsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public Builder removeExemplars(int index) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.remove(index);
        onChanged();
      } else {
        exemplarsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder getExemplarsBuilder(
        int index) {
      return getExemplarsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      if (exemplarsBuilder_ == null) {
        return exemplars_.get(index);  } else {
        return exemplarsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder> 
         getExemplarsOrBuilderList() {
      if (exemplarsBuilder_ != null) {
        return exemplarsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(exemplars_);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder addExemplarsBuilder() {
      return getExemplarsFieldBuilder().addBuilder(
          io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder addExemplarsBuilder(
        int index) {
      return getExemplarsFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;</code>
     */
    public java.util.List<io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder> 
         getExemplarsBuilderList() {
      return getExemplarsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder> 
        getExemplarsFieldBuilder() {
      if (exemplarsBuilder_ == null) {
        exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplar.Builder, io.opentelemetry.proto.metrics.firehose.v0_7.DoubleExemplarOrBuilder>(
                exemplars_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        exemplars_ = null;
      }
      return exemplarsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  private static final io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint();
  }

  public static io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DoubleDataPoint>
      PARSER = new com.google.protobuf.AbstractParser<DoubleDataPoint>() {
    @java.lang.Override
    public DoubleDataPoint parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DoubleDataPoint(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DoubleDataPoint> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DoubleDataPoint> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.metrics.firehose.v0_7.DoubleDataPoint getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

