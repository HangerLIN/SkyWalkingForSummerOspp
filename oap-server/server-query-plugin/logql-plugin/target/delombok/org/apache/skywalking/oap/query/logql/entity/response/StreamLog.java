// Generated by delombok at Thu Apr 18 20:40:56 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.query.logql.entity.response;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class StreamLog {
    private ResultType resultType;
    private List<Result> result = new ArrayList<>();


    public static class Result {
        private Map<String, String> stream;
        private List<TimeValuePair> values;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Result() {
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Map<String, String> getStream() {
            return this.stream;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public List<TimeValuePair> getValues() {
            return this.values;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setStream(final Map<String, String> stream) {
            this.stream = stream;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setValues(final List<TimeValuePair> values) {
            this.values = values;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof StreamLog.Result)) return false;
            final StreamLog.Result other = (StreamLog.Result) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$stream = this.getStream();
            final java.lang.Object other$stream = other.getStream();
            if (this$stream == null ? other$stream != null : !this$stream.equals(other$stream)) return false;
            final java.lang.Object this$values = this.getValues();
            final java.lang.Object other$values = other.getValues();
            if (this$values == null ? other$values != null : !this$values.equals(other$values)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof StreamLog.Result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $stream = this.getStream();
            result = result * PRIME + ($stream == null ? 43 : $stream.hashCode());
            final java.lang.Object $values = this.getValues();
            result = result * PRIME + ($values == null ? 43 : $values.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "StreamLog.Result(stream=" + this.getStream() + ", values=" + this.getValues() + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public StreamLog() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ResultType getResultType() {
        return this.resultType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Result> getResult() {
        return this.result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setResultType(final ResultType resultType) {
        this.resultType = resultType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setResult(final List<Result> result) {
        this.result = result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof StreamLog)) return false;
        final StreamLog other = (StreamLog) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$resultType = this.getResultType();
        final java.lang.Object other$resultType = other.getResultType();
        if (this$resultType == null ? other$resultType != null : !this$resultType.equals(other$resultType)) return false;
        final java.lang.Object this$result = this.getResult();
        final java.lang.Object other$result = other.getResult();
        if (this$result == null ? other$result != null : !this$result.equals(other$result)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof StreamLog;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $resultType = this.getResultType();
        result = result * PRIME + ($resultType == null ? 43 : $resultType.hashCode());
        final java.lang.Object $result = this.getResult();
        result = result * PRIME + ($result == null ? 43 : $result.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "StreamLog(resultType=" + this.getResultType() + ", result=" + this.getResult() + ")";
    }
}
