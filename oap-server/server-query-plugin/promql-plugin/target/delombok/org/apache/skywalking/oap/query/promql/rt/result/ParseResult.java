// Generated by delombok at Thu Apr 18 20:40:55 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.query.promql.rt.result;

import org.antlr.v4.runtime.tree.ParseTree;
import org.apache.skywalking.oap.query.promql.entity.ErrorType;

public class ParseResult {
    private ParseTree parseTree;
    private ParseResultType resultType;
    private boolean rangeExpression = false;
    private ErrorType errorType;
    private String errorInfo;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ParseResult() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ParseTree getParseTree() {
        return this.parseTree;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ParseResultType getResultType() {
        return this.resultType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isRangeExpression() {
        return this.rangeExpression;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ErrorType getErrorType() {
        return this.errorType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getErrorInfo() {
        return this.errorInfo;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setParseTree(final ParseTree parseTree) {
        this.parseTree = parseTree;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setResultType(final ParseResultType resultType) {
        this.resultType = resultType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRangeExpression(final boolean rangeExpression) {
        this.rangeExpression = rangeExpression;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setErrorType(final ErrorType errorType) {
        this.errorType = errorType;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setErrorInfo(final String errorInfo) {
        this.errorInfo = errorInfo;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ParseResult)) return false;
        final ParseResult other = (ParseResult) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isRangeExpression() != other.isRangeExpression()) return false;
        final java.lang.Object this$parseTree = this.getParseTree();
        final java.lang.Object other$parseTree = other.getParseTree();
        if (this$parseTree == null ? other$parseTree != null : !this$parseTree.equals(other$parseTree)) return false;
        final java.lang.Object this$resultType = this.getResultType();
        final java.lang.Object other$resultType = other.getResultType();
        if (this$resultType == null ? other$resultType != null : !this$resultType.equals(other$resultType)) return false;
        final java.lang.Object this$errorType = this.getErrorType();
        final java.lang.Object other$errorType = other.getErrorType();
        if (this$errorType == null ? other$errorType != null : !this$errorType.equals(other$errorType)) return false;
        final java.lang.Object this$errorInfo = this.getErrorInfo();
        final java.lang.Object other$errorInfo = other.getErrorInfo();
        if (this$errorInfo == null ? other$errorInfo != null : !this$errorInfo.equals(other$errorInfo)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ParseResult;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isRangeExpression() ? 79 : 97);
        final java.lang.Object $parseTree = this.getParseTree();
        result = result * PRIME + ($parseTree == null ? 43 : $parseTree.hashCode());
        final java.lang.Object $resultType = this.getResultType();
        result = result * PRIME + ($resultType == null ? 43 : $resultType.hashCode());
        final java.lang.Object $errorType = this.getErrorType();
        result = result * PRIME + ($errorType == null ? 43 : $errorType.hashCode());
        final java.lang.Object $errorInfo = this.getErrorInfo();
        result = result * PRIME + ($errorInfo == null ? 43 : $errorInfo.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ParseResult(parseTree=" + this.getParseTree() + ", resultType=" + this.getResultType() + ", rangeExpression=" + this.isRangeExpression() + ", errorType=" + this.getErrorType() + ", errorInfo=" + this.getErrorInfo() + ")";
    }
}
