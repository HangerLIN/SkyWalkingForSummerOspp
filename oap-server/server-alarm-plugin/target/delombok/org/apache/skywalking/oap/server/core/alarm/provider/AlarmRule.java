// Generated by delombok at Thu Apr 18 20:40:58 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.alarm.provider;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.antlr.v4.runtime.tree.ParseTree;
import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;
import org.apache.skywalking.mqe.rt.exception.ParseErrorListener;
import org.apache.skywalking.mqe.rt.grammar.MQELexer;
import org.apache.skywalking.mqe.rt.grammar.MQEParser;
import org.apache.skywalking.mqe.rt.type.ExpressionResult;
import org.apache.skywalking.mqe.rt.type.ExpressionResultType;
import org.apache.skywalking.oap.server.core.alarm.provider.expr.rt.AlarmMQEVerifyVisitor;
import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
import org.apache.skywalking.oap.server.library.util.StringUtil;

public class AlarmRule {
    private String alarmRuleName;
    private String expression;
    private Set<String> includeMetrics;
    private ArrayList<String> includeNames;
    private String includeNamesRegex;
    private ArrayList<String> excludeNames;
    private String excludeNamesRegex;
    private int period;
    private int silencePeriod;
    private String message;
    private Map<String, String> tags;
    private Set<String> hooks;
    private int maxTrendRange;

    /**
     * Init includeMetrics and verify the expression.
     * ValueColumnMetadata need init metrics info, don't invoke before the module finishes start.
     */
    public void setExpression(final String expression) throws IllegalExpressionException {
        MQELexer lexer = new MQELexer(CharStreams.fromString(expression));
        lexer.addErrorListener(new ParseErrorListener());
        MQEParser parser = new MQEParser(new CommonTokenStream(lexer));
        parser.addErrorListener(new ParseErrorListener());
        ParseTree tree;
        try {
            tree = parser.expression();
        } catch (ParseCancellationException e) {
            throw new IllegalExpressionException("Expression: " + expression + " error: " + e.getMessage());
        }
        AlarmMQEVerifyVisitor visitor = new AlarmMQEVerifyVisitor();
        ExpressionResult parseResult = visitor.visit(tree);
        if (StringUtil.isNotBlank(parseResult.getError())) {
            throw new IllegalExpressionException("Expression: " + expression + " error: " + parseResult.getError());
        }
        if (!parseResult.isBoolResult()) {
            throw new IllegalExpressionException("Expression: " + expression + " root operation is not a Compare Operation.");
        }
        if (ExpressionResultType.SINGLE_VALUE != parseResult.getType()) {
            throw new IllegalExpressionException("Expression: " + expression + " is not a SINGLE_VALUE result expression.");
        }
        verifyIncludeMetrics(visitor.getIncludeMetrics(), expression);
        this.expression = expression;
        this.includeMetrics = visitor.getIncludeMetrics();
        this.maxTrendRange = visitor.getMaxTrendRange();
    }

    private void verifyIncludeMetrics(Set<String> includeMetrics, String expression) throws IllegalExpressionException {
        Set<String> scopeSet = new HashSet<>();
        for (String metricName : includeMetrics) {
            scopeSet.add(ValueColumnMetadata.INSTANCE.getScope(metricName).name());
        }
        if (scopeSet.size() != 1) {
            throw new IllegalExpressionException("The metrics in expression: " + expression + " must have the same scope level, but got: " + scopeSet + ".");
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public AlarmRule() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getAlarmRuleName() {
        return this.alarmRuleName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getExpression() {
        return this.expression;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Set<String> getIncludeMetrics() {
        return this.includeMetrics;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ArrayList<String> getIncludeNames() {
        return this.includeNames;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getIncludeNamesRegex() {
        return this.includeNamesRegex;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ArrayList<String> getExcludeNames() {
        return this.excludeNames;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getExcludeNamesRegex() {
        return this.excludeNamesRegex;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getPeriod() {
        return this.period;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getSilencePeriod() {
        return this.silencePeriod;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getMessage() {
        return this.message;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Set<String> getHooks() {
        return this.hooks;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getMaxTrendRange() {
        return this.maxTrendRange;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setAlarmRuleName(final String alarmRuleName) {
        this.alarmRuleName = alarmRuleName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setIncludeNames(final ArrayList<String> includeNames) {
        this.includeNames = includeNames;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setIncludeNamesRegex(final String includeNamesRegex) {
        this.includeNamesRegex = includeNamesRegex;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setExcludeNames(final ArrayList<String> excludeNames) {
        this.excludeNames = excludeNames;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setExcludeNamesRegex(final String excludeNamesRegex) {
        this.excludeNamesRegex = excludeNamesRegex;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPeriod(final int period) {
        this.period = period;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setSilencePeriod(final int silencePeriod) {
        this.silencePeriod = silencePeriod;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMessage(final String message) {
        this.message = message;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTags(final Map<String, String> tags) {
        this.tags = tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHooks(final Set<String> hooks) {
        this.hooks = hooks;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMaxTrendRange(final int maxTrendRange) {
        this.maxTrendRange = maxTrendRange;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "AlarmRule(alarmRuleName=" + this.getAlarmRuleName() + ", expression=" + this.getExpression() + ", includeMetrics=" + this.getIncludeMetrics() + ", includeNames=" + this.getIncludeNames() + ", includeNamesRegex=" + this.getIncludeNamesRegex() + ", excludeNames=" + this.getExcludeNames() + ", excludeNamesRegex=" + this.getExcludeNamesRegex() + ", period=" + this.getPeriod() + ", silencePeriod=" + this.getSilencePeriod() + ", message=" + this.getMessage() + ", tags=" + this.getTags() + ", hooks=" + this.getHooks() + ", maxTrendRange=" + this.getMaxTrendRange() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AlarmRule)) return false;
        final AlarmRule other = (AlarmRule) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getPeriod() != other.getPeriod()) return false;
        if (this.getSilencePeriod() != other.getSilencePeriod()) return false;
        if (this.getMaxTrendRange() != other.getMaxTrendRange()) return false;
        final java.lang.Object this$alarmRuleName = this.getAlarmRuleName();
        final java.lang.Object other$alarmRuleName = other.getAlarmRuleName();
        if (this$alarmRuleName == null ? other$alarmRuleName != null : !this$alarmRuleName.equals(other$alarmRuleName)) return false;
        final java.lang.Object this$expression = this.getExpression();
        final java.lang.Object other$expression = other.getExpression();
        if (this$expression == null ? other$expression != null : !this$expression.equals(other$expression)) return false;
        final java.lang.Object this$includeMetrics = this.getIncludeMetrics();
        final java.lang.Object other$includeMetrics = other.getIncludeMetrics();
        if (this$includeMetrics == null ? other$includeMetrics != null : !this$includeMetrics.equals(other$includeMetrics)) return false;
        final java.lang.Object this$includeNames = this.getIncludeNames();
        final java.lang.Object other$includeNames = other.getIncludeNames();
        if (this$includeNames == null ? other$includeNames != null : !this$includeNames.equals(other$includeNames)) return false;
        final java.lang.Object this$includeNamesRegex = this.getIncludeNamesRegex();
        final java.lang.Object other$includeNamesRegex = other.getIncludeNamesRegex();
        if (this$includeNamesRegex == null ? other$includeNamesRegex != null : !this$includeNamesRegex.equals(other$includeNamesRegex)) return false;
        final java.lang.Object this$excludeNames = this.getExcludeNames();
        final java.lang.Object other$excludeNames = other.getExcludeNames();
        if (this$excludeNames == null ? other$excludeNames != null : !this$excludeNames.equals(other$excludeNames)) return false;
        final java.lang.Object this$excludeNamesRegex = this.getExcludeNamesRegex();
        final java.lang.Object other$excludeNamesRegex = other.getExcludeNamesRegex();
        if (this$excludeNamesRegex == null ? other$excludeNamesRegex != null : !this$excludeNamesRegex.equals(other$excludeNamesRegex)) return false;
        final java.lang.Object this$message = this.getMessage();
        final java.lang.Object other$message = other.getMessage();
        if (this$message == null ? other$message != null : !this$message.equals(other$message)) return false;
        final java.lang.Object this$tags = this.getTags();
        final java.lang.Object other$tags = other.getTags();
        if (this$tags == null ? other$tags != null : !this$tags.equals(other$tags)) return false;
        final java.lang.Object this$hooks = this.getHooks();
        final java.lang.Object other$hooks = other.getHooks();
        if (this$hooks == null ? other$hooks != null : !this$hooks.equals(other$hooks)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AlarmRule;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getPeriod();
        result = result * PRIME + this.getSilencePeriod();
        result = result * PRIME + this.getMaxTrendRange();
        final java.lang.Object $alarmRuleName = this.getAlarmRuleName();
        result = result * PRIME + ($alarmRuleName == null ? 43 : $alarmRuleName.hashCode());
        final java.lang.Object $expression = this.getExpression();
        result = result * PRIME + ($expression == null ? 43 : $expression.hashCode());
        final java.lang.Object $includeMetrics = this.getIncludeMetrics();
        result = result * PRIME + ($includeMetrics == null ? 43 : $includeMetrics.hashCode());
        final java.lang.Object $includeNames = this.getIncludeNames();
        result = result * PRIME + ($includeNames == null ? 43 : $includeNames.hashCode());
        final java.lang.Object $includeNamesRegex = this.getIncludeNamesRegex();
        result = result * PRIME + ($includeNamesRegex == null ? 43 : $includeNamesRegex.hashCode());
        final java.lang.Object $excludeNames = this.getExcludeNames();
        result = result * PRIME + ($excludeNames == null ? 43 : $excludeNames.hashCode());
        final java.lang.Object $excludeNamesRegex = this.getExcludeNamesRegex();
        result = result * PRIME + ($excludeNamesRegex == null ? 43 : $excludeNamesRegex.hashCode());
        final java.lang.Object $message = this.getMessage();
        result = result * PRIME + ($message == null ? 43 : $message.hashCode());
        final java.lang.Object $tags = this.getTags();
        result = result * PRIME + ($tags == null ? 43 : $tags.hashCode());
        final java.lang.Object $hooks = this.getHooks();
        result = result * PRIME + ($hooks == null ? 43 : $hooks.hashCode());
        return result;
    }
}
