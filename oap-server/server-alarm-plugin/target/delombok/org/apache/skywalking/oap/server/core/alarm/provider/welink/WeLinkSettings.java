// Generated by delombok at Thu Apr 18 20:40:58 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.core.alarm.provider.welink;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.skywalking.oap.server.core.alarm.provider.AlarmHookSettings;
import org.apache.skywalking.oap.server.core.alarm.provider.AlarmHooksType;

public class WeLinkSettings extends AlarmHookSettings {
    private String textTemplate;
    private List<WebHookUrl> webhooks = new ArrayList<>();

    public WeLinkSettings(final String name, final AlarmHooksType type, final boolean isDefault) {
        super(name, type, isDefault);
    }


    public static class WebHookUrl {
        // The unique identity of the application, used for interface authentication to obtain access_token
        private final String clientId;
        // The application key is used for interface authentication to obtain access_token
        private final String clientSecret;
        // The url get access token
        private final String accessTokenUrl;
        // The url to send message
        private final String messageUrl;
        // Name display in group
        private final String robotName;
        // The groupIds message to send
        private final String groupIds;

        public static WebHookUrl generateFromMap(Map<String, String> params) {
            String clientId = params.get("client-id");
            String clientSecret = params.get("client-secret");
            String accessTokenUrl = params.get("access-token-url");
            String messageUrl = params.get("message-url");
            String groupIds = params.get("group-ids");
            String robotName = params.getOrDefault("robot-name", "robot");
            return new WebHookUrl(clientId, clientSecret, accessTokenUrl, messageUrl, robotName, groupIds);
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public WebHookUrl(final String clientId, final String clientSecret, final String accessTokenUrl, final String messageUrl, final String robotName, final String groupIds) {
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.accessTokenUrl = accessTokenUrl;
            this.messageUrl = messageUrl;
            this.robotName = robotName;
            this.groupIds = groupIds;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getClientId() {
            return this.clientId;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getClientSecret() {
            return this.clientSecret;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getAccessTokenUrl() {
            return this.accessTokenUrl;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getMessageUrl() {
            return this.messageUrl;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getRobotName() {
            return this.robotName;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getGroupIds() {
            return this.groupIds;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "WeLinkSettings.WebHookUrl(clientId=" + this.getClientId() + ", clientSecret=" + this.getClientSecret() + ", accessTokenUrl=" + this.getAccessTokenUrl() + ", messageUrl=" + this.getMessageUrl() + ", robotName=" + this.getRobotName() + ", groupIds=" + this.getGroupIds() + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTextTemplate(final String textTemplate) {
        this.textTemplate = textTemplate;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setWebhooks(final List<WebHookUrl> webhooks) {
        this.webhooks = webhooks;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getTextTemplate() {
        return this.textTemplate;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<WebHookUrl> getWebhooks() {
        return this.webhooks;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "WeLinkSettings(textTemplate=" + this.getTextTemplate() + ", webhooks=" + this.getWebhooks() + ")";
    }
}
