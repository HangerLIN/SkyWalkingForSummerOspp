// Generated by delombok at Thu Apr 18 20:40:32 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.storage.plugin.banyandb;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonObject;
import io.grpc.Status;
import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import org.apache.skywalking.banyandb.v1.client.AbstractQuery;
import org.apache.skywalking.banyandb.v1.client.BanyanDBClient;
import org.apache.skywalking.banyandb.v1.client.grpc.exception.BanyanDBException;
import org.apache.skywalking.banyandb.v1.client.metadata.Catalog;
import org.apache.skywalking.banyandb.v1.client.metadata.Duration;
import org.apache.skywalking.banyandb.v1.client.metadata.Group;
import org.apache.skywalking.banyandb.v1.client.metadata.IndexRule;
import org.apache.skywalking.banyandb.v1.client.metadata.IntervalRule;
import org.apache.skywalking.banyandb.v1.client.metadata.Measure;
import org.apache.skywalking.banyandb.v1.client.metadata.NamedSchema;
import org.apache.skywalking.banyandb.v1.client.metadata.ResourceExist;
import org.apache.skywalking.banyandb.v1.client.metadata.Stream;
import org.apache.skywalking.banyandb.v1.client.metadata.TagFamilySpec;
import org.apache.skywalking.banyandb.v1.client.metadata.TopNAggregation;
import org.apache.skywalking.oap.server.core.analysis.DownSampling;
import org.apache.skywalking.oap.server.core.analysis.metrics.IntList;
import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
import org.apache.skywalking.oap.server.core.analysis.record.Record;
import org.apache.skywalking.oap.server.core.config.ConfigService;
import org.apache.skywalking.oap.server.core.query.enumeration.Step;
import org.apache.skywalking.oap.server.core.storage.StorageException;
import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
import org.apache.skywalking.oap.server.core.storage.annotation.Column;
import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
import org.apache.skywalking.oap.server.core.storage.model.Model;
import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;
import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
import org.apache.skywalking.oap.server.library.util.CollectionUtils;
import org.apache.skywalking.oap.server.library.util.StringUtil;

public enum MetadataRegistry {
    INSTANCE;
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MetadataRegistry.class);
    private static final ObjectMapper MAPPER = new ObjectMapper();
    private final Map<String, Schema> registry = new HashMap<>();
    private Map<String, GroupSetting> specificGroupSettings = new HashMap<>();

    public Stream registerStreamModel(Model model, BanyanDBStorageConfig config, ConfigService configService) {
        final SchemaMetadata schemaMetadata = parseMetadata(model, config, configService);
        Schema.SchemaBuilder schemaBuilder = Schema.builder().metadata(schemaMetadata);
        Map<String, ModelColumn> modelColumnMap = model.getColumns().stream().collect(Collectors.toMap(modelColumn -> modelColumn.getColumnName().getStorageName(), Function.identity()));
        // parse and set sharding keys
        List<String> shardingColumns = parseEntityNames(modelColumnMap);
        if (shardingColumns.isEmpty()) {
            throw new IllegalStateException("sharding keys of model[stream." + model.getName() + "] must not be empty");
        }
        // parse tag metadata
        // this can be used to build both
        // 1) a list of TagFamilySpec,
        // 2) a list of IndexRule,
        List<TagMetadata> tags = parseTagMetadata(model, schemaBuilder, shardingColumns);
        List<TagFamilySpec> tagFamilySpecs = schemaMetadata.extractTagFamilySpec(tags, false);
        // iterate over tagFamilySpecs to save tag names
        for (final TagFamilySpec tagFamilySpec : tagFamilySpecs) {
            for (final TagFamilySpec.TagSpec tagSpec : tagFamilySpec.tagSpecs()) {
                schemaBuilder.tag(tagSpec.getTagName());
            }
        }
        String timestampColumn4Stream = model.getBanyanDBModelExtension().getTimestampColumn();
        if (StringUtil.isBlank(timestampColumn4Stream)) {
            throw new IllegalStateException("Model[stream." + model.getName() + "] miss defined @BanyanDB.TimestampColumn");
        }
        schemaBuilder.timestampColumn4Stream(timestampColumn4Stream);
        List<IndexRule> indexRules = tags.stream().map(TagMetadata::getIndexRule).filter(Objects::nonNull).collect(Collectors.toList());
        final Stream.Builder builder = Stream.create(schemaMetadata.getGroup(), schemaMetadata.name());
        builder.setEntityRelativeTags(shardingColumns);
        builder.addTagFamilies(tagFamilySpecs);
        builder.addIndexes(indexRules);
        registry.put(schemaMetadata.name(), schemaBuilder.build());
        return builder.build();
    }

    public Measure registerMeasureModel(Model model, BanyanDBStorageConfig config, ConfigService configService) throws StorageException {
        final SchemaMetadata schemaMetadata = parseMetadata(model, config, configService);
        Schema.SchemaBuilder schemaBuilder = Schema.builder().metadata(schemaMetadata);
        Map<String, ModelColumn> modelColumnMap = model.getColumns().stream().collect(Collectors.toMap(modelColumn -> modelColumn.getColumnName().getStorageName(), Function.identity()));
        // parse and set sharding keys
        List<String> shardingColumns = parseEntityNames(modelColumnMap);
        if (shardingColumns.isEmpty()) {
            throw new StorageException("model " + model.getName() + " doesn\'t contain series id");
        }
        // parse tag metadata
        // this can be used to build both
        // 1) a list of TagFamilySpec,
        // 2) a list of IndexRule,
        MeasureMetadata tagsAndFields = parseTagAndFieldMetadata(model, schemaBuilder, shardingColumns);
        List<TagFamilySpec> tagFamilySpecs = schemaMetadata.extractTagFamilySpec(tagsAndFields.tags, model.getBanyanDBModelExtension().isStoreIDTag());
        // iterate over tagFamilySpecs to save tag names
        for (final TagFamilySpec tagFamilySpec : tagFamilySpecs) {
            for (final TagFamilySpec.TagSpec tagSpec : tagFamilySpec.tagSpecs()) {
                schemaBuilder.tag(tagSpec.getTagName());
            }
        }
        List<IndexRule> indexRules = tagsAndFields.tags.stream().map(TagMetadata::getIndexRule).filter(Objects::nonNull).collect(Collectors.toList());
        if (model.getBanyanDBModelExtension().isStoreIDTag()) {
            indexRules.add(IndexRule.create(BanyanDBConverter.ID, IndexRule.IndexType.TREE, IndexRule.IndexLocation.SERIES));
        }
        final Measure.Builder builder = Measure.create(schemaMetadata.getGroup(), schemaMetadata.name(), downSamplingDuration(model.getDownsampling()));
        builder.setEntityRelativeTags(shardingColumns);
        builder.addTagFamilies(tagFamilySpecs);
        if (!indexRules.isEmpty()) {
            builder.addIndexes(indexRules);
        }
        // parse and set field
        for (Measure.FieldSpec field : tagsAndFields.fields) {
            builder.addField(field);
            schemaBuilder.field(field.getName());
        }
        // parse TopN
        schemaBuilder.topNSpec(parseTopNSpec(model, schemaMetadata.name()));
        registry.put(schemaMetadata.name(), schemaBuilder.build());
        return builder.build();
    }

    private TopNSpec parseTopNSpec(final Model model, final String measureName) throws StorageException {
        if (model.getBanyanDBModelExtension().getTopN() == null) {
            return null;
        }
        final Optional<ValueColumnMetadata.ValueColumn> valueColumnOpt = ValueColumnMetadata.INSTANCE.readValueColumnDefinition(model.getName());
        if (valueColumnOpt.isEmpty() || valueColumnOpt.get().getDataType() != Column.ValueDataType.COMMON_VALUE) {
            // skip non-single valued metrics
            return null;
        }
        if (CollectionUtils.isEmpty(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())) {
            throw new StorageException("invalid groupBy tags: " + model.getBanyanDBModelExtension().getTopN().getGroupByTagNames());
        }
        return  // include both TopN and BottomN
        TopNSpec.builder().name(measureName + "_topn").lruSize(model.getBanyanDBModelExtension().getTopN().getLruSize()).countersNumber(model.getBanyanDBModelExtension().getTopN().getCountersNumber()).fieldName(valueColumnOpt.get().getValueCName()).groupByTagNames(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames()).sort(AbstractQuery.Sort.UNSPECIFIED).build();
    }

    public Schema findMetadata(final Model model) {
        if (model.isRecord()) {
            return findRecordMetadata(model.getName());
        }
        return findMetadata(model.getName(), model.getDownsampling());
    }

    public Schema findRecordMetadata(final String recordModelName) {
        final Schema s = this.registry.get(recordModelName);
        if (s == null) {
            return null;
        }
        // impose sanity check
        if (s.getMetadata().getKind() != Kind.STREAM) {
            throw new IllegalArgumentException(recordModelName + "is not a record");
        }
        return s;
    }

    static DownSampling deriveFromStep(Step step) {
        switch (step) {
        case DAY: 
            return DownSampling.Day;
        case HOUR: 
            return DownSampling.Hour;
        case SECOND: 
            return DownSampling.Second;
        default: 
            return DownSampling.Minute;
        }
    }

    public Schema findMetadata(final String modelName, Step step) {
        return findMetadata(modelName, deriveFromStep(step));
    }

    /**
     * Find metadata with down-sampling
     */
    public Schema findMetadata(final String modelName, DownSampling downSampling) {
        return this.registry.get(SchemaMetadata.formatName(modelName, downSampling));
    }

    private Measure.FieldSpec parseFieldSpec(ModelColumn modelColumn) {
        String colName = modelColumn.getColumnName().getStorageName();
        if (String.class.equals(modelColumn.getType())) {
            return Measure.FieldSpec.newIntField(colName).compressWithZSTD().build();
        } else if (long.class.equals(modelColumn.getType()) || int.class.equals(modelColumn.getType())) {
            return Measure.FieldSpec.newIntField(colName).compressWithZSTD().encodeWithGorilla().build();
        } else if (StorageDataComplexObject.class.isAssignableFrom(modelColumn.getType()) || JsonObject.class.equals(modelColumn.getType())) {
            return Measure.FieldSpec.newStringField(colName).compressWithZSTD().build();
        } else if (double.class.equals(modelColumn.getType())) {
            // TODO: natively support double/float in BanyanDB
            log.warn("Double is stored as binary");
            return Measure.FieldSpec.newBinaryField(colName).compressWithZSTD().build();
        } else {
            throw new UnsupportedOperationException(modelColumn.getType().getSimpleName() + " is not supported for field");
        }
    }

    Duration downSamplingDuration(DownSampling downSampling) {
        switch (downSampling) {
        case Hour: 
            return Duration.ofHours(1);
        case Minute: 
            return Duration.ofMinutes(1);
        case Day: 
            return Duration.ofDays(1);
        default: 
            throw new UnsupportedOperationException("unsupported downSampling interval");
        }
    }

    IndexRule parseIndexRule(String tagName, ModelColumn modelColumn) {
        // TODO: we need to add support index type in the OAP core
        // Currently, we only register INVERTED type
        // if it is null, it must be a user-defined tag
        if (modelColumn == null) {
            return IndexRule.create(tagName, IndexRule.IndexType.INVERTED, IndexRule.IndexLocation.SERIES);
        }
        if (modelColumn.getBanyanDBExtension().isGlobalIndexing()) {
            return IndexRule.create(tagName, parseIndexType(modelColumn.getBanyanDBExtension().getIndexType()), IndexRule.IndexLocation.GLOBAL);
        } else {
            return IndexRule.create(tagName, parseIndexType(modelColumn.getBanyanDBExtension().getIndexType()), IndexRule.IndexLocation.SERIES);
        }
    }

    private static IndexRule.IndexType parseIndexType(BanyanDB.IndexRule.IndexType indexType) {
        if (indexType == BanyanDB.IndexRule.IndexType.INVERTED) {
            return IndexRule.IndexType.INVERTED;
        }
        return IndexRule.IndexType.TREE;
    }

    /**
     * Parse sharding keys from the {@link Model}
     *
     * @param modelColumnMap the mapping between column storageName and {@link ModelColumn}
     * @return a list of column names in strict order
     */
    List<String> parseEntityNames(Map<String, ModelColumn> modelColumnMap) {
        List<ModelColumn> shardingColumns = new ArrayList<>();
        for (final ModelColumn col : modelColumnMap.values()) {
            if (col.getBanyanDBExtension().isShardingKey()) {
                shardingColumns.add(col);
            }
        }
        return shardingColumns.stream().sorted(Comparator.comparingInt(col -> col.getBanyanDBExtension().getShardingKeyIdx())).map(col -> col.getColumnName().getName()).collect(Collectors.toList());
    }

    /**
     * Parse tags' metadata for {@link Stream}
     * Every field of a class is registered as a {@link org.apache.skywalking.banyandb.model.v1.BanyandbModel.Tag}
     * regardless of its dataType.
     *
     * @since 9.4.0 Skip {@link Record#TIME_BUCKET}
     */
    List<TagMetadata> parseTagMetadata(Model model, Schema.SchemaBuilder builder, List<String> shardingColumns) {
        List<TagMetadata> tagMetadataList = new ArrayList<>();
        for (final ModelColumn col : model.getColumns()) {
            final String columnStorageName = col.getColumnName().getStorageName();
            if (columnStorageName.equals(Record.TIME_BUCKET)) {
                continue;
            }
            final TagFamilySpec.TagSpec tagSpec = parseTagSpec(col);
            builder.spec(columnStorageName, new ColumnSpec(ColumnType.TAG, col.getType()));
            String colName = col.getColumnName().getStorageName();
            if (!shardingColumns.contains(colName) && col.getBanyanDBExtension().shouldIndex()) {
                // build indexRule
                IndexRule indexRule = parseIndexRule(tagSpec.getTagName(), col);
                tagMetadataList.add(new TagMetadata(indexRule, tagSpec));
            } else {
                tagMetadataList.add(new TagMetadata(null, tagSpec));
            }
        }
        return tagMetadataList;
    }


    private static class MeasureMetadata {
        private final List<TagMetadata> tags;
        private final List<Measure.FieldSpec> fields;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        MeasureMetadata(final List<TagMetadata> tags, final List<Measure.FieldSpec> fields) {
            this.tags = tags;
            this.fields = fields;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class MeasureMetadataBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<TagMetadata> tags;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<Measure.FieldSpec> fields;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            MeasureMetadataBuilder() {
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder tag(final TagMetadata tag) {
                if (this.tags == null) this.tags = new java.util.ArrayList<TagMetadata>();
                this.tags.add(tag);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder tags(final java.util.Collection<? extends TagMetadata> tags) {
                if (tags == null) {
                    throw new java.lang.NullPointerException("tags cannot be null");
                }
                if (this.tags == null) this.tags = new java.util.ArrayList<TagMetadata>();
                this.tags.addAll(tags);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder clearTags() {
                if (this.tags != null) this.tags.clear();
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder field(final Measure.FieldSpec field) {
                if (this.fields == null) this.fields = new java.util.ArrayList<Measure.FieldSpec>();
                this.fields.add(field);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder fields(final java.util.Collection<? extends Measure.FieldSpec> fields) {
                if (fields == null) {
                    throw new java.lang.NullPointerException("fields cannot be null");
                }
                if (this.fields == null) this.fields = new java.util.ArrayList<Measure.FieldSpec>();
                this.fields.addAll(fields);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder clearFields() {
                if (this.fields != null) this.fields.clear();
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.MeasureMetadata build() {
                java.util.List<TagMetadata> tags;
                switch (this.tags == null ? 0 : this.tags.size()) {
                case 0: 
                    tags = java.util.Collections.emptyList();
                    break;
                case 1: 
                    tags = java.util.Collections.singletonList(this.tags.get(0));
                    break;
                default: 
                    tags = java.util.Collections.unmodifiableList(new java.util.ArrayList<TagMetadata>(this.tags));
                }
                java.util.List<Measure.FieldSpec> fields;
                switch (this.fields == null ? 0 : this.fields.size()) {
                case 0: 
                    fields = java.util.Collections.emptyList();
                    break;
                case 1: 
                    fields = java.util.Collections.singletonList(this.fields.get(0));
                    break;
                default: 
                    fields = java.util.Collections.unmodifiableList(new java.util.ArrayList<Measure.FieldSpec>(this.fields));
                }
                return new MetadataRegistry.MeasureMetadata(tags, fields);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder(tags=" + this.tags + ", fields=" + this.fields + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder builder() {
            return new MetadataRegistry.MeasureMetadata.MeasureMetadataBuilder();
        }
    }

    /**
     * Parse tags and fields' metadata for {@link Measure}.
     * For field whose dataType is not {@link Column.ValueDataType#NOT_VALUE},
     * it is registered as {@link org.apache.skywalking.banyandb.measure.v1.BanyandbMeasure.DataPoint.Field}
     *
     * @since 9.4.0 Skip {@link Metrics#TIME_BUCKET}
     */
    MeasureMetadata parseTagAndFieldMetadata(Model model, Schema.SchemaBuilder builder, List<String> shardingColumns) {
        // skip metric
        MeasureMetadata.MeasureMetadataBuilder result = MeasureMetadata.builder();
        for (final ModelColumn col : model.getColumns()) {
            final String columnStorageName = col.getColumnName().getStorageName();
            if (columnStorageName.equals(Metrics.TIME_BUCKET)) {
                continue;
            }
            if (col.getBanyanDBExtension().isMeasureField()) {
                builder.spec(columnStorageName, new ColumnSpec(ColumnType.FIELD, col.getType()));
                result.field(parseFieldSpec(col));
                continue;
            }
            final TagFamilySpec.TagSpec tagSpec = parseTagSpec(col);
            builder.spec(columnStorageName, new ColumnSpec(ColumnType.TAG, col.getType()));
            String colName = col.getColumnName().getStorageName();
            result.tag(new TagMetadata(!shardingColumns.contains(colName) && col.getBanyanDBExtension().shouldIndex() ? parseIndexRule(tagSpec.getTagName(), col) : null, tagSpec));
        }
        return result.build();
    }

    /**
     * Parse TagSpec from {@link ModelColumn}
     *
     * @param modelColumn the column in the model to be parsed
     * @return a typed tag spec
     */
    @Nonnull
    private TagFamilySpec.TagSpec parseTagSpec(ModelColumn modelColumn) {
        final Class<?> clazz = modelColumn.getType();
        final String colName = modelColumn.getColumnName().getStorageName();
        TagFamilySpec.TagSpec tagSpec = null;
        if (String.class.equals(clazz) || StorageDataComplexObject.class.isAssignableFrom(clazz) || JsonObject.class.equals(clazz)) {
            tagSpec = TagFamilySpec.TagSpec.newStringTag(colName);
        } else if (int.class.equals(clazz) || long.class.equals(clazz)) {
            tagSpec = TagFamilySpec.TagSpec.newIntTag(colName);
        } else if (byte[].class.equals(clazz)) {
            tagSpec = TagFamilySpec.TagSpec.newBinaryTag(colName);
        } else if (clazz.isEnum()) {
            tagSpec = TagFamilySpec.TagSpec.newIntTag(colName);
        } else if (double.class.equals(clazz) || Double.class.equals(clazz)) {
            // serialize double as binary
            tagSpec = TagFamilySpec.TagSpec.newBinaryTag(colName);
        } else if (IntList.class.isAssignableFrom(clazz)) {
            tagSpec = TagFamilySpec.TagSpec.newIntArrayTag(colName);
        } else if (List.class.isAssignableFrom(clazz)) {
            // handle exceptions
            ParameterizedType t = (ParameterizedType) modelColumn.getGenericType();
            if (String.class.equals(t.getActualTypeArguments()[0])) {
                tagSpec = TagFamilySpec.TagSpec.newStringArrayTag(colName);
            }
        }
        if (tagSpec == null) {
            throw new IllegalStateException("type " + modelColumn.getType().toString() + " is not supported");
        }
        if (modelColumn.isIndexOnly()) {
            tagSpec.indexedOnly();
        }
        return tagSpec;
    }

    public void initializeIntervals(String specificGroupSettingsStr) {
        if (StringUtil.isBlank(specificGroupSettingsStr)) {
            return;
        }
        try {
            specificGroupSettings = MAPPER.readerFor(new TypeReference<Map<String, GroupSetting>>() {
            }).readValue(specificGroupSettingsStr);
        } catch (IOException ioEx) {
            log.warn("fail to parse specificGroupSettings", ioEx);
        }
    }

    public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, ConfigService configService) {
        int blockIntervalHrs = config.getBlockIntervalHours();
        int segmentIntervalDays = config.getSegmentIntervalDays();
        if (model.isSuperDataset()) {
            blockIntervalHrs = config.getSuperDatasetBlockIntervalHours();
            segmentIntervalDays = config.getSuperDatasetSegmentIntervalDays();
        }
        String group;
        int metricShardNum = config.getMetricsShardsNumber();
        if (model.isRecord()) {
            // stream
            group = "stream-default";
            if (model.isSuperDataset()) {
                // for superDataset, we should use separate group
                group = "stream-" + model.getName();
            }
        } else if (model.getDownsampling() == DownSampling.Minute && model.isTimeRelativeID()) {
            // measure
            group = "measure-minute";
            // apply super dataset's settings to measure-minute
            blockIntervalHrs = config.getSuperDatasetBlockIntervalHours();
            segmentIntervalDays = config.getSuperDatasetSegmentIntervalDays();
            metricShardNum = metricShardNum * config.getSuperDatasetShardsFactor();
        } else {
            // Solution: 2 * TTL < T * (1 + 0.8)
            // e.g. if TTL=7, T=8: a new block/segment will be created at 14.4 days,
            // while the first block has been deleted at 2*TTL
            final int intervalDays = Double.valueOf(Math.ceil(configService.getMetricsDataTTL() * 2.0 / 1.8)).intValue();
            return new SchemaMetadata("measure-default", model.getName(), Kind.MEASURE, model.getDownsampling(), config.getMetricsShardsNumber(), intervalDays * 24, intervalDays,  // use 10-day/240-hour strategy
            configService.getMetricsDataTTL());
        }
        GroupSetting groupSetting = this.specificGroupSettings.get(group);
        if (groupSetting != null) {
            blockIntervalHrs = groupSetting.getBlockIntervalHours();
            segmentIntervalDays = groupSetting.getSegmentIntervalDays();
        }
        if (model.isRecord()) {
            return new SchemaMetadata(group, model.getName(), Kind.STREAM, model.getDownsampling(), config.getRecordShardsNumber() * (model.isSuperDataset() ? config.getSuperDatasetShardsFactor() : 1), blockIntervalHrs, segmentIntervalDays, configService.getRecordDataTTL());
        }
        // FIX: address issue #10104
        return new SchemaMetadata(group, model.getName(), Kind.MEASURE, model.getDownsampling(), metricShardNum, blockIntervalHrs, segmentIntervalDays, configService.getMetricsDataTTL());
    }


    public static class SchemaMetadata {
        private final String group;
        /**
         * name of the {@link Model}
         */
        private final String modelName;
        private final Kind kind;
        /**
         * down-sampling of the {@link Model}
         */
        private final DownSampling downSampling;
        private final int shard;
        private final int blockIntervalHrs;
        private final int segmentIntervalDays;
        private final int ttlDays;

        /**
         * Format the entity name for BanyanDB
         *
         * @param modelName    name of the model
         * @param downSampling not used if it is {@link DownSampling#None}
         * @return entity (e.g. measure, stream) name
         */
        static String formatName(String modelName, DownSampling downSampling) {
            if (downSampling == null || downSampling == DownSampling.None) {
                return modelName;
            }
            return modelName + "_" + downSampling.getName();
        }

        public Optional<NamedSchema<?>> findRemoteSchema(BanyanDBClient client) throws BanyanDBException {
            try {
                switch (kind) {
                case STREAM: 
                    return Optional.ofNullable(client.findStream(this.group, this.name()));
                case MEASURE: 
                    return Optional.ofNullable(client.findMeasure(this.group, this.name()));
                default: 
                    throw new IllegalStateException("should not reach here");
                }
            } catch (BanyanDBException ex) {
                if (ex.getStatus().equals(Status.Code.NOT_FOUND)) {
                    return Optional.empty();
                }
                throw ex;
            }
        }

        private List<TagFamilySpec> extractTagFamilySpec(List<TagMetadata> tagMetadataList, boolean shouldAddID) {
            final String indexFamily = SchemaMetadata.this.indexFamily();
            final String nonIndexFamily = SchemaMetadata.this.nonIndexFamily();
            Map<String, List<TagMetadata>> tagMetadataMap = tagMetadataList.stream().collect(Collectors.groupingBy(tagMetadata -> tagMetadata.isIndex() ? indexFamily : nonIndexFamily));
            final List<TagFamilySpec> tagFamilySpecs = new ArrayList<>(tagMetadataMap.size());
            for (final Map.Entry<String, List<TagMetadata>> entry : tagMetadataMap.entrySet()) {
                final TagFamilySpec.Builder b = TagFamilySpec.create(entry.getKey()).addTagSpecs(entry.getValue().stream().map(TagMetadata::getTagSpec).collect(Collectors.toList()));
                if (shouldAddID && indexFamily.equals(entry.getKey())) {
                    b.addTagSpec(TagFamilySpec.TagSpec.newStringTag(BanyanDBConverter.ID));
                }
                tagFamilySpecs.add(b.build());
            }
            return tagFamilySpecs;
        }

        public boolean checkResourceExistence(BanyanDBClient client) throws BanyanDBException {
            ResourceExist resourceExist;
            switch (kind) {
            case STREAM: 
                resourceExist = client.existStream(this.group, this.name());
                if (!resourceExist.hasGroup()) {
                    Group g = client.define(Group.create(this.group, Catalog.STREAM, this.shard, IntervalRule.create(IntervalRule.Unit.HOUR, this.blockIntervalHrs), IntervalRule.create(IntervalRule.Unit.DAY, this.segmentIntervalDays), IntervalRule.create(IntervalRule.Unit.DAY, this.ttlDays)));
                    if (g != null) {
                        log.info("group {} created", g.name());
                    }
                }
                return resourceExist.hasResource();
            case MEASURE: 
                resourceExist = client.existMeasure(this.group, this.name());
                if (!resourceExist.hasGroup()) {
                    Group g = client.define(Group.create(this.group, Catalog.MEASURE, this.shard, IntervalRule.create(IntervalRule.Unit.HOUR, this.blockIntervalHrs), IntervalRule.create(IntervalRule.Unit.DAY, this.segmentIntervalDays), IntervalRule.create(IntervalRule.Unit.DAY, this.ttlDays)));
                    if (g != null) {
                        log.info("group {} created", g.name());
                    }
                }
                return resourceExist.hasResource();
            default: 
                throw new IllegalStateException("should not reach here");
            }
        }

        /**
         * @return name of the Stream/Measure in the BanyanDB
         */
        public String name() {
            if (this.kind == Kind.MEASURE) {
                return formatName(this.modelName, this.downSampling);
            }
            return this.modelName;
        }

        public String indexFamily() {
            switch (kind) {
            case MEASURE: 
                return "default";
            case STREAM: 
                return "searchable";
            default: 
                throw new IllegalStateException("should not reach here");
            }
        }

        public String nonIndexFamily() {
            switch (kind) {
            case MEASURE: 
            case STREAM: 
                return "storage-only";
            default: 
                throw new IllegalStateException("should not reach here");
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SchemaMetadata(final String group, final String modelName, final Kind kind, final DownSampling downSampling, final int shard, final int blockIntervalHrs, final int segmentIntervalDays, final int ttlDays) {
            this.group = group;
            this.modelName = modelName;
            this.kind = kind;
            this.downSampling = downSampling;
            this.shard = shard;
            this.blockIntervalHrs = blockIntervalHrs;
            this.segmentIntervalDays = segmentIntervalDays;
            this.ttlDays = ttlDays;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getGroup() {
            return this.group;
        }

        /**
         * name of the {@link Model}
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getModelName() {
            return this.modelName;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Kind getKind() {
            return this.kind;
        }

        /**
         * down-sampling of the {@link Model}
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public DownSampling getDownSampling() {
            return this.downSampling;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getShard() {
            return this.shard;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getBlockIntervalHrs() {
            return this.blockIntervalHrs;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getSegmentIntervalDays() {
            return this.segmentIntervalDays;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getTtlDays() {
            return this.ttlDays;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof MetadataRegistry.SchemaMetadata)) return false;
            final MetadataRegistry.SchemaMetadata other = (MetadataRegistry.SchemaMetadata) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getShard() != other.getShard()) return false;
            if (this.getBlockIntervalHrs() != other.getBlockIntervalHrs()) return false;
            if (this.getSegmentIntervalDays() != other.getSegmentIntervalDays()) return false;
            if (this.getTtlDays() != other.getTtlDays()) return false;
            final java.lang.Object this$group = this.getGroup();
            final java.lang.Object other$group = other.getGroup();
            if (this$group == null ? other$group != null : !this$group.equals(other$group)) return false;
            final java.lang.Object this$modelName = this.getModelName();
            final java.lang.Object other$modelName = other.getModelName();
            if (this$modelName == null ? other$modelName != null : !this$modelName.equals(other$modelName)) return false;
            final java.lang.Object this$kind = this.getKind();
            final java.lang.Object other$kind = other.getKind();
            if (this$kind == null ? other$kind != null : !this$kind.equals(other$kind)) return false;
            final java.lang.Object this$downSampling = this.getDownSampling();
            final java.lang.Object other$downSampling = other.getDownSampling();
            if (this$downSampling == null ? other$downSampling != null : !this$downSampling.equals(other$downSampling)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof MetadataRegistry.SchemaMetadata;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getShard();
            result = result * PRIME + this.getBlockIntervalHrs();
            result = result * PRIME + this.getSegmentIntervalDays();
            result = result * PRIME + this.getTtlDays();
            final java.lang.Object $group = this.getGroup();
            result = result * PRIME + ($group == null ? 43 : $group.hashCode());
            final java.lang.Object $modelName = this.getModelName();
            result = result * PRIME + ($modelName == null ? 43 : $modelName.hashCode());
            final java.lang.Object $kind = this.getKind();
            result = result * PRIME + ($kind == null ? 43 : $kind.hashCode());
            final java.lang.Object $downSampling = this.getDownSampling();
            result = result * PRIME + ($downSampling == null ? 43 : $downSampling.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "MetadataRegistry.SchemaMetadata(group=" + this.getGroup() + ", modelName=" + this.getModelName() + ", kind=" + this.getKind() + ", downSampling=" + this.getDownSampling() + ", shard=" + this.getShard() + ", blockIntervalHrs=" + this.getBlockIntervalHrs() + ", segmentIntervalDays=" + this.getSegmentIntervalDays() + ", ttlDays=" + this.getTtlDays() + ")";
        }
    }


    public enum Kind {
        MEASURE, STREAM;
    }


    private static class TagMetadata {
        private final IndexRule indexRule;
        private final TagFamilySpec.TagSpec tagSpec;

        boolean isIndex() {
            return this.indexRule != null;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public TagMetadata(final IndexRule indexRule, final TagFamilySpec.TagSpec tagSpec) {
            this.indexRule = indexRule;
            this.tagSpec = tagSpec;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public IndexRule getIndexRule() {
            return this.indexRule;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public TagFamilySpec.TagSpec getTagSpec() {
            return this.tagSpec;
        }
    }


    public static class Schema {
        private final SchemaMetadata metadata;
        private final Map<String, ColumnSpec> specs;
        private final Set<String> tags;
        private final Set<String> fields;
        private final String timestampColumn4Stream;
        @Nullable
        private final TopNSpec topNSpec;

        public ColumnSpec getSpec(String columnName) {
            return this.specs.get(columnName);
        }

        public void installTopNAggregation(BanyanDBClient client) throws BanyanDBException {
            if (this.getTopNSpec() == null) {
                if (this.metadata.kind == Kind.MEASURE) {
                    log.debug("skip null TopN Schema for [{}]", metadata.getModelName());
                }
                return;
            }
            client.define(TopNAggregation.create(getMetadata().getGroup(), this.getTopNSpec().getName()).setSourceMeasureName(getMetadata().name()).setFieldValueSort(this.getTopNSpec().getSort()).setFieldName(this.getTopNSpec().getFieldName()).setGroupByTagNames(this.getTopNSpec().getGroupByTagNames()).setCountersNumber(this.getTopNSpec().getCountersNumber()).setLruSize(this.getTopNSpec().getLruSize()).build());
            log.info("installed TopN schema for measure {}", getMetadata().name());
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        Schema(final SchemaMetadata metadata, final Map<String, ColumnSpec> specs, final Set<String> tags, final Set<String> fields, final String timestampColumn4Stream, @Nullable final TopNSpec topNSpec) {
            this.metadata = metadata;
            this.specs = specs;
            this.tags = tags;
            this.fields = fields;
            this.timestampColumn4Stream = timestampColumn4Stream;
            this.topNSpec = topNSpec;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class SchemaBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private SchemaMetadata metadata;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<String> specs$key;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<ColumnSpec> specs$value;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<String> tags;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<String> fields;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String timestampColumn4Stream;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private TopNSpec topNSpec;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            SchemaBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder metadata(final SchemaMetadata metadata) {
                this.metadata = metadata;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder spec(final String specKey, final ColumnSpec specValue) {
                if (this.specs$key == null) {
                    this.specs$key = new java.util.ArrayList<String>();
                    this.specs$value = new java.util.ArrayList<ColumnSpec>();
                }
                this.specs$key.add(specKey);
                this.specs$value.add(specValue);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder specs(final java.util.Map<? extends String, ? extends ColumnSpec> specs) {
                if (specs == null) {
                    throw new java.lang.NullPointerException("specs cannot be null");
                }
                if (this.specs$key == null) {
                    this.specs$key = new java.util.ArrayList<String>();
                    this.specs$value = new java.util.ArrayList<ColumnSpec>();
                }
                for (final java.util.Map.Entry<? extends String, ? extends ColumnSpec> $lombokEntry : specs.entrySet()) {
                    this.specs$key.add($lombokEntry.getKey());
                    this.specs$value.add($lombokEntry.getValue());
                }
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder clearSpecs() {
                if (this.specs$key != null) {
                    this.specs$key.clear();
                    this.specs$value.clear();
                }
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder tag(final String tag) {
                if (this.tags == null) this.tags = new java.util.ArrayList<String>();
                this.tags.add(tag);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder tags(final java.util.Collection<? extends String> tags) {
                if (tags == null) {
                    throw new java.lang.NullPointerException("tags cannot be null");
                }
                if (this.tags == null) this.tags = new java.util.ArrayList<String>();
                this.tags.addAll(tags);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder clearTags() {
                if (this.tags != null) this.tags.clear();
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder field(final String field) {
                if (this.fields == null) this.fields = new java.util.ArrayList<String>();
                this.fields.add(field);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder fields(final java.util.Collection<? extends String> fields) {
                if (fields == null) {
                    throw new java.lang.NullPointerException("fields cannot be null");
                }
                if (this.fields == null) this.fields = new java.util.ArrayList<String>();
                this.fields.addAll(fields);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder clearFields() {
                if (this.fields != null) this.fields.clear();
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder timestampColumn4Stream(final String timestampColumn4Stream) {
                this.timestampColumn4Stream = timestampColumn4Stream;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema.SchemaBuilder topNSpec(@Nullable final TopNSpec topNSpec) {
                this.topNSpec = topNSpec;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.Schema build() {
                java.util.Map<String, ColumnSpec> specs;
                switch (this.specs$key == null ? 0 : this.specs$key.size()) {
                case 0: 
                    specs = java.util.Collections.emptyMap();
                    break;
                case 1: 
                    specs = java.util.Collections.singletonMap(this.specs$key.get(0), this.specs$value.get(0));
                    break;
                default: 
                    specs = new java.util.LinkedHashMap<String, ColumnSpec>(this.specs$key.size() < 1073741824 ? 1 + this.specs$key.size() + (this.specs$key.size() - 3) / 3 : java.lang.Integer.MAX_VALUE);
                    for (int $i = 0; $i < this.specs$key.size(); $i++) specs.put(this.specs$key.get($i), (ColumnSpec) this.specs$value.get($i));
                    specs = java.util.Collections.unmodifiableMap(specs);
                }
                java.util.Set<String> tags;
                switch (this.tags == null ? 0 : this.tags.size()) {
                case 0: 
                    tags = java.util.Collections.emptySet();
                    break;
                case 1: 
                    tags = java.util.Collections.singleton(this.tags.get(0));
                    break;
                default: 
                    tags = new java.util.LinkedHashSet<String>(this.tags.size() < 1073741824 ? 1 + this.tags.size() + (this.tags.size() - 3) / 3 : java.lang.Integer.MAX_VALUE);
                    tags.addAll(this.tags);
                    tags = java.util.Collections.unmodifiableSet(tags);
                }
                java.util.Set<String> fields;
                switch (this.fields == null ? 0 : this.fields.size()) {
                case 0: 
                    fields = java.util.Collections.emptySet();
                    break;
                case 1: 
                    fields = java.util.Collections.singleton(this.fields.get(0));
                    break;
                default: 
                    fields = new java.util.LinkedHashSet<String>(this.fields.size() < 1073741824 ? 1 + this.fields.size() + (this.fields.size() - 3) / 3 : java.lang.Integer.MAX_VALUE);
                    fields.addAll(this.fields);
                    fields = java.util.Collections.unmodifiableSet(fields);
                }
                return new MetadataRegistry.Schema(this.metadata, specs, tags, fields, this.timestampColumn4Stream, this.topNSpec);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "MetadataRegistry.Schema.SchemaBuilder(metadata=" + this.metadata + ", specs$key=" + this.specs$key + ", specs$value=" + this.specs$value + ", tags=" + this.tags + ", fields=" + this.fields + ", timestampColumn4Stream=" + this.timestampColumn4Stream + ", topNSpec=" + this.topNSpec + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static MetadataRegistry.Schema.SchemaBuilder builder() {
            return new MetadataRegistry.Schema.SchemaBuilder();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof MetadataRegistry.Schema)) return false;
            final MetadataRegistry.Schema other = (MetadataRegistry.Schema) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$metadata = this.getMetadata();
            final java.lang.Object other$metadata = other.getMetadata();
            if (this$metadata == null ? other$metadata != null : !this$metadata.equals(other$metadata)) return false;
            final java.lang.Object this$specs = this.specs;
            final java.lang.Object other$specs = other.specs;
            if (this$specs == null ? other$specs != null : !this$specs.equals(other$specs)) return false;
            final java.lang.Object this$tags = this.getTags();
            final java.lang.Object other$tags = other.getTags();
            if (this$tags == null ? other$tags != null : !this$tags.equals(other$tags)) return false;
            final java.lang.Object this$fields = this.getFields();
            final java.lang.Object other$fields = other.getFields();
            if (this$fields == null ? other$fields != null : !this$fields.equals(other$fields)) return false;
            final java.lang.Object this$timestampColumn4Stream = this.getTimestampColumn4Stream();
            final java.lang.Object other$timestampColumn4Stream = other.getTimestampColumn4Stream();
            if (this$timestampColumn4Stream == null ? other$timestampColumn4Stream != null : !this$timestampColumn4Stream.equals(other$timestampColumn4Stream)) return false;
            final java.lang.Object this$topNSpec = this.getTopNSpec();
            final java.lang.Object other$topNSpec = other.getTopNSpec();
            if (this$topNSpec == null ? other$topNSpec != null : !this$topNSpec.equals(other$topNSpec)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof MetadataRegistry.Schema;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $metadata = this.getMetadata();
            result = result * PRIME + ($metadata == null ? 43 : $metadata.hashCode());
            final java.lang.Object $specs = this.specs;
            result = result * PRIME + ($specs == null ? 43 : $specs.hashCode());
            final java.lang.Object $tags = this.getTags();
            result = result * PRIME + ($tags == null ? 43 : $tags.hashCode());
            final java.lang.Object $fields = this.getFields();
            result = result * PRIME + ($fields == null ? 43 : $fields.hashCode());
            final java.lang.Object $timestampColumn4Stream = this.getTimestampColumn4Stream();
            result = result * PRIME + ($timestampColumn4Stream == null ? 43 : $timestampColumn4Stream.hashCode());
            final java.lang.Object $topNSpec = this.getTopNSpec();
            result = result * PRIME + ($topNSpec == null ? 43 : $topNSpec.hashCode());
            return result;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public SchemaMetadata getMetadata() {
            return this.metadata;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Set<String> getTags() {
            return this.tags;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Set<String> getFields() {
            return this.fields;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getTimestampColumn4Stream() {
            return this.timestampColumn4Stream;
        }

        @Nullable
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public TopNSpec getTopNSpec() {
            return this.topNSpec;
        }
    }


    public static class TopNSpec {
        private final String name;
        private final List<String> groupByTagNames;
        private final String fieldName;
        private final AbstractQuery.Sort sort;
        private final int lruSize;
        private final int countersNumber;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        TopNSpec(final String name, final List<String> groupByTagNames, final String fieldName, final AbstractQuery.Sort sort, final int lruSize, final int countersNumber) {
            this.name = name;
            this.groupByTagNames = groupByTagNames;
            this.fieldName = fieldName;
            this.sort = sort;
            this.lruSize = lruSize;
            this.countersNumber = countersNumber;
        }


        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static class TopNSpecBuilder {
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String name;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private java.util.ArrayList<String> groupByTagNames;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private String fieldName;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private AbstractQuery.Sort sort;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int lruSize;
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            private int countersNumber;

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            TopNSpecBuilder() {
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder name(final String name) {
                this.name = name;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder groupByTagName(final String groupByTagName) {
                if (this.groupByTagNames == null) this.groupByTagNames = new java.util.ArrayList<String>();
                this.groupByTagNames.add(groupByTagName);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder groupByTagNames(final java.util.Collection<? extends String> groupByTagNames) {
                if (groupByTagNames == null) {
                    throw new java.lang.NullPointerException("groupByTagNames cannot be null");
                }
                if (this.groupByTagNames == null) this.groupByTagNames = new java.util.ArrayList<String>();
                this.groupByTagNames.addAll(groupByTagNames);
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder clearGroupByTagNames() {
                if (this.groupByTagNames != null) this.groupByTagNames.clear();
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder fieldName(final String fieldName) {
                this.fieldName = fieldName;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder sort(final AbstractQuery.Sort sort) {
                this.sort = sort;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder lruSize(final int lruSize) {
                this.lruSize = lruSize;
                return this;
            }

            /**
             * @return {@code this}.
             */
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec.TopNSpecBuilder countersNumber(final int countersNumber) {
                this.countersNumber = countersNumber;
                return this;
            }

            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public MetadataRegistry.TopNSpec build() {
                java.util.List<String> groupByTagNames;
                switch (this.groupByTagNames == null ? 0 : this.groupByTagNames.size()) {
                case 0: 
                    groupByTagNames = java.util.Collections.emptyList();
                    break;
                case 1: 
                    groupByTagNames = java.util.Collections.singletonList(this.groupByTagNames.get(0));
                    break;
                default: 
                    groupByTagNames = java.util.Collections.unmodifiableList(new java.util.ArrayList<String>(this.groupByTagNames));
                }
                return new MetadataRegistry.TopNSpec(this.name, groupByTagNames, this.fieldName, this.sort, this.lruSize, this.countersNumber);
            }

            @java.lang.Override
            @java.lang.SuppressWarnings("all")
            @lombok.Generated
            public java.lang.String toString() {
                return "MetadataRegistry.TopNSpec.TopNSpecBuilder(name=" + this.name + ", groupByTagNames=" + this.groupByTagNames + ", fieldName=" + this.fieldName + ", sort=" + this.sort + ", lruSize=" + this.lruSize + ", countersNumber=" + this.countersNumber + ")";
            }
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public static MetadataRegistry.TopNSpec.TopNSpecBuilder builder() {
            return new MetadataRegistry.TopNSpec.TopNSpecBuilder();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof MetadataRegistry.TopNSpec)) return false;
            final MetadataRegistry.TopNSpec other = (MetadataRegistry.TopNSpec) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (this.getLruSize() != other.getLruSize()) return false;
            if (this.getCountersNumber() != other.getCountersNumber()) return false;
            final java.lang.Object this$name = this.getName();
            final java.lang.Object other$name = other.getName();
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$groupByTagNames = this.getGroupByTagNames();
            final java.lang.Object other$groupByTagNames = other.getGroupByTagNames();
            if (this$groupByTagNames == null ? other$groupByTagNames != null : !this$groupByTagNames.equals(other$groupByTagNames)) return false;
            final java.lang.Object this$fieldName = this.getFieldName();
            final java.lang.Object other$fieldName = other.getFieldName();
            if (this$fieldName == null ? other$fieldName != null : !this$fieldName.equals(other$fieldName)) return false;
            final java.lang.Object this$sort = this.getSort();
            final java.lang.Object other$sort = other.getSort();
            if (this$sort == null ? other$sort != null : !this$sort.equals(other$sort)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof MetadataRegistry.TopNSpec;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            result = result * PRIME + this.getLruSize();
            result = result * PRIME + this.getCountersNumber();
            final java.lang.Object $name = this.getName();
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $groupByTagNames = this.getGroupByTagNames();
            result = result * PRIME + ($groupByTagNames == null ? 43 : $groupByTagNames.hashCode());
            final java.lang.Object $fieldName = this.getFieldName();
            result = result * PRIME + ($fieldName == null ? 43 : $fieldName.hashCode());
            final java.lang.Object $sort = this.getSort();
            result = result * PRIME + ($sort == null ? 43 : $sort.hashCode());
            return result;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getName() {
            return this.name;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public List<String> getGroupByTagNames() {
            return this.groupByTagNames;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getFieldName() {
            return this.fieldName;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public AbstractQuery.Sort getSort() {
            return this.sort;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getLruSize() {
            return this.lruSize;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getCountersNumber() {
            return this.countersNumber;
        }
    }


    public static class ColumnSpec {
        private final ColumnType columnType;
        private final Class<?> columnClass;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ColumnSpec(final ColumnType columnType, final Class<?> columnClass) {
            this.columnType = columnType;
            this.columnClass = columnClass;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ColumnType getColumnType() {
            return this.columnType;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Class<?> getColumnClass() {
            return this.columnClass;
        }
    }


    public enum ColumnType {
        TAG, FIELD;
    }


    public static class GroupSetting {
        private int blockIntervalHours;
        private int segmentIntervalDays;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getBlockIntervalHours() {
            return this.blockIntervalHours;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int getSegmentIntervalDays() {
            return this.segmentIntervalDays;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setBlockIntervalHours(final int blockIntervalHours) {
            this.blockIntervalHours = blockIntervalHours;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public void setSegmentIntervalDays(final int segmentIntervalDays) {
            this.segmentIntervalDays = segmentIntervalDays;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public GroupSetting() {
        }
    }
}
