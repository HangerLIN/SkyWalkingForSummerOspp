// Generated by delombok at Thu Apr 18 20:40:29 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.storage.plugin.jdbc;

import org.apache.skywalking.oap.server.core.storage.SessionCacheCallback;
import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
import org.apache.skywalking.oap.server.library.client.request.UpdateRequest;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * A SQL executor.
 */
public class SQLExecutor implements InsertRequest, UpdateRequest {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(SQLExecutor.class);
    private final String sql;
    private final List<Object> param;
    private final SessionCacheCallback callback;
    private List<SQLExecutor> additionalSQLs;

    public void invoke(Connection connection) throws SQLException {
        final var preparedStatement = connection.prepareStatement(sql);
        setParameters(preparedStatement);
        if (log.isDebugEnabled()) {
            log.debug("Executing sql in batch: {}, parameters: {}", sql, param);
        }
        preparedStatement.execute();
        if (additionalSQLs != null) {
            for (SQLExecutor sqlExecutor : additionalSQLs) {
                sqlExecutor.invoke(connection);
            }
        }
    }

    public void setParameters(PreparedStatement preparedStatement) throws SQLException {
        for (int i = 0; i < param.size(); i++) {
            preparedStatement.setObject(i + 1, param.get(i));
        }
    }

    @Override
    public String toString() {
        return sql;
    }

    public void appendAdditionalSQLs(List<SQLExecutor> sqlExecutors) {
        if (additionalSQLs == null) {
            additionalSQLs = new ArrayList<>();
        }
        additionalSQLs.addAll(sqlExecutors);
    }

    @Override
    public void onInsertCompleted() {
        if (callback != null) callback.onInsertCompleted();
    }

    @Override
    public void onUpdateFailure() {
        if (callback != null) callback.onUpdateFailure();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof SQLExecutor)) return false;
        final SQLExecutor other = (SQLExecutor) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$sql = this.sql;
        final java.lang.Object other$sql = other.sql;
        if (this$sql == null ? other$sql != null : !this$sql.equals(other$sql)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof SQLExecutor;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $sql = this.sql;
        result = result * PRIME + ($sql == null ? 43 : $sql.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SQLExecutor(final String sql, final List<Object> param, final SessionCacheCallback callback) {
        this.sql = sql;
        this.param = param;
        this.callback = callback;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<Object> getParam() {
        return this.param;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<SQLExecutor> getAdditionalSQLs() {
        return this.additionalSQLs;
    }
}
