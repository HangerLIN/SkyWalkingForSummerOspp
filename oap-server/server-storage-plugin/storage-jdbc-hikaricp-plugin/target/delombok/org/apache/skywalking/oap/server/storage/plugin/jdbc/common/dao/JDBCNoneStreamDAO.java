// Generated by delombok at Thu Apr 18 20:40:29 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao;

import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
import org.apache.skywalking.oap.server.core.storage.INoneStreamDAO;
import org.apache.skywalking.oap.server.core.storage.model.Model;
import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCClient;
import org.apache.skywalking.oap.server.storage.plugin.jdbc.SQLExecutor;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

/**
 * Synchronize storage H2 implements
 */
public class JDBCNoneStreamDAO extends JDBCSQLExecutor implements INoneStreamDAO {
    private final JDBCClient jdbcClient;
    private final StorageBuilder<NoneStream> storageBuilder;

    @Override
    public void insert(Model model, NoneStream noneStream) throws IOException {
        try (Connection connection = jdbcClient.getConnection()) {
            SQLExecutor insertExecutor = getInsertExecutor(model, noneStream, 0, storageBuilder, new HashMapConverter.ToStorage(), null);
            insertExecutor.invoke(connection);
        } catch (IOException | SQLException e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public JDBCNoneStreamDAO(final JDBCClient jdbcClient, final StorageBuilder<NoneStream> storageBuilder) {
        this.jdbcClient = jdbcClient;
        this.storageBuilder = storageBuilder;
    }
}
