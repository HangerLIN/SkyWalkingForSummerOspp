// Generated by delombok at Thu Apr 18 20:39:44 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.configuration.api;

import org.apache.skywalking.oap.server.library.module.ModuleProvider;

/**
 * ConfigChangeWatcher represents a watcher implementor, it will be called when the target value changed.
 */
public abstract class ConfigChangeWatcher {
    private final String module;
    private final ModuleProvider provider;
    private final String itemName;
    protected WatchType watchType;

    public ConfigChangeWatcher(String module, ModuleProvider provider, String itemName) {
        this.module = module;
        this.provider = provider;
        this.itemName = itemName;
        this.watchType = WatchType.SINGLE;
    }

    /**
     * Notify the watcher, the new value received.
     *
     * @param value of new.
     */
    public abstract void notify(ConfigChangeEvent value);

    /**
     * @return current value of current config.
     */
    public abstract String value();

    @Override
    public String toString() {
        return "ConfigChangeWatcher{" + "module=" + module + ", provider=" + provider + ", itemName=\'" + itemName + '\'' + '}';
    }


    public static class ConfigChangeEvent {
        private String newValue;
        private EventType eventType;

        public ConfigChangeEvent(String newValue, EventType eventType) {
            this.newValue = newValue;
            this.eventType = eventType;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        void setNewValue(final String newValue) {
            this.newValue = newValue;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        void setEventType(final EventType eventType) {
            this.eventType = eventType;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public String getNewValue() {
            return this.newValue;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public EventType getEventType() {
            return this.eventType;
        }
    }


    public enum EventType {
        ADD, MODIFY, DELETE;
    }


    public enum WatchType {
        SINGLE, GROUP;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getModule() {
        return this.module;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ModuleProvider getProvider() {
        return this.provider;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getItemName() {
        return this.itemName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public WatchType getWatchType() {
        return this.watchType;
    }
}
