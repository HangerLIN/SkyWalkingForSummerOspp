// Generated by delombok at Thu Apr 18 20:39:43 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.telemetry.api;

import java.util.List;

/**
 * MetricFamily define a metric and all its samples.
 */
public class MetricFamily {
    public final String name;
    public final Type type;
    public final String help;
    public final List<Sample> samples;


    public enum Type {
        COUNTER, GAUGE, SUMMARY, HISTOGRAM, UNTYPED;
    }


    /**
     * A single Sample, with a unique name and set of labels.
     */
    public static class Sample {
        public final String name;
        public final List<String> labelNames;
        public final List<String> labelValues; // Must have same length as labelNames.
        public final double value;
        public final Long timestampMs; // It's an epoch format with milliseconds value included (this field is subject to change).

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample(final String name, final List<String> labelNames, final List<String> labelValues, final double value, final Long timestampMs) {
            this.name = name;
            this.labelNames = labelNames;
            this.labelValues = labelValues;
            this.value = value;
            this.timestampMs = timestampMs;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof MetricFamily.Sample)) return false;
            final MetricFamily.Sample other = (MetricFamily.Sample) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            if (java.lang.Double.compare(this.value, other.value) != 0) return false;
            final java.lang.Object this$timestampMs = this.timestampMs;
            final java.lang.Object other$timestampMs = other.timestampMs;
            if (this$timestampMs == null ? other$timestampMs != null : !this$timestampMs.equals(other$timestampMs)) return false;
            final java.lang.Object this$name = this.name;
            final java.lang.Object other$name = other.name;
            if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
            final java.lang.Object this$labelNames = this.labelNames;
            final java.lang.Object other$labelNames = other.labelNames;
            if (this$labelNames == null ? other$labelNames != null : !this$labelNames.equals(other$labelNames)) return false;
            final java.lang.Object this$labelValues = this.labelValues;
            final java.lang.Object other$labelValues = other.labelValues;
            if (this$labelValues == null ? other$labelValues != null : !this$labelValues.equals(other$labelValues)) return false;
            return true;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof MetricFamily.Sample;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final long $value = java.lang.Double.doubleToLongBits(this.value);
            result = result * PRIME + (int) ($value >>> 32 ^ $value);
            final java.lang.Object $timestampMs = this.timestampMs;
            result = result * PRIME + ($timestampMs == null ? 43 : $timestampMs.hashCode());
            final java.lang.Object $name = this.name;
            result = result * PRIME + ($name == null ? 43 : $name.hashCode());
            final java.lang.Object $labelNames = this.labelNames;
            result = result * PRIME + ($labelNames == null ? 43 : $labelNames.hashCode());
            final java.lang.Object $labelValues = this.labelValues;
            result = result * PRIME + ($labelValues == null ? 43 : $labelValues.hashCode());
            return result;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "MetricFamily.Sample(name=" + this.name + ", labelNames=" + this.labelNames + ", labelValues=" + this.labelValues + ", value=" + this.value + ", timestampMs=" + this.timestampMs + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MetricFamily(final String name, final Type type, final String help, final List<Sample> samples) {
        this.name = name;
        this.type = type;
        this.help = help;
        this.samples = samples;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MetricFamily)) return false;
        final MetricFamily other = (MetricFamily) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.name;
        final java.lang.Object other$name = other.name;
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$type = this.type;
        final java.lang.Object other$type = other.type;
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final java.lang.Object this$help = this.help;
        final java.lang.Object other$help = other.help;
        if (this$help == null ? other$help != null : !this$help.equals(other$help)) return false;
        final java.lang.Object this$samples = this.samples;
        final java.lang.Object other$samples = other.samples;
        if (this$samples == null ? other$samples != null : !this$samples.equals(other$samples)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof MetricFamily;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.name;
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $type = this.type;
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final java.lang.Object $help = this.help;
        result = result * PRIME + ($help == null ? 43 : $help.hashCode());
        final java.lang.Object $samples = this.samples;
        result = result * PRIME + ($samples == null ? 43 : $samples.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "MetricFamily(name=" + this.name + ", type=" + this.type + ", help=" + this.help + ", samples=" + this.samples + ")";
    }
}
