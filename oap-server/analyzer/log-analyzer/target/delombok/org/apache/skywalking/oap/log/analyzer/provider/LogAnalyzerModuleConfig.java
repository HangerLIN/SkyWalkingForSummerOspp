// Generated by delombok at Thu Apr 18 20:40:03 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.skywalking.oap.log.analyzer.provider;

import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import java.io.IOException;
import java.util.List;
import org.apache.skywalking.oap.meter.analyzer.prometheus.rule.Rule;
import org.apache.skywalking.oap.meter.analyzer.prometheus.rule.Rules;
import org.apache.skywalking.oap.server.library.module.ModuleConfig;
import org.apache.skywalking.oap.server.library.module.ModuleStartException;
import static java.util.Objects.nonNull;

public class LogAnalyzerModuleConfig extends ModuleConfig {
    private String lalPath = "lal";
    private String malPath = "log-mal-rules";
    private String lalFiles = "default.yaml";
    private String malFiles;
    private List<Rule> meterConfigs;

    public List<String> lalFiles() {
        return Splitter.on(",").omitEmptyStrings().trimResults().splitToList(Strings.nullToEmpty(getLalFiles()));
    }

    public List<Rule> malConfigs() throws ModuleStartException {
        if (nonNull(meterConfigs)) {
            return meterConfigs;
        }
        final List<String> files = Splitter.on(",").omitEmptyStrings().splitToList(Strings.nullToEmpty(getMalFiles()));
        try {
            meterConfigs = Rules.loadRules(getMalPath(), files);
        } catch (IOException e) {
            throw new ModuleStartException("Failed to load MAL rules", e);
        }
        return meterConfigs;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof LogAnalyzerModuleConfig)) return false;
        final LogAnalyzerModuleConfig other = (LogAnalyzerModuleConfig) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$lalPath = this.getLalPath();
        final java.lang.Object other$lalPath = other.getLalPath();
        if (this$lalPath == null ? other$lalPath != null : !this$lalPath.equals(other$lalPath)) return false;
        final java.lang.Object this$malPath = this.getMalPath();
        final java.lang.Object other$malPath = other.getMalPath();
        if (this$malPath == null ? other$malPath != null : !this$malPath.equals(other$malPath)) return false;
        final java.lang.Object this$lalFiles = this.getLalFiles();
        final java.lang.Object other$lalFiles = other.getLalFiles();
        if (this$lalFiles == null ? other$lalFiles != null : !this$lalFiles.equals(other$lalFiles)) return false;
        final java.lang.Object this$malFiles = this.getMalFiles();
        final java.lang.Object other$malFiles = other.getMalFiles();
        if (this$malFiles == null ? other$malFiles != null : !this$malFiles.equals(other$malFiles)) return false;
        final java.lang.Object this$meterConfigs = this.meterConfigs;
        final java.lang.Object other$meterConfigs = other.meterConfigs;
        if (this$meterConfigs == null ? other$meterConfigs != null : !this$meterConfigs.equals(other$meterConfigs)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof LogAnalyzerModuleConfig;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $lalPath = this.getLalPath();
        result = result * PRIME + ($lalPath == null ? 43 : $lalPath.hashCode());
        final java.lang.Object $malPath = this.getMalPath();
        result = result * PRIME + ($malPath == null ? 43 : $malPath.hashCode());
        final java.lang.Object $lalFiles = this.getLalFiles();
        result = result * PRIME + ($lalFiles == null ? 43 : $lalFiles.hashCode());
        final java.lang.Object $malFiles = this.getMalFiles();
        result = result * PRIME + ($malFiles == null ? 43 : $malFiles.hashCode());
        final java.lang.Object $meterConfigs = this.meterConfigs;
        result = result * PRIME + ($meterConfigs == null ? 43 : $meterConfigs.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getLalPath() {
        return this.lalPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLalPath(final String lalPath) {
        this.lalPath = lalPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getMalPath() {
        return this.malPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMalPath(final String malPath) {
        this.malPath = malPath;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getLalFiles() {
        return this.lalFiles;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLalFiles(final String lalFiles) {
        this.lalFiles = lalFiles;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getMalFiles() {
        return this.malFiles;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setMalFiles(final String malFiles) {
        this.malFiles = malFiles;
    }
}
