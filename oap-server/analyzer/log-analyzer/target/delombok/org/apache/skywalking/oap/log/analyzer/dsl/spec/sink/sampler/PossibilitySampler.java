// Generated by delombok at Thu Apr 18 20:40:03 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.log.analyzer.dsl.spec.sink.sampler;

import io.netty.util.internal.ThreadLocalRandom;

public class PossibilitySampler implements Sampler {
    private final int percentage;
    private final ThreadLocalRandom random = ThreadLocalRandom.current();

    @Override
    public PossibilitySampler start() {
        return this;
    }

    @Override
    public void close() {
    }

    @Override
    public boolean sample() {
        return random.nextInt(100) < percentage;
    }

    @Override
    public PossibilitySampler reset() {
        return this;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public PossibilitySampler(final int percentage) {
        this.percentage = percentage;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof PossibilitySampler)) return false;
        final PossibilitySampler other = (PossibilitySampler) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.percentage() != other.percentage()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PossibilitySampler;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.percentage();
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int percentage() {
        return this.percentage;
    }
}
