// Generated by delombok at Thu Apr 18 20:40:03 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.log.analyzer.provider;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.apache.skywalking.oap.server.library.module.ModuleStartException;
import org.apache.skywalking.oap.server.library.util.ResourceUtils;
import org.yaml.snakeyaml.Yaml;
import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.io.Files.getNameWithoutExtension;
import static org.apache.skywalking.oap.server.library.util.StringUtil.isNotBlank;
import static org.apache.skywalking.oap.server.library.util.CollectionUtils.isEmpty;

public class LALConfigs {
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LALConfigs.class);
    private List<LALConfig> rules;

    public static List<LALConfigs> load(final String path, final List<String> files) throws Exception {
        if (isEmpty(files)) {
            return Collections.emptyList();
        }
        checkArgument(isNotBlank(path), "path cannot be blank");
        try {
            final File[] rules = ResourceUtils.getPathFiles(path);
            return 
            //noinspection UnstableApiUsage
            Arrays.stream(rules).filter(File::isFile).filter(it -> {
                return files.contains(getNameWithoutExtension(it.getName()));
            }).map(f -> {
                try (Reader r = new FileReader(f)) {
                    return new Yaml().<LALConfigs>loadAs(r, LALConfigs.class);
                } catch (IOException e) {
                    log.debug("Failed to read file {}", f, e);
                }
                return null;
            }).filter(Objects::nonNull).collect(Collectors.toList());
        } catch (FileNotFoundException e) {
            throw new ModuleStartException("Failed to load LAL config rules", e);
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public LALConfigs() {
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<LALConfig> getRules() {
        return this.rules;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRules(final List<LALConfig> rules) {
        this.rules = rules;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof LALConfigs)) return false;
        final LALConfigs other = (LALConfigs) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$rules = this.getRules();
        final java.lang.Object other$rules = other.getRules();
        if (this$rules == null ? other$rules != null : !this$rules.equals(other$rules)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof LALConfigs;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $rules = this.getRules();
        result = result * PRIME + ($rules == null ? 43 : $rules.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "LALConfigs(rules=" + this.getRules() + ")";
    }
}
