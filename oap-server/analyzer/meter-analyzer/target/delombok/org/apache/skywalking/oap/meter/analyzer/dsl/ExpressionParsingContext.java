// Generated by delombok at Thu Apr 18 20:40:00 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.meter.analyzer.dsl;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import java.io.Closeable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import org.apache.skywalking.oap.server.core.analysis.meter.ScopeType;

/**
 * ExpressionParsingContext contains states in parsing phase of an expression.
 */
public class ExpressionParsingContext implements Closeable {
    static ExpressionParsingContext create() {
        if (CACHE.get() == null) {
            CACHE.set(ExpressionParsingContext.builder().samples(Lists.newArrayList()).downsampling(DownsamplingType.AVG).scopeLabels(Sets.newHashSet()).aggregationLabels(Sets.newHashSet()).build());
        }
        return CACHE.get();
    }

    static Optional<ExpressionParsingContext> get() {
        return Optional.ofNullable(CACHE.get());
    }

    private static final ThreadLocal<ExpressionParsingContext> CACHE = new ThreadLocal<>();
    List<String> samples;
    boolean isHistogram;
    int[] percentiles;
    Set<String> aggregationLabels;
    Set<String> scopeLabels;
    DownsamplingType downsampling;
    ScopeType scopeType;

    /**
     * Get labels no scope related.
     *
     * @return labels
     */
    public List<String> getLabels() {
        List<String> result = new ArrayList<>(aggregationLabels);
        result.removeAll(scopeLabels);
        return result;
    }

    /**
     * Validate context after parsing
     * @param exp expression literal
     */
    public void validate(String exp) {
        Preconditions.checkNotNull(scopeType, exp + ": one of service(), instance() or endpoint() should be invoke");
    }

    @Override
    public void close() {
        CACHE.remove();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    ExpressionParsingContext(final List<String> samples, final boolean isHistogram, final int[] percentiles, final Set<String> aggregationLabels, final Set<String> scopeLabels, final DownsamplingType downsampling, final ScopeType scopeType) {
        this.samples = samples;
        this.isHistogram = isHistogram;
        this.percentiles = percentiles;
        this.aggregationLabels = aggregationLabels;
        this.scopeLabels = scopeLabels;
        this.downsampling = downsampling;
        this.scopeType = scopeType;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class ExpressionParsingContextBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private List<String> samples;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean isHistogram;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int[] percentiles;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Set<String> aggregationLabels;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private Set<String> scopeLabels;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private DownsamplingType downsampling;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ScopeType scopeType;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        ExpressionParsingContextBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder samples(final List<String> samples) {
            this.samples = samples;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder isHistogram(final boolean isHistogram) {
            this.isHistogram = isHistogram;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder percentiles(final int[] percentiles) {
            this.percentiles = percentiles;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder aggregationLabels(final Set<String> aggregationLabels) {
            this.aggregationLabels = aggregationLabels;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder scopeLabels(final Set<String> scopeLabels) {
            this.scopeLabels = scopeLabels;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder downsampling(final DownsamplingType downsampling) {
            this.downsampling = downsampling;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext.ExpressionParsingContextBuilder scopeType(final ScopeType scopeType) {
            this.scopeType = scopeType;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public ExpressionParsingContext build() {
            return new ExpressionParsingContext(this.samples, this.isHistogram, this.percentiles, this.aggregationLabels, this.scopeLabels, this.downsampling, this.scopeType);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "ExpressionParsingContext.ExpressionParsingContextBuilder(samples=" + this.samples + ", isHistogram=" + this.isHistogram + ", percentiles=" + java.util.Arrays.toString(this.percentiles) + ", aggregationLabels=" + this.aggregationLabels + ", scopeLabels=" + this.scopeLabels + ", downsampling=" + this.downsampling + ", scopeType=" + this.scopeType + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static ExpressionParsingContext.ExpressionParsingContextBuilder builder() {
        return new ExpressionParsingContext.ExpressionParsingContextBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getSamples() {
        return this.samples;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isHistogram() {
        return this.isHistogram;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int[] getPercentiles() {
        return this.percentiles;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Set<String> getAggregationLabels() {
        return this.aggregationLabels;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Set<String> getScopeLabels() {
        return this.scopeLabels;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DownsamplingType getDownsampling() {
        return this.downsampling;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ScopeType getScopeType() {
        return this.scopeType;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ExpressionParsingContext(samples=" + this.getSamples() + ", isHistogram=" + this.isHistogram() + ", percentiles=" + java.util.Arrays.toString(this.getPercentiles()) + ", aggregationLabels=" + this.getAggregationLabels() + ", scopeLabels=" + this.getScopeLabels() + ", downsampling=" + this.getDownsampling() + ", scopeType=" + this.getScopeType() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ExpressionParsingContext)) return false;
        final ExpressionParsingContext other = (ExpressionParsingContext) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isHistogram() != other.isHistogram()) return false;
        final java.lang.Object this$samples = this.getSamples();
        final java.lang.Object other$samples = other.getSamples();
        if (this$samples == null ? other$samples != null : !this$samples.equals(other$samples)) return false;
        if (!java.util.Arrays.equals(this.getPercentiles(), other.getPercentiles())) return false;
        final java.lang.Object this$aggregationLabels = this.getAggregationLabels();
        final java.lang.Object other$aggregationLabels = other.getAggregationLabels();
        if (this$aggregationLabels == null ? other$aggregationLabels != null : !this$aggregationLabels.equals(other$aggregationLabels)) return false;
        final java.lang.Object this$scopeLabels = this.getScopeLabels();
        final java.lang.Object other$scopeLabels = other.getScopeLabels();
        if (this$scopeLabels == null ? other$scopeLabels != null : !this$scopeLabels.equals(other$scopeLabels)) return false;
        final java.lang.Object this$downsampling = this.getDownsampling();
        final java.lang.Object other$downsampling = other.getDownsampling();
        if (this$downsampling == null ? other$downsampling != null : !this$downsampling.equals(other$downsampling)) return false;
        final java.lang.Object this$scopeType = this.getScopeType();
        final java.lang.Object other$scopeType = other.getScopeType();
        if (this$scopeType == null ? other$scopeType != null : !this$scopeType.equals(other$scopeType)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ExpressionParsingContext;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isHistogram() ? 79 : 97);
        final java.lang.Object $samples = this.getSamples();
        result = result * PRIME + ($samples == null ? 43 : $samples.hashCode());
        result = result * PRIME + java.util.Arrays.hashCode(this.getPercentiles());
        final java.lang.Object $aggregationLabels = this.getAggregationLabels();
        result = result * PRIME + ($aggregationLabels == null ? 43 : $aggregationLabels.hashCode());
        final java.lang.Object $scopeLabels = this.getScopeLabels();
        result = result * PRIME + ($scopeLabels == null ? 43 : $scopeLabels.hashCode());
        final java.lang.Object $downsampling = this.getDownsampling();
        result = result * PRIME + ($downsampling == null ? 43 : $downsampling.hashCode());
        final java.lang.Object $scopeType = this.getScopeType();
        result = result * PRIME + ($scopeType == null ? 43 : $scopeType.hashCode());
        return result;
    }
}
