// Generated by delombok at Thu Apr 18 20:40:00 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.meter.analyzer.dsl;

import com.google.common.collect.ImmutableMap;
import io.vavr.Function2;
import io.vavr.Tuple2;
import java.time.Duration;
import java.util.function.Function;
import org.apache.skywalking.oap.meter.analyzer.dsl.counter.CounterWindow;

/**
 * Sample represents the metric data point in a range of time.
 */
public class Sample {
    final String name;
    final ImmutableMap<String, String> labels;
    final double value;
    final long timestamp;

    Sample newValue(Function<Double, Double> transform) {
        return toBuilder().value(transform.apply(value)).build();
    }

    Sample increase(String range, String metricName, Function2<Double, Long, Double> transform) {
        Tuple2<Long, Double> i = CounterWindow.INSTANCE.increase(metricName, labels, value, Duration.parse(range).toMillis(), timestamp);
        double nv = transform.apply(i._2, i._1);
        return newValue(ignored -> nv);
    }

    Sample increase(String metricName, Function2<Double, Long, Double> transform) {
        Tuple2<Long, Double> i = CounterWindow.INSTANCE.pop(metricName, labels, value, timestamp);
        double nv = transform.apply(i._2, i._1);
        return newValue(ignored -> nv);
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    Sample(final String name, final ImmutableMap<String, String> labels, final double value, final long timestamp) {
        this.name = name;
        this.labels = labels;
        this.value = value;
        this.timestamp = timestamp;
    }


    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class SampleBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private String name;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ImmutableMap<String, String> labels;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private double value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private long timestamp;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        SampleBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample.SampleBuilder name(final String name) {
            this.name = name;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample.SampleBuilder labels(final ImmutableMap<String, String> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample.SampleBuilder value(final double value) {
            this.value = value;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample.SampleBuilder timestamp(final long timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public Sample build() {
            return new Sample(this.name, this.labels, this.value, this.timestamp);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "Sample.SampleBuilder(name=" + this.name + ", labels=" + this.labels + ", value=" + this.value + ", timestamp=" + this.timestamp + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static Sample.SampleBuilder builder() {
        return new Sample.SampleBuilder();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Sample.SampleBuilder toBuilder() {
        return new Sample.SampleBuilder().name(this.name).labels(this.labels).value(this.value).timestamp(this.timestamp);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Sample)) return false;
        final Sample other = (Sample) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (java.lang.Double.compare(this.getValue(), other.getValue()) != 0) return false;
        if (this.getTimestamp() != other.getTimestamp()) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$labels = this.getLabels();
        final java.lang.Object other$labels = other.getLabels();
        if (this$labels == null ? other$labels != null : !this$labels.equals(other$labels)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Sample;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $value = java.lang.Double.doubleToLongBits(this.getValue());
        result = result * PRIME + (int) ($value >>> 32 ^ $value);
        final long $timestamp = this.getTimestamp();
        result = result * PRIME + (int) ($timestamp >>> 32 ^ $timestamp);
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $labels = this.getLabels();
        result = result * PRIME + ($labels == null ? 43 : $labels.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Sample(name=" + this.getName() + ", labels=" + this.getLabels() + ", value=" + this.getValue() + ", timestamp=" + this.getTimestamp() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ImmutableMap<String, String> getLabels() {
        return this.labels;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public double getValue() {
        return this.value;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTimestamp() {
        return this.timestamp;
    }
}
