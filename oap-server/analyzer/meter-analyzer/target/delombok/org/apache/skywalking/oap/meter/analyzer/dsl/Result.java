// Generated by delombok at Thu Apr 18 20:40:00 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.meter.analyzer.dsl;

/**
 * Result indicates the parsing result of expression.
 */
public class Result {
    /**
     * fail is a static factory method builds failed result based on {@link Throwable}.
     *
     * @param throwable to build failed result.
     * @return failed result.
     */
    public static Result fail(final Throwable throwable) {
        return new Result(false, true, throwable.getMessage(), SampleFamily.EMPTY);
    }

    /**
     * fail is a static factory method builds failed result based on error message.
     *
     * @param message is the error details why the result is failed.
     * @return failed result.
     */
    public static Result fail(String message) {
        return new Result(false, false, message, SampleFamily.EMPTY);
    }

    /**
     * fail is a static factory method builds failed result.
     *
     * @return failed result.
     */
    public static Result fail() {
        return new Result(false, false, null, SampleFamily.EMPTY);
    }

    /**
     * success is a static factory method builds successful result.
     *
     * @param sf is the parsed result.
     * @return successful result.
     */
    public static Result success(SampleFamily sf) {
        return new Result(true, false, null, sf);
    }

    private final boolean success;
    private final boolean isThrowable;
    private final String error;
    private final SampleFamily data;

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private Result(final boolean success, final boolean isThrowable, final String error, final SampleFamily data) {
        this.success = success;
        this.isThrowable = isThrowable;
        this.error = error;
        this.data = data;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Result)) return false;
        final Result other = (Result) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.isSuccess() != other.isSuccess()) return false;
        if (this.isThrowable() != other.isThrowable()) return false;
        final java.lang.Object this$error = this.getError();
        final java.lang.Object other$error = other.getError();
        if (this$error == null ? other$error != null : !this$error.equals(other$error)) return false;
        final java.lang.Object this$data = this.getData();
        final java.lang.Object other$data = other.getData();
        if (this$data == null ? other$data != null : !this$data.equals(other$data)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isSuccess() ? 79 : 97);
        result = result * PRIME + (this.isThrowable() ? 79 : 97);
        final java.lang.Object $error = this.getError();
        result = result * PRIME + ($error == null ? 43 : $error.hashCode());
        final java.lang.Object $data = this.getData();
        result = result * PRIME + ($data == null ? 43 : $data.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "Result(success=" + this.isSuccess() + ", isThrowable=" + this.isThrowable() + ", error=" + this.getError() + ", data=" + this.getData() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isSuccess() {
        return this.success;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isThrowable() {
        return this.isThrowable;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getError() {
        return this.error;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public SampleFamily getData() {
        return this.data;
    }
}
