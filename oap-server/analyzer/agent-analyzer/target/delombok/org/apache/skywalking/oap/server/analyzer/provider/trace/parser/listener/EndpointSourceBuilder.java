// Generated by delombok at Thu Apr 18 20:40:02 CST 2024
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
import org.apache.skywalking.oap.server.core.analysis.Layer;
import org.apache.skywalking.oap.server.core.config.NamingControl;
import org.apache.skywalking.oap.server.core.source.DetectPoint;
import org.apache.skywalking.oap.server.core.source.Endpoint;
import org.apache.skywalking.oap.server.core.source.RequestType;

/**
 * Endpoint traffic source builder. Endpoint represents an entrance to expose logic.
 * Typically, it could be HTTP URI, gRPC service name, etc. for RPC, or a local method is required to be analyzed.
 *
 * @since 9.0.0
 */
class EndpointSourceBuilder {
    protected final NamingControl namingControl;
    protected long timeBucket;
    protected String destServiceName;
    protected Layer destLayer;
    protected String destServiceInstanceName;
    protected String destEndpointName;
    protected int latency;
    protected boolean status;
    protected int httpResponseStatusCode;
    protected String rpcStatusCode;
    protected RequestType type;
    protected DetectPoint detectPoint;
    protected final List<String> tags = new ArrayList<>();
    protected final Map<String, String> originalTags = new HashMap<>();

    void prepare() {
        this.destServiceName = namingControl.formatServiceName(destServiceName);
        this.destServiceInstanceName = namingControl.formatInstanceName(destServiceInstanceName);
        this.destEndpointName = namingControl.formatEndpointName(destServiceName, destEndpointName);
    }

    /**
     * Endpoint meta and metrics of {@link #destEndpointName} related source. The metrics base on the OAL scripts.
     */
    Endpoint toEndpoint() {
        Endpoint endpoint = new Endpoint();
        endpoint.setName(destEndpointName);
        endpoint.setServiceName(destServiceName);
        endpoint.setServiceLayer(destLayer);
        endpoint.setServiceInstanceName(destServiceInstanceName);
        endpoint.setLatency(latency);
        endpoint.setStatus(status);
        endpoint.setHttpResponseStatusCode(httpResponseStatusCode);
        endpoint.setRpcStatusCode(rpcStatusCode);
        endpoint.setType(type);
        endpoint.setTags(tags);
        endpoint.setOriginalTags(originalTags);
        endpoint.setTimeBucket(timeBucket);
        return endpoint;
    }

    void setTag(KeyStringValuePair tag) {
        tags.add(tag.getKey().trim() + ":" + tag.getValue().trim());
        originalTags.put(tag.getKey(), tag.getValue());
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public EndpointSourceBuilder(final NamingControl namingControl) {
        this.namingControl = namingControl;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public long getTimeBucket() {
        return this.timeBucket;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTimeBucket(final long timeBucket) {
        this.timeBucket = timeBucket;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceName() {
        return this.destServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceName(final String destServiceName) {
        this.destServiceName = destServiceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Layer getDestLayer() {
        return this.destLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestLayer(final Layer destLayer) {
        this.destLayer = destLayer;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestServiceInstanceName() {
        return this.destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestServiceInstanceName(final String destServiceInstanceName) {
        this.destServiceInstanceName = destServiceInstanceName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getDestEndpointName() {
        return this.destEndpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDestEndpointName(final String destEndpointName) {
        this.destEndpointName = destEndpointName;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getLatency() {
        return this.latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setLatency(final int latency) {
        this.latency = latency;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean isStatus() {
        return this.status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setStatus(final boolean status) {
        this.status = status;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getHttpResponseStatusCode() {
        return this.httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHttpResponseStatusCode(final int httpResponseStatusCode) {
        this.httpResponseStatusCode = httpResponseStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getRpcStatusCode() {
        return this.rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setRpcStatusCode(final String rpcStatusCode) {
        this.rpcStatusCode = rpcStatusCode;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public RequestType getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setType(final RequestType type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public DetectPoint getDetectPoint() {
        return this.detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDetectPoint(final DetectPoint detectPoint) {
        this.detectPoint = detectPoint;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public List<String> getTags() {
        return this.tags;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Map<String, String> getOriginalTags() {
        return this.originalTags;
    }
}
